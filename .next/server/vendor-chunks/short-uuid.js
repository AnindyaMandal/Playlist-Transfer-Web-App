"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/short-uuid";
exports.ids = ["vendor-chunks/short-uuid"];
exports.modules = {

/***/ "(rsc)/./node_modules/short-uuid/index.js":
/*!******************************************!*\
  !*** ./node_modules/short-uuid/index.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Created by Samuel on 6/4/2016.\n * Simple wrapper functions to produce shorter UUIDs for cookies, maybe everything?\n */ \nconst { v4: uuidv4 } = __webpack_require__(/*! uuid */ \"(rsc)/./node_modules/uuid/dist/esm-node/index.js\");\nconst anyBase = __webpack_require__(/*! any-base */ \"(rsc)/./node_modules/any-base/index.js\");\nconst flickrBase58 = \"123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ\";\nconst cookieBase90 = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!#$%&'()*+-./:<=>?@[]^_`{|}~\";\nconst baseOptions = {\n    consistentLength: true\n};\n// A default generator, instantiated only if used.\nlet toFlickr;\n/**\n * Takes a UUID, strips the dashes, and translates.\n * @param {string} longId\n * @param {function(string)} translator\n * @param {Object} [paddingParams]\n * @returns {string}\n */ const shortenUUID = (longId, translator, paddingParams)=>{\n    const translated = translator(longId.toLowerCase().replace(/-/g, \"\"));\n    if (!paddingParams || !paddingParams.consistentLength) return translated;\n    return translated.padStart(paddingParams.shortIdLength, paddingParams.paddingChar);\n};\n/**\n * Translate back to hex and turn back into UUID format, with dashes\n * @param {string} shortId\n * @param {function(string)} translator\n * @returns {string}\n */ const enlargeUUID = (shortId, translator)=>{\n    const uu1 = translator(shortId).padStart(32, \"0\");\n    // Join the zero padding and the UUID and then slice it up with match\n    const m = uu1.match(/(\\w{8})(\\w{4})(\\w{4})(\\w{4})(\\w{12})/);\n    // Accumulate the matches and join them.\n    return [\n        m[1],\n        m[2],\n        m[3],\n        m[4],\n        m[5]\n    ].join(\"-\");\n};\n// Calculate length for the shortened ID\nconst getShortIdLength = (alphabetLength)=>Math.ceil(Math.log(2 ** 128) / Math.log(alphabetLength));\nmodule.exports = (()=>{\n    /**\n   * @param {string} toAlphabet - Defaults to flickrBase58 if not provided\n   * @param {Object} [options]\n   *\n   * @returns {{new: (function()),\n   *  uuid: (function()),\n   *  fromUUID: (function(string)),\n   *  toUUID: (function(string)),\n   *  alphabet: (string)}}\n   */ const makeConvertor = (toAlphabet, options)=>{\n        // Default to Flickr 58\n        const useAlphabet = toAlphabet || flickrBase58;\n        // Default to baseOptions\n        const selectedOptions = {\n            ...baseOptions,\n            ...options\n        };\n        // Check alphabet for duplicate entries\n        if ([\n            ...new Set(Array.from(useAlphabet))\n        ].length !== useAlphabet.length) {\n            throw new Error(\"The provided Alphabet has duplicate characters resulting in unreliable results\");\n        }\n        const shortIdLength = getShortIdLength(useAlphabet.length);\n        // Padding Params\n        const paddingParams = {\n            shortIdLength,\n            consistentLength: selectedOptions.consistentLength,\n            paddingChar: useAlphabet[0]\n        };\n        // UUIDs are in hex, so we translate to and from.\n        const fromHex = anyBase(anyBase.HEX, useAlphabet);\n        const toHex = anyBase(useAlphabet, anyBase.HEX);\n        const generate = ()=>shortenUUID(uuidv4(), fromHex, paddingParams);\n        const translator = {\n            new: generate,\n            generate,\n            uuid: uuidv4,\n            fromUUID: (uuid)=>shortenUUID(uuid, fromHex, paddingParams),\n            toUUID: (shortUuid)=>enlargeUUID(shortUuid, toHex),\n            alphabet: useAlphabet,\n            maxLength: shortIdLength\n        };\n        Object.freeze(translator);\n        return translator;\n    };\n    // Expose the constants for other purposes.\n    makeConvertor.constants = {\n        flickrBase58,\n        cookieBase90\n    };\n    // Expose the generic v4 UUID generator for convenience\n    makeConvertor.uuid = uuidv4;\n    // Provide a generic generator\n    makeConvertor.generate = ()=>{\n        if (!toFlickr) {\n            // Generate on first use;\n            toFlickr = makeConvertor(flickrBase58).generate;\n        }\n        return toFlickr();\n    };\n    return makeConvertor;\n})();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/short-uuid/index.js\n");

/***/ })

};
;
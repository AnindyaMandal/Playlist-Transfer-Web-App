"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/google-auth-library";
exports.ids = ["vendor-chunks/google-auth-library"];
exports.modules = {

/***/ "(action-browser)/./node_modules/google-auth-library/build/src/auth/authclient.js":
/*!***********************************************************************!*\
  !*** ./node_modules/google-auth-library/build/src/auth/authclient.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright 2012 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.AuthClient = exports.DEFAULT_EAGER_REFRESH_THRESHOLD_MILLIS = exports.DEFAULT_UNIVERSE = void 0;\nconst events_1 = __webpack_require__(/*! events */ \"events\");\nconst transporters_1 = __webpack_require__(/*! ../transporters */ \"(action-browser)/./node_modules/google-auth-library/build/src/transporters.js\");\nconst util_1 = __webpack_require__(/*! ../util */ \"(action-browser)/./node_modules/google-auth-library/build/src/util.js\");\n/**\n * The default cloud universe\n *\n * @see {@link AuthJSONOptions.universe_domain}\n */ exports.DEFAULT_UNIVERSE = \"googleapis.com\";\n/**\n * The default {@link AuthClientOptions.eagerRefreshThresholdMillis}\n */ exports.DEFAULT_EAGER_REFRESH_THRESHOLD_MILLIS = 5 * 60 * 1000;\nclass AuthClient extends events_1.EventEmitter {\n    constructor(opts = {}){\n        var _a, _b, _c, _d, _e;\n        super();\n        this.credentials = {};\n        this.eagerRefreshThresholdMillis = exports.DEFAULT_EAGER_REFRESH_THRESHOLD_MILLIS;\n        this.forceRefreshOnFailure = false;\n        this.universeDomain = exports.DEFAULT_UNIVERSE;\n        const options = (0, util_1.originalOrCamelOptions)(opts);\n        // Shared auth options\n        this.projectId = (_a = options.get(\"project_id\")) !== null && _a !== void 0 ? _a : null;\n        this.quotaProjectId = options.get(\"quota_project_id\");\n        this.credentials = (_b = options.get(\"credentials\")) !== null && _b !== void 0 ? _b : {};\n        this.universeDomain = (_c = options.get(\"universe_domain\")) !== null && _c !== void 0 ? _c : exports.DEFAULT_UNIVERSE;\n        // Shared client options\n        this.transporter = (_d = opts.transporter) !== null && _d !== void 0 ? _d : new transporters_1.DefaultTransporter();\n        if (opts.transporterOptions) {\n            this.transporter.defaults = opts.transporterOptions;\n        }\n        if (opts.eagerRefreshThresholdMillis) {\n            this.eagerRefreshThresholdMillis = opts.eagerRefreshThresholdMillis;\n        }\n        this.forceRefreshOnFailure = (_e = opts.forceRefreshOnFailure) !== null && _e !== void 0 ? _e : false;\n    }\n    /**\n     * Sets the auth credentials.\n     */ setCredentials(credentials) {\n        this.credentials = credentials;\n    }\n    /**\n     * Append additional headers, e.g., x-goog-user-project, shared across the\n     * classes inheriting AuthClient. This method should be used by any method\n     * that overrides getRequestMetadataAsync(), which is a shared helper for\n     * setting request information in both gRPC and HTTP API calls.\n     *\n     * @param headers object to append additional headers to.\n     */ addSharedMetadataHeaders(headers) {\n        // quota_project_id, stored in application_default_credentials.json, is set in\n        // the x-goog-user-project header, to indicate an alternate account for\n        // billing and quota:\n        if (!headers[\"x-goog-user-project\"] && // don't override a value the user sets.\n        this.quotaProjectId) {\n            headers[\"x-goog-user-project\"] = this.quotaProjectId;\n        }\n        return headers;\n    }\n}\nexports.AuthClient = AuthClient;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/google-auth-library/build/src/auth/authclient.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/google-auth-library/build/src/auth/awsclient.js":
/*!**********************************************************************!*\
  !*** ./node_modules/google-auth-library/build/src/auth/awsclient.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.AwsClient = void 0;\nconst awsrequestsigner_1 = __webpack_require__(/*! ./awsrequestsigner */ \"(action-browser)/./node_modules/google-auth-library/build/src/auth/awsrequestsigner.js\");\nconst baseexternalclient_1 = __webpack_require__(/*! ./baseexternalclient */ \"(action-browser)/./node_modules/google-auth-library/build/src/auth/baseexternalclient.js\");\n/**\n * AWS external account client. This is used for AWS workloads, where\n * AWS STS GetCallerIdentity serialized signed requests are exchanged for\n * GCP access token.\n */ class AwsClient extends baseexternalclient_1.BaseExternalAccountClient {\n    /**\n     * Instantiates an AwsClient instance using the provided JSON\n     * object loaded from an external account credentials file.\n     * An error is thrown if the credential is not a valid AWS credential.\n     * @param options The external account options object typically loaded\n     *   from the external account JSON credential file.\n     * @param additionalOptions **DEPRECATED, all options are available in the\n     *   `options` parameter.** Optional additional behavior customization options.\n     *   These currently customize expiration threshold time and whether to retry\n     *   on 401/403 API request errors.\n     */ constructor(options, additionalOptions){\n        super(options, additionalOptions);\n        this.environmentId = options.credential_source.environment_id;\n        // This is only required if the AWS region is not available in the\n        // AWS_REGION or AWS_DEFAULT_REGION environment variables.\n        this.regionUrl = options.credential_source.region_url;\n        // This is only required if AWS security credentials are not available in\n        // environment variables.\n        this.securityCredentialsUrl = options.credential_source.url;\n        this.regionalCredVerificationUrl = options.credential_source.regional_cred_verification_url;\n        this.imdsV2SessionTokenUrl = options.credential_source.imdsv2_session_token_url;\n        this.awsRequestSigner = null;\n        this.region = \"\";\n        this.credentialSourceType = \"aws\";\n        // Data validators.\n        this.validateEnvironmentId();\n    }\n    validateEnvironmentId() {\n        var _a;\n        const match = (_a = this.environmentId) === null || _a === void 0 ? void 0 : _a.match(/^(aws)(\\d+)$/);\n        if (!match || !this.regionalCredVerificationUrl) {\n            throw new Error('No valid AWS \"credential_source\" provided');\n        } else if (parseInt(match[2], 10) !== 1) {\n            throw new Error(`aws version \"${match[2]}\" is not supported in the current build.`);\n        }\n    }\n    /**\n     * Triggered when an external subject token is needed to be exchanged for a\n     * GCP access token via GCP STS endpoint.\n     * This uses the `options.credential_source` object to figure out how\n     * to retrieve the token using the current environment. In this case,\n     * this uses a serialized AWS signed request to the STS GetCallerIdentity\n     * endpoint.\n     * The logic is summarized as:\n     * 1. If imdsv2_session_token_url is provided in the credential source, then\n     *    fetch the aws session token and include it in the headers of the\n     *    metadata requests. This is a requirement for IDMSv2 but optional\n     *    for IDMSv1.\n     * 2. Retrieve AWS region from availability-zone.\n     * 3a. Check AWS credentials in environment variables. If not found, get\n     *     from security-credentials endpoint.\n     * 3b. Get AWS credentials from security-credentials endpoint. In order\n     *     to retrieve this, the AWS role needs to be determined by calling\n     *     security-credentials endpoint without any argument. Then the\n     *     credentials can be retrieved via: security-credentials/role_name\n     * 4. Generate the signed request to AWS STS GetCallerIdentity action.\n     * 5. Inject x-goog-cloud-target-resource into header and serialize the\n     *    signed request. This will be the subject-token to pass to GCP STS.\n     * @return A promise that resolves with the external subject token.\n     */ async retrieveSubjectToken() {\n        // Initialize AWS request signer if not already initialized.\n        if (!this.awsRequestSigner) {\n            const metadataHeaders = {};\n            // Only retrieve the IMDSv2 session token if both the security credentials and region are\n            // not retrievable through the environment.\n            // The credential config contains all the URLs by default but clients may be running this\n            // where the metadata server is not available and returning the credentials through the environment.\n            // Removing this check may break them.\n            if (this.shouldUseMetadataServer() && this.imdsV2SessionTokenUrl) {\n                metadataHeaders[\"x-aws-ec2-metadata-token\"] = await this.getImdsV2SessionToken();\n            }\n            this.region = await this.getAwsRegion(metadataHeaders);\n            this.awsRequestSigner = new awsrequestsigner_1.AwsRequestSigner(async ()=>{\n                // Check environment variables for permanent credentials first.\n                // https://docs.aws.amazon.com/general/latest/gr/aws-sec-cred-types.html\n                if (this.securityCredentialsFromEnv) {\n                    return this.securityCredentialsFromEnv;\n                }\n                // Since the role on a VM can change, we don't need to cache it.\n                const roleName = await this.getAwsRoleName(metadataHeaders);\n                // Temporary credentials typically last for several hours.\n                // Expiration is returned in response.\n                // Consider future optimization of this logic to cache AWS tokens\n                // until their natural expiration.\n                const awsCreds = await this.getAwsSecurityCredentials(roleName, metadataHeaders);\n                return {\n                    accessKeyId: awsCreds.AccessKeyId,\n                    secretAccessKey: awsCreds.SecretAccessKey,\n                    token: awsCreds.Token\n                };\n            }, this.region);\n        }\n        // Generate signed request to AWS STS GetCallerIdentity API.\n        // Use the required regional endpoint. Otherwise, the request will fail.\n        const options = await this.awsRequestSigner.getRequestOptions({\n            url: this.regionalCredVerificationUrl.replace(\"{region}\", this.region),\n            method: \"POST\"\n        });\n        // The GCP STS endpoint expects the headers to be formatted as:\n        // [\n        //   {key: 'x-amz-date', value: '...'},\n        //   {key: 'Authorization', value: '...'},\n        //   ...\n        // ]\n        // And then serialized as:\n        // encodeURIComponent(JSON.stringify({\n        //   url: '...',\n        //   method: 'POST',\n        //   headers: [{key: 'x-amz-date', value: '...'}, ...]\n        // }))\n        const reformattedHeader = [];\n        const extendedHeaders = Object.assign({\n            // The full, canonical resource name of the workload identity pool\n            // provider, with or without the HTTPS prefix.\n            // Including this header as part of the signature is recommended to\n            // ensure data integrity.\n            \"x-goog-cloud-target-resource\": this.audience\n        }, options.headers);\n        // Reformat header to GCP STS expected format.\n        for(const key in extendedHeaders){\n            reformattedHeader.push({\n                key,\n                value: extendedHeaders[key]\n            });\n        }\n        // Serialize the reformatted signed request.\n        return encodeURIComponent(JSON.stringify({\n            url: options.url,\n            method: options.method,\n            headers: reformattedHeader\n        }));\n    }\n    /**\n     * @return A promise that resolves with the IMDSv2 Session Token.\n     */ async getImdsV2SessionToken() {\n        const opts = {\n            url: this.imdsV2SessionTokenUrl,\n            method: \"PUT\",\n            responseType: \"text\",\n            headers: {\n                \"x-aws-ec2-metadata-token-ttl-seconds\": \"300\"\n            }\n        };\n        const response = await this.transporter.request(opts);\n        return response.data;\n    }\n    /**\n     * @param headers The headers to be used in the metadata request.\n     * @return A promise that resolves with the current AWS region.\n     */ async getAwsRegion(headers) {\n        // Priority order for region determination:\n        // AWS_REGION > AWS_DEFAULT_REGION > metadata server.\n        if (this.regionFromEnv) {\n            return this.regionFromEnv;\n        }\n        if (!this.regionUrl) {\n            throw new Error(\"Unable to determine AWS region due to missing \" + '\"options.credential_source.region_url\"');\n        }\n        const opts = {\n            url: this.regionUrl,\n            method: \"GET\",\n            responseType: \"text\",\n            headers: headers\n        };\n        const response = await this.transporter.request(opts);\n        // Remove last character. For example, if us-east-2b is returned,\n        // the region would be us-east-2.\n        return response.data.substr(0, response.data.length - 1);\n    }\n    /**\n     * @param headers The headers to be used in the metadata request.\n     * @return A promise that resolves with the assigned role to the current\n     *   AWS VM. This is needed for calling the security-credentials endpoint.\n     */ async getAwsRoleName(headers) {\n        if (!this.securityCredentialsUrl) {\n            throw new Error(\"Unable to determine AWS role name due to missing \" + '\"options.credential_source.url\"');\n        }\n        const opts = {\n            url: this.securityCredentialsUrl,\n            method: \"GET\",\n            responseType: \"text\",\n            headers: headers\n        };\n        const response = await this.transporter.request(opts);\n        return response.data;\n    }\n    /**\n     * Retrieves the temporary AWS credentials by calling the security-credentials\n     * endpoint as specified in the `credential_source` object.\n     * @param roleName The role attached to the current VM.\n     * @param headers The headers to be used in the metadata request.\n     * @return A promise that resolves with the temporary AWS credentials\n     *   needed for creating the GetCallerIdentity signed request.\n     */ async getAwsSecurityCredentials(roleName, headers) {\n        const response = await this.transporter.request({\n            url: `${this.securityCredentialsUrl}/${roleName}`,\n            responseType: \"json\",\n            headers: headers\n        });\n        return response.data;\n    }\n    shouldUseMetadataServer() {\n        // The metadata server must be used when either the AWS region or AWS security\n        // credentials cannot be retrieved through their defined environment variables.\n        return !this.regionFromEnv || !this.securityCredentialsFromEnv;\n    }\n    get regionFromEnv() {\n        // The AWS region can be provided through AWS_REGION or AWS_DEFAULT_REGION.\n        // Only one is required.\n        return process.env[\"AWS_REGION\"] || process.env[\"AWS_DEFAULT_REGION\"] || null;\n    }\n    get securityCredentialsFromEnv() {\n        // Both AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY are required.\n        if (process.env[\"AWS_ACCESS_KEY_ID\"] && process.env[\"AWS_SECRET_ACCESS_KEY\"]) {\n            return {\n                accessKeyId: process.env[\"AWS_ACCESS_KEY_ID\"],\n                secretAccessKey: process.env[\"AWS_SECRET_ACCESS_KEY\"],\n                token: process.env[\"AWS_SESSION_TOKEN\"]\n            };\n        }\n        return null;\n    }\n}\nexports.AwsClient = AwsClient;\nAwsClient.AWS_EC2_METADATA_IPV4_ADDRESS = \"169.254.169.254\";\nAwsClient.AWS_EC2_METADATA_IPV6_ADDRESS = \"fd00:ec2::254\";\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/google-auth-library/build/src/auth/awsclient.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/google-auth-library/build/src/auth/awsrequestsigner.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/google-auth-library/build/src/auth/awsrequestsigner.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.AwsRequestSigner = void 0;\nconst crypto_1 = __webpack_require__(/*! ../crypto/crypto */ \"(action-browser)/./node_modules/google-auth-library/build/src/crypto/crypto.js\");\n/** AWS Signature Version 4 signing algorithm identifier.  */ const AWS_ALGORITHM = \"AWS4-HMAC-SHA256\";\n/**\n * The termination string for the AWS credential scope value as defined in\n * https://docs.aws.amazon.com/general/latest/gr/sigv4-create-string-to-sign.html\n */ const AWS_REQUEST_TYPE = \"aws4_request\";\n/**\n * Implements an AWS API request signer based on the AWS Signature Version 4\n * signing process.\n * https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html\n */ class AwsRequestSigner {\n    /**\n     * Instantiates an AWS API request signer used to send authenticated signed\n     * requests to AWS APIs based on the AWS Signature Version 4 signing process.\n     * This also provides a mechanism to generate the signed request without\n     * sending it.\n     * @param getCredentials A mechanism to retrieve AWS security credentials\n     *   when needed.\n     * @param region The AWS region to use.\n     */ constructor(getCredentials, region){\n        this.getCredentials = getCredentials;\n        this.region = region;\n        this.crypto = (0, crypto_1.createCrypto)();\n    }\n    /**\n     * Generates the signed request for the provided HTTP request for calling\n     * an AWS API. This follows the steps described at:\n     * https://docs.aws.amazon.com/general/latest/gr/sigv4_signing.html\n     * @param amzOptions The AWS request options that need to be signed.\n     * @return A promise that resolves with the GaxiosOptions containing the\n     *   signed HTTP request parameters.\n     */ async getRequestOptions(amzOptions) {\n        if (!amzOptions.url) {\n            throw new Error('\"url\" is required in \"amzOptions\"');\n        }\n        // Stringify JSON requests. This will be set in the request body of the\n        // generated signed request.\n        const requestPayloadData = typeof amzOptions.data === \"object\" ? JSON.stringify(amzOptions.data) : amzOptions.data;\n        const url = amzOptions.url;\n        const method = amzOptions.method || \"GET\";\n        const requestPayload = amzOptions.body || requestPayloadData;\n        const additionalAmzHeaders = amzOptions.headers;\n        const awsSecurityCredentials = await this.getCredentials();\n        const uri = new URL(url);\n        const headerMap = await generateAuthenticationHeaderMap({\n            crypto: this.crypto,\n            host: uri.host,\n            canonicalUri: uri.pathname,\n            canonicalQuerystring: uri.search.substr(1),\n            method,\n            region: this.region,\n            securityCredentials: awsSecurityCredentials,\n            requestPayload,\n            additionalAmzHeaders\n        });\n        // Append additional optional headers, eg. X-Amz-Target, Content-Type, etc.\n        const headers = Object.assign(// Add x-amz-date if available.\n        headerMap.amzDate ? {\n            \"x-amz-date\": headerMap.amzDate\n        } : {}, {\n            Authorization: headerMap.authorizationHeader,\n            host: uri.host\n        }, additionalAmzHeaders || {});\n        if (awsSecurityCredentials.token) {\n            Object.assign(headers, {\n                \"x-amz-security-token\": awsSecurityCredentials.token\n            });\n        }\n        const awsSignedReq = {\n            url,\n            method: method,\n            headers\n        };\n        if (typeof requestPayload !== \"undefined\") {\n            awsSignedReq.body = requestPayload;\n        }\n        return awsSignedReq;\n    }\n}\nexports.AwsRequestSigner = AwsRequestSigner;\n/**\n * Creates the HMAC-SHA256 hash of the provided message using the\n * provided key.\n *\n * @param crypto The crypto instance used to facilitate cryptographic\n *   operations.\n * @param key The HMAC-SHA256 key to use.\n * @param msg The message to hash.\n * @return The computed hash bytes.\n */ async function sign(crypto, key, msg) {\n    return await crypto.signWithHmacSha256(key, msg);\n}\n/**\n * Calculates the signing key used to calculate the signature for\n * AWS Signature Version 4 based on:\n * https://docs.aws.amazon.com/general/latest/gr/sigv4-calculate-signature.html\n *\n * @param crypto The crypto instance used to facilitate cryptographic\n *   operations.\n * @param key The AWS secret access key.\n * @param dateStamp The '%Y%m%d' date format.\n * @param region The AWS region.\n * @param serviceName The AWS service name, eg. sts.\n * @return The signing key bytes.\n */ async function getSigningKey(crypto, key, dateStamp, region, serviceName) {\n    const kDate = await sign(crypto, `AWS4${key}`, dateStamp);\n    const kRegion = await sign(crypto, kDate, region);\n    const kService = await sign(crypto, kRegion, serviceName);\n    const kSigning = await sign(crypto, kService, \"aws4_request\");\n    return kSigning;\n}\n/**\n * Generates the authentication header map needed for generating the AWS\n * Signature Version 4 signed request.\n *\n * @param option The options needed to compute the authentication header map.\n * @return The AWS authentication header map which constitutes of the following\n *   components: amz-date, authorization header and canonical query string.\n */ async function generateAuthenticationHeaderMap(options) {\n    const additionalAmzHeaders = options.additionalAmzHeaders || {};\n    const requestPayload = options.requestPayload || \"\";\n    // iam.amazonaws.com host => iam service.\n    // sts.us-east-2.amazonaws.com => sts service.\n    const serviceName = options.host.split(\".\")[0];\n    const now = new Date();\n    // Format: '%Y%m%dT%H%M%SZ'.\n    const amzDate = now.toISOString().replace(/[-:]/g, \"\").replace(/\\.[0-9]+/, \"\");\n    // Format: '%Y%m%d'.\n    const dateStamp = now.toISOString().replace(/[-]/g, \"\").replace(/T.*/, \"\");\n    // Change all additional headers to be lower case.\n    const reformattedAdditionalAmzHeaders = {};\n    Object.keys(additionalAmzHeaders).forEach((key)=>{\n        reformattedAdditionalAmzHeaders[key.toLowerCase()] = additionalAmzHeaders[key];\n    });\n    // Add AWS token if available.\n    if (options.securityCredentials.token) {\n        reformattedAdditionalAmzHeaders[\"x-amz-security-token\"] = options.securityCredentials.token;\n    }\n    // Header keys need to be sorted alphabetically.\n    const amzHeaders = Object.assign({\n        host: options.host\n    }, // Previously the date was not fixed with x-amz- and could be provided manually.\n    // https://github.com/boto/botocore/blob/879f8440a4e9ace5d3cf145ce8b3d5e5ffb892ef/tests/unit/auth/aws4_testsuite/get-header-value-trim.req\n    reformattedAdditionalAmzHeaders.date ? {} : {\n        \"x-amz-date\": amzDate\n    }, reformattedAdditionalAmzHeaders);\n    let canonicalHeaders = \"\";\n    const signedHeadersList = Object.keys(amzHeaders).sort();\n    signedHeadersList.forEach((key)=>{\n        canonicalHeaders += `${key}:${amzHeaders[key]}\\n`;\n    });\n    const signedHeaders = signedHeadersList.join(\";\");\n    const payloadHash = await options.crypto.sha256DigestHex(requestPayload);\n    // https://docs.aws.amazon.com/general/latest/gr/sigv4-create-canonical-request.html\n    const canonicalRequest = `${options.method}\\n` + `${options.canonicalUri}\\n` + `${options.canonicalQuerystring}\\n` + `${canonicalHeaders}\\n` + `${signedHeaders}\\n` + `${payloadHash}`;\n    const credentialScope = `${dateStamp}/${options.region}/${serviceName}/${AWS_REQUEST_TYPE}`;\n    // https://docs.aws.amazon.com/general/latest/gr/sigv4-create-string-to-sign.html\n    const stringToSign = `${AWS_ALGORITHM}\\n` + `${amzDate}\\n` + `${credentialScope}\\n` + await options.crypto.sha256DigestHex(canonicalRequest);\n    // https://docs.aws.amazon.com/general/latest/gr/sigv4-calculate-signature.html\n    const signingKey = await getSigningKey(options.crypto, options.securityCredentials.secretAccessKey, dateStamp, options.region, serviceName);\n    const signature = await sign(options.crypto, signingKey, stringToSign);\n    // https://docs.aws.amazon.com/general/latest/gr/sigv4-add-signature-to-request.html\n    const authorizationHeader = `${AWS_ALGORITHM} Credential=${options.securityCredentials.accessKeyId}/` + `${credentialScope}, SignedHeaders=${signedHeaders}, ` + `Signature=${(0, crypto_1.fromArrayBufferToHex)(signature)}`;\n    return {\n        // Do not return x-amz-date if date is available.\n        amzDate: reformattedAdditionalAmzHeaders.date ? undefined : amzDate,\n        authorizationHeader,\n        canonicalQuerystring: options.canonicalQuerystring\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/google-auth-library/build/src/auth/awsrequestsigner.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/google-auth-library/build/src/auth/baseexternalclient.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/google-auth-library/build/src/auth/baseexternalclient.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.BaseExternalAccountClient = exports.DEFAULT_UNIVERSE = exports.CLOUD_RESOURCE_MANAGER = exports.EXTERNAL_ACCOUNT_TYPE = exports.EXPIRATION_TIME_OFFSET = void 0;\nconst stream = __webpack_require__(/*! stream */ \"stream\");\nconst authclient_1 = __webpack_require__(/*! ./authclient */ \"(action-browser)/./node_modules/google-auth-library/build/src/auth/authclient.js\");\nconst sts = __webpack_require__(/*! ./stscredentials */ \"(action-browser)/./node_modules/google-auth-library/build/src/auth/stscredentials.js\");\nconst util_1 = __webpack_require__(/*! ../util */ \"(action-browser)/./node_modules/google-auth-library/build/src/util.js\");\n/**\n * The required token exchange grant_type: rfc8693#section-2.1\n */ const STS_GRANT_TYPE = \"urn:ietf:params:oauth:grant-type:token-exchange\";\n/**\n * The requested token exchange requested_token_type: rfc8693#section-2.1\n */ const STS_REQUEST_TOKEN_TYPE = \"urn:ietf:params:oauth:token-type:access_token\";\n/** The default OAuth scope to request when none is provided. */ const DEFAULT_OAUTH_SCOPE = \"https://www.googleapis.com/auth/cloud-platform\";\n/** Default impersonated token lifespan in seconds.*/ const DEFAULT_TOKEN_LIFESPAN = 3600;\n/**\n * Offset to take into account network delays and server clock skews.\n */ exports.EXPIRATION_TIME_OFFSET = 5 * 60 * 1000;\n/**\n * The credentials JSON file type for external account clients.\n * There are 3 types of JSON configs:\n * 1. authorized_user => Google end user credential\n * 2. service_account => Google service account credential\n * 3. external_Account => non-GCP service (eg. AWS, Azure, K8s)\n */ exports.EXTERNAL_ACCOUNT_TYPE = \"external_account\";\n/**\n * Cloud resource manager URL used to retrieve project information.\n *\n * @deprecated use {@link BaseExternalAccountClient.cloudResourceManagerURL} instead\n **/ exports.CLOUD_RESOURCE_MANAGER = \"https://cloudresourcemanager.googleapis.com/v1/projects/\";\n/** The workforce audience pattern. */ const WORKFORCE_AUDIENCE_PATTERN = \"//iam\\\\.googleapis\\\\.com/locations/[^/]+/workforcePools/[^/]+/providers/.+\";\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst pkg = __webpack_require__(/*! ../../../package.json */ \"(action-browser)/./node_modules/google-auth-library/package.json\");\n/**\n * For backwards compatibility.\n */ var authclient_2 = __webpack_require__(/*! ./authclient */ \"(action-browser)/./node_modules/google-auth-library/build/src/auth/authclient.js\");\nObject.defineProperty(exports, \"DEFAULT_UNIVERSE\", ({\n    enumerable: true,\n    get: function() {\n        return authclient_2.DEFAULT_UNIVERSE;\n    }\n}));\n/**\n * Base external account client. This is used to instantiate AuthClients for\n * exchanging external account credentials for GCP access token and authorizing\n * requests to GCP APIs.\n * The base class implements common logic for exchanging various type of\n * external credentials for GCP access token. The logic of determining and\n * retrieving the external credential based on the environment and\n * credential_source will be left for the subclasses.\n */ class BaseExternalAccountClient extends authclient_1.AuthClient {\n    /**\n     * Instantiate a BaseExternalAccountClient instance using the provided JSON\n     * object loaded from an external account credentials file.\n     * @param options The external account options object typically loaded\n     *   from the external account JSON credential file. The camelCased options\n     *   are aliases for the snake_cased options.\n     * @param additionalOptions **DEPRECATED, all options are available in the\n     *   `options` parameter.** Optional additional behavior customization options.\n     *   These currently customize expiration threshold time and whether to retry\n     *   on 401/403 API request errors.\n     */ constructor(options, additionalOptions){\n        super({\n            ...options,\n            ...additionalOptions\n        });\n        const opts = (0, util_1.originalOrCamelOptions)(options);\n        if (opts.get(\"type\") !== exports.EXTERNAL_ACCOUNT_TYPE) {\n            throw new Error(`Expected \"${exports.EXTERNAL_ACCOUNT_TYPE}\" type but ` + `received \"${options.type}\"`);\n        }\n        const clientId = opts.get(\"client_id\");\n        const clientSecret = opts.get(\"client_secret\");\n        const tokenUrl = opts.get(\"token_url\");\n        const subjectTokenType = opts.get(\"subject_token_type\");\n        const workforcePoolUserProject = opts.get(\"workforce_pool_user_project\");\n        const serviceAccountImpersonationUrl = opts.get(\"service_account_impersonation_url\");\n        const serviceAccountImpersonation = opts.get(\"service_account_impersonation\");\n        const serviceAccountImpersonationLifetime = (0, util_1.originalOrCamelOptions)(serviceAccountImpersonation).get(\"token_lifetime_seconds\");\n        this.cloudResourceManagerURL = new URL(opts.get(\"cloud_resource_manager_url\") || `https://cloudresourcemanager.${this.universeDomain}/v1/projects/`);\n        if (clientId) {\n            this.clientAuth = {\n                confidentialClientType: \"basic\",\n                clientId,\n                clientSecret\n            };\n        }\n        this.stsCredential = new sts.StsCredentials(tokenUrl, this.clientAuth);\n        this.scopes = opts.get(\"scopes\") || [\n            DEFAULT_OAUTH_SCOPE\n        ];\n        this.cachedAccessToken = null;\n        this.audience = opts.get(\"audience\");\n        this.subjectTokenType = subjectTokenType;\n        this.workforcePoolUserProject = workforcePoolUserProject;\n        const workforceAudiencePattern = new RegExp(WORKFORCE_AUDIENCE_PATTERN);\n        if (this.workforcePoolUserProject && !this.audience.match(workforceAudiencePattern)) {\n            throw new Error(\"workforcePoolUserProject should not be set for non-workforce pool \" + \"credentials.\");\n        }\n        this.serviceAccountImpersonationUrl = serviceAccountImpersonationUrl;\n        this.serviceAccountImpersonationLifetime = serviceAccountImpersonationLifetime;\n        if (this.serviceAccountImpersonationLifetime) {\n            this.configLifetimeRequested = true;\n        } else {\n            this.configLifetimeRequested = false;\n            this.serviceAccountImpersonationLifetime = DEFAULT_TOKEN_LIFESPAN;\n        }\n        this.projectNumber = this.getProjectNumber(this.audience);\n    }\n    /** The service account email to be impersonated, if available. */ getServiceAccountEmail() {\n        var _a;\n        if (this.serviceAccountImpersonationUrl) {\n            if (this.serviceAccountImpersonationUrl.length > 256) {\n                /**\n                 * Prevents DOS attacks.\n                 * @see {@link https://github.com/googleapis/google-auth-library-nodejs/security/code-scanning/84}\n                 **/ throw new RangeError(`URL is too long: ${this.serviceAccountImpersonationUrl}`);\n            }\n            // Parse email from URL. The formal looks as follows:\n            // https://iamcredentials.googleapis.com/v1/projects/-/serviceAccounts/name@project-id.iam.gserviceaccount.com:generateAccessToken\n            const re = /serviceAccounts\\/(?<email>[^:]+):generateAccessToken$/;\n            const result = re.exec(this.serviceAccountImpersonationUrl);\n            return ((_a = result === null || result === void 0 ? void 0 : result.groups) === null || _a === void 0 ? void 0 : _a.email) || null;\n        }\n        return null;\n    }\n    /**\n     * Provides a mechanism to inject GCP access tokens directly.\n     * When the provided credential expires, a new credential, using the\n     * external account options, is retrieved.\n     * @param credentials The Credentials object to set on the current client.\n     */ setCredentials(credentials) {\n        super.setCredentials(credentials);\n        this.cachedAccessToken = credentials;\n    }\n    /**\n     * @return A promise that resolves with the current GCP access token\n     *   response. If the current credential is expired, a new one is retrieved.\n     */ async getAccessToken() {\n        // If cached access token is unavailable or expired, force refresh.\n        if (!this.cachedAccessToken || this.isExpired(this.cachedAccessToken)) {\n            await this.refreshAccessTokenAsync();\n        }\n        // Return GCP access token in GetAccessTokenResponse format.\n        return {\n            token: this.cachedAccessToken.access_token,\n            res: this.cachedAccessToken.res\n        };\n    }\n    /**\n     * The main authentication interface. It takes an optional url which when\n     * present is the endpoint being accessed, and returns a Promise which\n     * resolves with authorization header fields.\n     *\n     * The result has the form:\n     * { Authorization: 'Bearer <access_token_value>' }\n     */ async getRequestHeaders() {\n        const accessTokenResponse = await this.getAccessToken();\n        const headers = {\n            Authorization: `Bearer ${accessTokenResponse.token}`\n        };\n        return this.addSharedMetadataHeaders(headers);\n    }\n    request(opts, callback) {\n        if (callback) {\n            this.requestAsync(opts).then((r)=>callback(null, r), (e)=>{\n                return callback(e, e.response);\n            });\n        } else {\n            return this.requestAsync(opts);\n        }\n    }\n    /**\n     * @return A promise that resolves with the project ID corresponding to the\n     *   current workload identity pool or current workforce pool if\n     *   determinable. For workforce pool credential, it returns the project ID\n     *   corresponding to the workforcePoolUserProject.\n     *   This is introduced to match the current pattern of using the Auth\n     *   library:\n     *   const projectId = await auth.getProjectId();\n     *   const url = `https://dns.googleapis.com/dns/v1/projects/${projectId}`;\n     *   const res = await client.request({ url });\n     *   The resource may not have permission\n     *   (resourcemanager.projects.get) to call this API or the required\n     *   scopes may not be selected:\n     *   https://cloud.google.com/resource-manager/reference/rest/v1/projects/get#authorization-scopes\n     */ async getProjectId() {\n        const projectNumber = this.projectNumber || this.workforcePoolUserProject;\n        if (this.projectId) {\n            // Return previously determined project ID.\n            return this.projectId;\n        } else if (projectNumber) {\n            // Preferable not to use request() to avoid retrial policies.\n            const headers = await this.getRequestHeaders();\n            const response = await this.transporter.request({\n                headers,\n                url: `${this.cloudResourceManagerURL.toString()}${projectNumber}`,\n                responseType: \"json\"\n            });\n            this.projectId = response.data.projectId;\n            return this.projectId;\n        }\n        return null;\n    }\n    /**\n     * Authenticates the provided HTTP request, processes it and resolves with the\n     * returned response.\n     * @param opts The HTTP request options.\n     * @param retry Whether the current attempt is a retry after a failed attempt.\n     * @return A promise that resolves with the successful response.\n     */ async requestAsync(opts, retry = false) {\n        let response;\n        try {\n            const requestHeaders = await this.getRequestHeaders();\n            opts.headers = opts.headers || {};\n            if (requestHeaders && requestHeaders[\"x-goog-user-project\"]) {\n                opts.headers[\"x-goog-user-project\"] = requestHeaders[\"x-goog-user-project\"];\n            }\n            if (requestHeaders && requestHeaders.Authorization) {\n                opts.headers.Authorization = requestHeaders.Authorization;\n            }\n            response = await this.transporter.request(opts);\n        } catch (e) {\n            const res = e.response;\n            if (res) {\n                const statusCode = res.status;\n                // Retry the request for metadata if the following criteria are true:\n                // - We haven't already retried.  It only makes sense to retry once.\n                // - The response was a 401 or a 403\n                // - The request didn't send a readableStream\n                // - forceRefreshOnFailure is true\n                const isReadableStream = res.config.data instanceof stream.Readable;\n                const isAuthErr = statusCode === 401 || statusCode === 403;\n                if (!retry && isAuthErr && !isReadableStream && this.forceRefreshOnFailure) {\n                    await this.refreshAccessTokenAsync();\n                    return await this.requestAsync(opts, true);\n                }\n            }\n            throw e;\n        }\n        return response;\n    }\n    /**\n     * Forces token refresh, even if unexpired tokens are currently cached.\n     * External credentials are exchanged for GCP access tokens via the token\n     * exchange endpoint and other settings provided in the client options\n     * object.\n     * If the service_account_impersonation_url is provided, an additional\n     * step to exchange the external account GCP access token for a service\n     * account impersonated token is performed.\n     * @return A promise that resolves with the fresh GCP access tokens.\n     */ async refreshAccessTokenAsync() {\n        // Retrieve the external credential.\n        const subjectToken = await this.retrieveSubjectToken();\n        // Construct the STS credentials options.\n        const stsCredentialsOptions = {\n            grantType: STS_GRANT_TYPE,\n            audience: this.audience,\n            requestedTokenType: STS_REQUEST_TOKEN_TYPE,\n            subjectToken,\n            subjectTokenType: this.subjectTokenType,\n            // generateAccessToken requires the provided access token to have\n            // scopes:\n            // https://www.googleapis.com/auth/iam or\n            // https://www.googleapis.com/auth/cloud-platform\n            // The new service account access token scopes will match the user\n            // provided ones.\n            scope: this.serviceAccountImpersonationUrl ? [\n                DEFAULT_OAUTH_SCOPE\n            ] : this.getScopesArray()\n        };\n        // Exchange the external credentials for a GCP access token.\n        // Client auth is prioritized over passing the workforcePoolUserProject\n        // parameter for STS token exchange.\n        const additionalOptions = !this.clientAuth && this.workforcePoolUserProject ? {\n            userProject: this.workforcePoolUserProject\n        } : undefined;\n        const additionalHeaders = {\n            \"x-goog-api-client\": this.getMetricsHeaderValue()\n        };\n        const stsResponse = await this.stsCredential.exchangeToken(stsCredentialsOptions, additionalHeaders, additionalOptions);\n        if (this.serviceAccountImpersonationUrl) {\n            this.cachedAccessToken = await this.getImpersonatedAccessToken(stsResponse.access_token);\n        } else if (stsResponse.expires_in) {\n            // Save response in cached access token.\n            this.cachedAccessToken = {\n                access_token: stsResponse.access_token,\n                expiry_date: new Date().getTime() + stsResponse.expires_in * 1000,\n                res: stsResponse.res\n            };\n        } else {\n            // Save response in cached access token.\n            this.cachedAccessToken = {\n                access_token: stsResponse.access_token,\n                res: stsResponse.res\n            };\n        }\n        // Save credentials.\n        this.credentials = {};\n        Object.assign(this.credentials, this.cachedAccessToken);\n        delete this.credentials.res;\n        // Trigger tokens event to notify external listeners.\n        this.emit(\"tokens\", {\n            refresh_token: null,\n            expiry_date: this.cachedAccessToken.expiry_date,\n            access_token: this.cachedAccessToken.access_token,\n            token_type: \"Bearer\",\n            id_token: null\n        });\n        // Return the cached access token.\n        return this.cachedAccessToken;\n    }\n    /**\n     * Returns the workload identity pool project number if it is determinable\n     * from the audience resource name.\n     * @param audience The STS audience used to determine the project number.\n     * @return The project number associated with the workload identity pool, if\n     *   this can be determined from the STS audience field. Otherwise, null is\n     *   returned.\n     */ getProjectNumber(audience) {\n        // STS audience pattern:\n        // //iam.googleapis.com/projects/$PROJECT_NUMBER/locations/...\n        const match = audience.match(/\\/projects\\/([^/]+)/);\n        if (!match) {\n            return null;\n        }\n        return match[1];\n    }\n    /**\n     * Exchanges an external account GCP access token for a service\n     * account impersonated access token using iamcredentials\n     * GenerateAccessToken API.\n     * @param token The access token to exchange for a service account access\n     *   token.\n     * @return A promise that resolves with the service account impersonated\n     *   credentials response.\n     */ async getImpersonatedAccessToken(token) {\n        const opts = {\n            url: this.serviceAccountImpersonationUrl,\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                Authorization: `Bearer ${token}`\n            },\n            data: {\n                scope: this.getScopesArray(),\n                lifetime: this.serviceAccountImpersonationLifetime + \"s\"\n            },\n            responseType: \"json\"\n        };\n        const response = await this.transporter.request(opts);\n        const successResponse = response.data;\n        return {\n            access_token: successResponse.accessToken,\n            // Convert from ISO format to timestamp.\n            expiry_date: new Date(successResponse.expireTime).getTime(),\n            res: response\n        };\n    }\n    /**\n     * Returns whether the provided credentials are expired or not.\n     * If there is no expiry time, assumes the token is not expired or expiring.\n     * @param accessToken The credentials to check for expiration.\n     * @return Whether the credentials are expired or not.\n     */ isExpired(accessToken) {\n        const now = new Date().getTime();\n        return accessToken.expiry_date ? now >= accessToken.expiry_date - this.eagerRefreshThresholdMillis : false;\n    }\n    /**\n     * @return The list of scopes for the requested GCP access token.\n     */ getScopesArray() {\n        // Since scopes can be provided as string or array, the type should\n        // be normalized.\n        if (typeof this.scopes === \"string\") {\n            return [\n                this.scopes\n            ];\n        }\n        return this.scopes || [\n            DEFAULT_OAUTH_SCOPE\n        ];\n    }\n    getMetricsHeaderValue() {\n        const nodeVersion = process.version.replace(/^v/, \"\");\n        const saImpersonation = this.serviceAccountImpersonationUrl !== undefined;\n        const credentialSourceType = this.credentialSourceType ? this.credentialSourceType : \"unknown\";\n        return `gl-node/${nodeVersion} auth/${pkg.version} google-byoid-sdk source/${credentialSourceType} sa-impersonation/${saImpersonation} config-lifetime/${this.configLifetimeRequested}`;\n    }\n}\nexports.BaseExternalAccountClient = BaseExternalAccountClient;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/google-auth-library/build/src/auth/baseexternalclient.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/google-auth-library/build/src/auth/computeclient.js":
/*!**************************************************************************!*\
  !*** ./node_modules/google-auth-library/build/src/auth/computeclient.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright 2013 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Compute = void 0;\nconst gaxios_1 = __webpack_require__(/*! gaxios */ \"(action-browser)/./node_modules/gaxios/build/src/index.js\");\nconst gcpMetadata = __webpack_require__(/*! gcp-metadata */ \"(action-browser)/./node_modules/google-auth-library/node_modules/gcp-metadata/build/src/index.js\");\nconst oauth2client_1 = __webpack_require__(/*! ./oauth2client */ \"(action-browser)/./node_modules/google-auth-library/build/src/auth/oauth2client.js\");\nclass Compute extends oauth2client_1.OAuth2Client {\n    /**\n     * Google Compute Engine service account credentials.\n     *\n     * Retrieve access token from the metadata server.\n     * See: https://cloud.google.com/compute/docs/access/authenticate-workloads#applications\n     */ constructor(options = {}){\n        super(options);\n        // Start with an expired refresh token, which will automatically be\n        // refreshed before the first API call is made.\n        this.credentials = {\n            expiry_date: 1,\n            refresh_token: \"compute-placeholder\"\n        };\n        this.serviceAccountEmail = options.serviceAccountEmail || \"default\";\n        this.scopes = Array.isArray(options.scopes) ? options.scopes : options.scopes ? [\n            options.scopes\n        ] : [];\n    }\n    /**\n     * Refreshes the access token.\n     * @param refreshToken Unused parameter\n     */ async refreshTokenNoCache(// eslint-disable-next-line @typescript-eslint/no-unused-vars\n    refreshToken) {\n        const tokenPath = `service-accounts/${this.serviceAccountEmail}/token`;\n        let data;\n        try {\n            const instanceOptions = {\n                property: tokenPath\n            };\n            if (this.scopes.length > 0) {\n                instanceOptions.params = {\n                    scopes: this.scopes.join(\",\")\n                };\n            }\n            data = await gcpMetadata.instance(instanceOptions);\n        } catch (e) {\n            if (e instanceof gaxios_1.GaxiosError) {\n                e.message = `Could not refresh access token: ${e.message}`;\n                this.wrapError(e);\n            }\n            throw e;\n        }\n        const tokens = data;\n        if (data && data.expires_in) {\n            tokens.expiry_date = new Date().getTime() + data.expires_in * 1000;\n            delete tokens.expires_in;\n        }\n        this.emit(\"tokens\", tokens);\n        return {\n            tokens,\n            res: null\n        };\n    }\n    /**\n     * Fetches an ID token.\n     * @param targetAudience the audience for the fetched ID token.\n     */ async fetchIdToken(targetAudience) {\n        const idTokenPath = `service-accounts/${this.serviceAccountEmail}/identity` + `?format=full&audience=${targetAudience}`;\n        let idToken;\n        try {\n            const instanceOptions = {\n                property: idTokenPath\n            };\n            idToken = await gcpMetadata.instance(instanceOptions);\n        } catch (e) {\n            if (e instanceof Error) {\n                e.message = `Could not fetch ID token: ${e.message}`;\n            }\n            throw e;\n        }\n        return idToken;\n    }\n    wrapError(e) {\n        const res = e.response;\n        if (res && res.status) {\n            e.status = res.status;\n            if (res.status === 403) {\n                e.message = \"A Forbidden error was returned while attempting to retrieve an access \" + \"token for the Compute Engine built-in service account. This may be because the Compute \" + \"Engine instance does not have the correct permission scopes specified: \" + e.message;\n            } else if (res.status === 404) {\n                e.message = \"A Not Found error was returned while attempting to retrieve an access\" + \"token for the Compute Engine built-in service account. This may be because the Compute \" + \"Engine instance does not have any permission scopes specified: \" + e.message;\n            }\n        }\n    }\n}\nexports.Compute = Compute;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/google-auth-library/build/src/auth/computeclient.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/google-auth-library/build/src/auth/downscopedclient.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/google-auth-library/build/src/auth/downscopedclient.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.DownscopedClient = exports.EXPIRATION_TIME_OFFSET = exports.MAX_ACCESS_BOUNDARY_RULES_COUNT = void 0;\nconst stream = __webpack_require__(/*! stream */ \"stream\");\nconst authclient_1 = __webpack_require__(/*! ./authclient */ \"(action-browser)/./node_modules/google-auth-library/build/src/auth/authclient.js\");\nconst sts = __webpack_require__(/*! ./stscredentials */ \"(action-browser)/./node_modules/google-auth-library/build/src/auth/stscredentials.js\");\n/**\n * The required token exchange grant_type: rfc8693#section-2.1\n */ const STS_GRANT_TYPE = \"urn:ietf:params:oauth:grant-type:token-exchange\";\n/**\n * The requested token exchange requested_token_type: rfc8693#section-2.1\n */ const STS_REQUEST_TOKEN_TYPE = \"urn:ietf:params:oauth:token-type:access_token\";\n/**\n * The requested token exchange subject_token_type: rfc8693#section-2.1\n */ const STS_SUBJECT_TOKEN_TYPE = \"urn:ietf:params:oauth:token-type:access_token\";\n/**\n * The maximum number of access boundary rules a Credential Access Boundary\n * can contain.\n */ exports.MAX_ACCESS_BOUNDARY_RULES_COUNT = 10;\n/**\n * Offset to take into account network delays and server clock skews.\n */ exports.EXPIRATION_TIME_OFFSET = 5 * 60 * 1000;\n/**\n * Defines a set of Google credentials that are downscoped from an existing set\n * of Google OAuth2 credentials. This is useful to restrict the Identity and\n * Access Management (IAM) permissions that a short-lived credential can use.\n * The common pattern of usage is to have a token broker with elevated access\n * generate these downscoped credentials from higher access source credentials\n * and pass the downscoped short-lived access tokens to a token consumer via\n * some secure authenticated channel for limited access to Google Cloud Storage\n * resources.\n */ class DownscopedClient extends authclient_1.AuthClient {\n    /**\n     * Instantiates a downscoped client object using the provided source\n     * AuthClient and credential access boundary rules.\n     * To downscope permissions of a source AuthClient, a Credential Access\n     * Boundary that specifies which resources the new credential can access, as\n     * well as an upper bound on the permissions that are available on each\n     * resource, has to be defined. A downscoped client can then be instantiated\n     * using the source AuthClient and the Credential Access Boundary.\n     * @param authClient The source AuthClient to be downscoped based on the\n     *   provided Credential Access Boundary rules.\n     * @param credentialAccessBoundary The Credential Access Boundary which\n     *   contains a list of access boundary rules. Each rule contains information\n     *   on the resource that the rule applies to, the upper bound of the\n     *   permissions that are available on that resource and an optional\n     *   condition to further restrict permissions.\n     * @param additionalOptions **DEPRECATED, set this in the provided `authClient`.**\n     *   Optional additional behavior customization options.\n     * @param quotaProjectId **DEPRECATED, set this in the provided `authClient`.**\n     *   Optional quota project id for setting up in the x-goog-user-project header.\n     */ constructor(authClient, credentialAccessBoundary, additionalOptions, quotaProjectId){\n        super({\n            ...additionalOptions,\n            quotaProjectId\n        });\n        this.authClient = authClient;\n        this.credentialAccessBoundary = credentialAccessBoundary;\n        // Check 1-10 Access Boundary Rules are defined within Credential Access\n        // Boundary.\n        if (credentialAccessBoundary.accessBoundary.accessBoundaryRules.length === 0) {\n            throw new Error(\"At least one access boundary rule needs to be defined.\");\n        } else if (credentialAccessBoundary.accessBoundary.accessBoundaryRules.length > exports.MAX_ACCESS_BOUNDARY_RULES_COUNT) {\n            throw new Error(\"The provided access boundary has more than \" + `${exports.MAX_ACCESS_BOUNDARY_RULES_COUNT} access boundary rules.`);\n        }\n        // Check at least one permission should be defined in each Access Boundary\n        // Rule.\n        for (const rule of credentialAccessBoundary.accessBoundary.accessBoundaryRules){\n            if (rule.availablePermissions.length === 0) {\n                throw new Error(\"At least one permission should be defined in access boundary rules.\");\n            }\n        }\n        this.stsCredential = new sts.StsCredentials(`https://sts.${this.universeDomain}/v1/token`);\n        this.cachedDownscopedAccessToken = null;\n    }\n    /**\n     * Provides a mechanism to inject Downscoped access tokens directly.\n     * The expiry_date field is required to facilitate determination of the token\n     * expiration which would make it easier for the token consumer to handle.\n     * @param credentials The Credentials object to set on the current client.\n     */ setCredentials(credentials) {\n        if (!credentials.expiry_date) {\n            throw new Error(\"The access token expiry_date field is missing in the provided \" + \"credentials.\");\n        }\n        super.setCredentials(credentials);\n        this.cachedDownscopedAccessToken = credentials;\n    }\n    async getAccessToken() {\n        // If the cached access token is unavailable or expired, force refresh.\n        // The Downscoped access token will be returned in\n        // DownscopedAccessTokenResponse format.\n        if (!this.cachedDownscopedAccessToken || this.isExpired(this.cachedDownscopedAccessToken)) {\n            await this.refreshAccessTokenAsync();\n        }\n        // Return Downscoped access token in DownscopedAccessTokenResponse format.\n        return {\n            token: this.cachedDownscopedAccessToken.access_token,\n            expirationTime: this.cachedDownscopedAccessToken.expiry_date,\n            res: this.cachedDownscopedAccessToken.res\n        };\n    }\n    /**\n     * The main authentication interface. It takes an optional url which when\n     * present is the endpoint being accessed, and returns a Promise which\n     * resolves with authorization header fields.\n     *\n     * The result has the form:\n     * { Authorization: 'Bearer <access_token_value>' }\n     */ async getRequestHeaders() {\n        const accessTokenResponse = await this.getAccessToken();\n        const headers = {\n            Authorization: `Bearer ${accessTokenResponse.token}`\n        };\n        return this.addSharedMetadataHeaders(headers);\n    }\n    request(opts, callback) {\n        if (callback) {\n            this.requestAsync(opts).then((r)=>callback(null, r), (e)=>{\n                return callback(e, e.response);\n            });\n        } else {\n            return this.requestAsync(opts);\n        }\n    }\n    /**\n     * Authenticates the provided HTTP request, processes it and resolves with the\n     * returned response.\n     * @param opts The HTTP request options.\n     * @param retry Whether the current attempt is a retry after a failed attempt.\n     * @return A promise that resolves with the successful response.\n     */ async requestAsync(opts, retry = false) {\n        let response;\n        try {\n            const requestHeaders = await this.getRequestHeaders();\n            opts.headers = opts.headers || {};\n            if (requestHeaders && requestHeaders[\"x-goog-user-project\"]) {\n                opts.headers[\"x-goog-user-project\"] = requestHeaders[\"x-goog-user-project\"];\n            }\n            if (requestHeaders && requestHeaders.Authorization) {\n                opts.headers.Authorization = requestHeaders.Authorization;\n            }\n            response = await this.transporter.request(opts);\n        } catch (e) {\n            const res = e.response;\n            if (res) {\n                const statusCode = res.status;\n                // Retry the request for metadata if the following criteria are true:\n                // - We haven't already retried.  It only makes sense to retry once.\n                // - The response was a 401 or a 403\n                // - The request didn't send a readableStream\n                // - forceRefreshOnFailure is true\n                const isReadableStream = res.config.data instanceof stream.Readable;\n                const isAuthErr = statusCode === 401 || statusCode === 403;\n                if (!retry && isAuthErr && !isReadableStream && this.forceRefreshOnFailure) {\n                    await this.refreshAccessTokenAsync();\n                    return await this.requestAsync(opts, true);\n                }\n            }\n            throw e;\n        }\n        return response;\n    }\n    /**\n     * Forces token refresh, even if unexpired tokens are currently cached.\n     * GCP access tokens are retrieved from authclient object/source credential.\n     * Then GCP access tokens are exchanged for downscoped access tokens via the\n     * token exchange endpoint.\n     * @return A promise that resolves with the fresh downscoped access token.\n     */ async refreshAccessTokenAsync() {\n        var _a;\n        // Retrieve GCP access token from source credential.\n        const subjectToken = (await this.authClient.getAccessToken()).token;\n        // Construct the STS credentials options.\n        const stsCredentialsOptions = {\n            grantType: STS_GRANT_TYPE,\n            requestedTokenType: STS_REQUEST_TOKEN_TYPE,\n            subjectToken: subjectToken,\n            subjectTokenType: STS_SUBJECT_TOKEN_TYPE\n        };\n        // Exchange the source AuthClient access token for a Downscoped access\n        // token.\n        const stsResponse = await this.stsCredential.exchangeToken(stsCredentialsOptions, undefined, this.credentialAccessBoundary);\n        /**\n         * The STS endpoint will only return the expiration time for the downscoped\n         * access token if the original access token represents a service account.\n         * The downscoped token's expiration time will always match the source\n         * credential expiration. When no expires_in is returned, we can copy the\n         * source credential's expiration time.\n         */ const sourceCredExpireDate = ((_a = this.authClient.credentials) === null || _a === void 0 ? void 0 : _a.expiry_date) || null;\n        const expiryDate = stsResponse.expires_in ? new Date().getTime() + stsResponse.expires_in * 1000 : sourceCredExpireDate;\n        // Save response in cached access token.\n        this.cachedDownscopedAccessToken = {\n            access_token: stsResponse.access_token,\n            expiry_date: expiryDate,\n            res: stsResponse.res\n        };\n        // Save credentials.\n        this.credentials = {};\n        Object.assign(this.credentials, this.cachedDownscopedAccessToken);\n        delete this.credentials.res;\n        // Trigger tokens event to notify external listeners.\n        this.emit(\"tokens\", {\n            refresh_token: null,\n            expiry_date: this.cachedDownscopedAccessToken.expiry_date,\n            access_token: this.cachedDownscopedAccessToken.access_token,\n            token_type: \"Bearer\",\n            id_token: null\n        });\n        // Return the cached access token.\n        return this.cachedDownscopedAccessToken;\n    }\n    /**\n     * Returns whether the provided credentials are expired or not.\n     * If there is no expiry time, assumes the token is not expired or expiring.\n     * @param downscopedAccessToken The credentials to check for expiration.\n     * @return Whether the credentials are expired or not.\n     */ isExpired(downscopedAccessToken) {\n        const now = new Date().getTime();\n        return downscopedAccessToken.expiry_date ? now >= downscopedAccessToken.expiry_date - this.eagerRefreshThresholdMillis : false;\n    }\n}\nexports.DownscopedClient = DownscopedClient;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/google-auth-library/build/src/auth/downscopedclient.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/google-auth-library/build/src/auth/envDetect.js":
/*!**********************************************************************!*\
  !*** ./node_modules/google-auth-library/build/src/auth/envDetect.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright 2018 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.getEnv = exports.clear = exports.GCPEnv = void 0;\nconst gcpMetadata = __webpack_require__(/*! gcp-metadata */ \"(action-browser)/./node_modules/google-auth-library/node_modules/gcp-metadata/build/src/index.js\");\nvar GCPEnv;\n(function(GCPEnv) {\n    GCPEnv[\"APP_ENGINE\"] = \"APP_ENGINE\";\n    GCPEnv[\"KUBERNETES_ENGINE\"] = \"KUBERNETES_ENGINE\";\n    GCPEnv[\"CLOUD_FUNCTIONS\"] = \"CLOUD_FUNCTIONS\";\n    GCPEnv[\"COMPUTE_ENGINE\"] = \"COMPUTE_ENGINE\";\n    GCPEnv[\"CLOUD_RUN\"] = \"CLOUD_RUN\";\n    GCPEnv[\"NONE\"] = \"NONE\";\n})(GCPEnv || (exports.GCPEnv = GCPEnv = {}));\nlet envPromise;\nfunction clear() {\n    envPromise = undefined;\n}\nexports.clear = clear;\nasync function getEnv() {\n    if (envPromise) {\n        return envPromise;\n    }\n    envPromise = getEnvMemoized();\n    return envPromise;\n}\nexports.getEnv = getEnv;\nasync function getEnvMemoized() {\n    let env = GCPEnv.NONE;\n    if (isAppEngine()) {\n        env = GCPEnv.APP_ENGINE;\n    } else if (isCloudFunction()) {\n        env = GCPEnv.CLOUD_FUNCTIONS;\n    } else if (await isComputeEngine()) {\n        if (await isKubernetesEngine()) {\n            env = GCPEnv.KUBERNETES_ENGINE;\n        } else if (isCloudRun()) {\n            env = GCPEnv.CLOUD_RUN;\n        } else {\n            env = GCPEnv.COMPUTE_ENGINE;\n        }\n    } else {\n        env = GCPEnv.NONE;\n    }\n    return env;\n}\nfunction isAppEngine() {\n    return !!(process.env.GAE_SERVICE || process.env.GAE_MODULE_NAME);\n}\nfunction isCloudFunction() {\n    return !!(process.env.FUNCTION_NAME || process.env.FUNCTION_TARGET);\n}\n/**\n * This check only verifies that the environment is running knative.\n * This must be run *after* checking for Kubernetes, otherwise it will\n * return a false positive.\n */ function isCloudRun() {\n    return !!process.env.K_CONFIGURATION;\n}\nasync function isKubernetesEngine() {\n    try {\n        await gcpMetadata.instance(\"attributes/cluster-name\");\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\nasync function isComputeEngine() {\n    return gcpMetadata.isAvailable();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9nb29nbGUtYXV0aC1saWJyYXJ5L2J1aWxkL3NyYy9hdXRoL2VudkRldGVjdC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDRCQUE0QjtBQUM1QixFQUFFO0FBQ0Ysa0VBQWtFO0FBQ2xFLG1FQUFtRTtBQUNuRSwwQ0FBMEM7QUFDMUMsRUFBRTtBQUNGLGtEQUFrRDtBQUNsRCxFQUFFO0FBQ0Ysc0VBQXNFO0FBQ3RFLG9FQUFvRTtBQUNwRSwyRUFBMkU7QUFDM0Usc0VBQXNFO0FBQ3RFLGlDQUFpQztBQUNqQ0EsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELGNBQWMsR0FBR0EsYUFBYSxHQUFHQSxjQUFjLEdBQUcsS0FBSztBQUN2RCxNQUFNSyxjQUFjQyxtQkFBT0EsQ0FBQyxzSEFBYztBQUMxQyxJQUFJRjtBQUNILFVBQVVBLE1BQU07SUFDYkEsTUFBTSxDQUFDLGFBQWEsR0FBRztJQUN2QkEsTUFBTSxDQUFDLG9CQUFvQixHQUFHO0lBQzlCQSxNQUFNLENBQUMsa0JBQWtCLEdBQUc7SUFDNUJBLE1BQU0sQ0FBQyxpQkFBaUIsR0FBRztJQUMzQkEsTUFBTSxDQUFDLFlBQVksR0FBRztJQUN0QkEsTUFBTSxDQUFDLE9BQU8sR0FBRztBQUNyQixHQUFHQSxVQUFXSixDQUFBQSxjQUFjLEdBQUdJLFNBQVMsQ0FBQztBQUN6QyxJQUFJRztBQUNKLFNBQVNKO0lBQ0xJLGFBQWFDO0FBQ2pCO0FBQ0FSLGFBQWEsR0FBR0c7QUFDaEIsZUFBZUQ7SUFDWCxJQUFJSyxZQUFZO1FBQ1osT0FBT0E7SUFDWDtJQUNBQSxhQUFhRTtJQUNiLE9BQU9GO0FBQ1g7QUFDQVAsY0FBYyxHQUFHRTtBQUNqQixlQUFlTztJQUNYLElBQUlDLE1BQU1OLE9BQU9PLElBQUk7SUFDckIsSUFBSUMsZUFBZTtRQUNmRixNQUFNTixPQUFPUyxVQUFVO0lBQzNCLE9BQ0ssSUFBSUMsbUJBQW1CO1FBQ3hCSixNQUFNTixPQUFPVyxlQUFlO0lBQ2hDLE9BQ0ssSUFBSSxNQUFNQyxtQkFBbUI7UUFDOUIsSUFBSSxNQUFNQyxzQkFBc0I7WUFDNUJQLE1BQU1OLE9BQU9jLGlCQUFpQjtRQUNsQyxPQUNLLElBQUlDLGNBQWM7WUFDbkJULE1BQU1OLE9BQU9nQixTQUFTO1FBQzFCLE9BQ0s7WUFDRFYsTUFBTU4sT0FBT2lCLGNBQWM7UUFDL0I7SUFDSixPQUNLO1FBQ0RYLE1BQU1OLE9BQU9PLElBQUk7SUFDckI7SUFDQSxPQUFPRDtBQUNYO0FBQ0EsU0FBU0U7SUFDTCxPQUFPLENBQUMsQ0FBRVUsQ0FBQUEsUUFBUVosR0FBRyxDQUFDYSxXQUFXLElBQUlELFFBQVFaLEdBQUcsQ0FBQ2MsZUFBZTtBQUNwRTtBQUNBLFNBQVNWO0lBQ0wsT0FBTyxDQUFDLENBQUVRLENBQUFBLFFBQVFaLEdBQUcsQ0FBQ2UsYUFBYSxJQUFJSCxRQUFRWixHQUFHLENBQUNnQixlQUFlO0FBQ3RFO0FBQ0E7Ozs7Q0FJQyxHQUNELFNBQVNQO0lBQ0wsT0FBTyxDQUFDLENBQUNHLFFBQVFaLEdBQUcsQ0FBQ2lCLGVBQWU7QUFDeEM7QUFDQSxlQUFlVjtJQUNYLElBQUk7UUFDQSxNQUFNWixZQUFZdUIsUUFBUSxDQUFDO1FBQzNCLE9BQU87SUFDWCxFQUNBLE9BQU9DLEdBQUc7UUFDTixPQUFPO0lBQ1g7QUFDSjtBQUNBLGVBQWViO0lBQ1gsT0FBT1gsWUFBWXlCLFdBQVc7QUFDbEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zcG90aWZ5LXRvLXlvdXR1YmUvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWF1dGgtbGlicmFyeS9idWlsZC9zcmMvYXV0aC9lbnZEZXRlY3QuanM/Y2UzMyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCAyMDE4IEdvb2dsZSBMTENcbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5nZXRFbnYgPSBleHBvcnRzLmNsZWFyID0gZXhwb3J0cy5HQ1BFbnYgPSB2b2lkIDA7XG5jb25zdCBnY3BNZXRhZGF0YSA9IHJlcXVpcmUoXCJnY3AtbWV0YWRhdGFcIik7XG52YXIgR0NQRW52O1xuKGZ1bmN0aW9uIChHQ1BFbnYpIHtcbiAgICBHQ1BFbnZbXCJBUFBfRU5HSU5FXCJdID0gXCJBUFBfRU5HSU5FXCI7XG4gICAgR0NQRW52W1wiS1VCRVJORVRFU19FTkdJTkVcIl0gPSBcIktVQkVSTkVURVNfRU5HSU5FXCI7XG4gICAgR0NQRW52W1wiQ0xPVURfRlVOQ1RJT05TXCJdID0gXCJDTE9VRF9GVU5DVElPTlNcIjtcbiAgICBHQ1BFbnZbXCJDT01QVVRFX0VOR0lORVwiXSA9IFwiQ09NUFVURV9FTkdJTkVcIjtcbiAgICBHQ1BFbnZbXCJDTE9VRF9SVU5cIl0gPSBcIkNMT1VEX1JVTlwiO1xuICAgIEdDUEVudltcIk5PTkVcIl0gPSBcIk5PTkVcIjtcbn0pKEdDUEVudiB8fCAoZXhwb3J0cy5HQ1BFbnYgPSBHQ1BFbnYgPSB7fSkpO1xubGV0IGVudlByb21pc2U7XG5mdW5jdGlvbiBjbGVhcigpIHtcbiAgICBlbnZQcm9taXNlID0gdW5kZWZpbmVkO1xufVxuZXhwb3J0cy5jbGVhciA9IGNsZWFyO1xuYXN5bmMgZnVuY3Rpb24gZ2V0RW52KCkge1xuICAgIGlmIChlbnZQcm9taXNlKSB7XG4gICAgICAgIHJldHVybiBlbnZQcm9taXNlO1xuICAgIH1cbiAgICBlbnZQcm9taXNlID0gZ2V0RW52TWVtb2l6ZWQoKTtcbiAgICByZXR1cm4gZW52UHJvbWlzZTtcbn1cbmV4cG9ydHMuZ2V0RW52ID0gZ2V0RW52O1xuYXN5bmMgZnVuY3Rpb24gZ2V0RW52TWVtb2l6ZWQoKSB7XG4gICAgbGV0IGVudiA9IEdDUEVudi5OT05FO1xuICAgIGlmIChpc0FwcEVuZ2luZSgpKSB7XG4gICAgICAgIGVudiA9IEdDUEVudi5BUFBfRU5HSU5FO1xuICAgIH1cbiAgICBlbHNlIGlmIChpc0Nsb3VkRnVuY3Rpb24oKSkge1xuICAgICAgICBlbnYgPSBHQ1BFbnYuQ0xPVURfRlVOQ1RJT05TO1xuICAgIH1cbiAgICBlbHNlIGlmIChhd2FpdCBpc0NvbXB1dGVFbmdpbmUoKSkge1xuICAgICAgICBpZiAoYXdhaXQgaXNLdWJlcm5ldGVzRW5naW5lKCkpIHtcbiAgICAgICAgICAgIGVudiA9IEdDUEVudi5LVUJFUk5FVEVTX0VOR0lORTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpc0Nsb3VkUnVuKCkpIHtcbiAgICAgICAgICAgIGVudiA9IEdDUEVudi5DTE9VRF9SVU47XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBlbnYgPSBHQ1BFbnYuQ09NUFVURV9FTkdJTkU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGVudiA9IEdDUEVudi5OT05FO1xuICAgIH1cbiAgICByZXR1cm4gZW52O1xufVxuZnVuY3Rpb24gaXNBcHBFbmdpbmUoKSB7XG4gICAgcmV0dXJuICEhKHByb2Nlc3MuZW52LkdBRV9TRVJWSUNFIHx8IHByb2Nlc3MuZW52LkdBRV9NT0RVTEVfTkFNRSk7XG59XG5mdW5jdGlvbiBpc0Nsb3VkRnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuICEhKHByb2Nlc3MuZW52LkZVTkNUSU9OX05BTUUgfHwgcHJvY2Vzcy5lbnYuRlVOQ1RJT05fVEFSR0VUKTtcbn1cbi8qKlxuICogVGhpcyBjaGVjayBvbmx5IHZlcmlmaWVzIHRoYXQgdGhlIGVudmlyb25tZW50IGlzIHJ1bm5pbmcga25hdGl2ZS5cbiAqIFRoaXMgbXVzdCBiZSBydW4gKmFmdGVyKiBjaGVja2luZyBmb3IgS3ViZXJuZXRlcywgb3RoZXJ3aXNlIGl0IHdpbGxcbiAqIHJldHVybiBhIGZhbHNlIHBvc2l0aXZlLlxuICovXG5mdW5jdGlvbiBpc0Nsb3VkUnVuKCkge1xuICAgIHJldHVybiAhIXByb2Nlc3MuZW52LktfQ09ORklHVVJBVElPTjtcbn1cbmFzeW5jIGZ1bmN0aW9uIGlzS3ViZXJuZXRlc0VuZ2luZSgpIHtcbiAgICB0cnkge1xuICAgICAgICBhd2FpdCBnY3BNZXRhZGF0YS5pbnN0YW5jZSgnYXR0cmlidXRlcy9jbHVzdGVyLW5hbWUnKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59XG5hc3luYyBmdW5jdGlvbiBpc0NvbXB1dGVFbmdpbmUoKSB7XG4gICAgcmV0dXJuIGdjcE1ldGFkYXRhLmlzQXZhaWxhYmxlKCk7XG59XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJnZXRFbnYiLCJjbGVhciIsIkdDUEVudiIsImdjcE1ldGFkYXRhIiwicmVxdWlyZSIsImVudlByb21pc2UiLCJ1bmRlZmluZWQiLCJnZXRFbnZNZW1vaXplZCIsImVudiIsIk5PTkUiLCJpc0FwcEVuZ2luZSIsIkFQUF9FTkdJTkUiLCJpc0Nsb3VkRnVuY3Rpb24iLCJDTE9VRF9GVU5DVElPTlMiLCJpc0NvbXB1dGVFbmdpbmUiLCJpc0t1YmVybmV0ZXNFbmdpbmUiLCJLVUJFUk5FVEVTX0VOR0lORSIsImlzQ2xvdWRSdW4iLCJDTE9VRF9SVU4iLCJDT01QVVRFX0VOR0lORSIsInByb2Nlc3MiLCJHQUVfU0VSVklDRSIsIkdBRV9NT0RVTEVfTkFNRSIsIkZVTkNUSU9OX05BTUUiLCJGVU5DVElPTl9UQVJHRVQiLCJLX0NPTkZJR1VSQVRJT04iLCJpbnN0YW5jZSIsImUiLCJpc0F2YWlsYWJsZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/google-auth-library/build/src/auth/envDetect.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/google-auth-library/build/src/auth/executable-response.js":
/*!********************************************************************************!*\
  !*** ./node_modules/google-auth-library/build/src/auth/executable-response.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n// Copyright 2022 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.InvalidSubjectTokenError = exports.InvalidMessageFieldError = exports.InvalidCodeFieldError = exports.InvalidTokenTypeFieldError = exports.InvalidExpirationTimeFieldError = exports.InvalidSuccessFieldError = exports.InvalidVersionFieldError = exports.ExecutableResponseError = exports.ExecutableResponse = void 0;\nconst SAML_SUBJECT_TOKEN_TYPE = \"urn:ietf:params:oauth:token-type:saml2\";\nconst OIDC_SUBJECT_TOKEN_TYPE1 = \"urn:ietf:params:oauth:token-type:id_token\";\nconst OIDC_SUBJECT_TOKEN_TYPE2 = \"urn:ietf:params:oauth:token-type:jwt\";\n/**\n * Defines the response of a 3rd party executable run by the pluggable auth client.\n */ class ExecutableResponse {\n    /**\n     * Instantiates an ExecutableResponse instance using the provided JSON object\n     * from the output of the executable.\n     * @param responseJson Response from a 3rd party executable, loaded from a\n     * run of the executable or a cached output file.\n     */ constructor(responseJson){\n        // Check that the required fields exist in the json response.\n        if (!responseJson.version) {\n            throw new InvalidVersionFieldError(\"Executable response must contain a 'version' field.\");\n        }\n        if (responseJson.success === undefined) {\n            throw new InvalidSuccessFieldError(\"Executable response must contain a 'success' field.\");\n        }\n        this.version = responseJson.version;\n        this.success = responseJson.success;\n        // Validate required fields for a successful response.\n        if (this.success) {\n            this.expirationTime = responseJson.expiration_time;\n            this.tokenType = responseJson.token_type;\n            // Validate token type field.\n            if (this.tokenType !== SAML_SUBJECT_TOKEN_TYPE && this.tokenType !== OIDC_SUBJECT_TOKEN_TYPE1 && this.tokenType !== OIDC_SUBJECT_TOKEN_TYPE2) {\n                throw new InvalidTokenTypeFieldError(\"Executable response must contain a 'token_type' field when successful \" + `and it must be one of ${OIDC_SUBJECT_TOKEN_TYPE1}, ${OIDC_SUBJECT_TOKEN_TYPE2}, or ${SAML_SUBJECT_TOKEN_TYPE}.`);\n            }\n            // Validate subject token.\n            if (this.tokenType === SAML_SUBJECT_TOKEN_TYPE) {\n                if (!responseJson.saml_response) {\n                    throw new InvalidSubjectTokenError(`Executable response must contain a 'saml_response' field when token_type=${SAML_SUBJECT_TOKEN_TYPE}.`);\n                }\n                this.subjectToken = responseJson.saml_response;\n            } else {\n                if (!responseJson.id_token) {\n                    throw new InvalidSubjectTokenError(\"Executable response must contain a 'id_token' field when \" + `token_type=${OIDC_SUBJECT_TOKEN_TYPE1} or ${OIDC_SUBJECT_TOKEN_TYPE2}.`);\n                }\n                this.subjectToken = responseJson.id_token;\n            }\n        } else {\n            // Both code and message must be provided for unsuccessful responses.\n            if (!responseJson.code) {\n                throw new InvalidCodeFieldError(\"Executable response must contain a 'code' field when unsuccessful.\");\n            }\n            if (!responseJson.message) {\n                throw new InvalidMessageFieldError(\"Executable response must contain a 'message' field when unsuccessful.\");\n            }\n            this.errorCode = responseJson.code;\n            this.errorMessage = responseJson.message;\n        }\n    }\n    /**\n     * @return A boolean representing if the response has a valid token. Returns\n     * true when the response was successful and the token is not expired.\n     */ isValid() {\n        return !this.isExpired() && this.success;\n    }\n    /**\n     * @return A boolean representing if the response is expired. Returns true if the\n     * provided timeout has passed.\n     */ isExpired() {\n        return this.expirationTime !== undefined && this.expirationTime < Math.round(Date.now() / 1000);\n    }\n}\nexports.ExecutableResponse = ExecutableResponse;\n/**\n * An error thrown by the ExecutableResponse class.\n */ class ExecutableResponseError extends Error {\n    constructor(message){\n        super(message);\n        Object.setPrototypeOf(this, new.target.prototype);\n    }\n}\nexports.ExecutableResponseError = ExecutableResponseError;\n/**\n * An error thrown when the 'version' field in an executable response is missing or invalid.\n */ class InvalidVersionFieldError extends ExecutableResponseError {\n}\nexports.InvalidVersionFieldError = InvalidVersionFieldError;\n/**\n * An error thrown when the 'success' field in an executable response is missing or invalid.\n */ class InvalidSuccessFieldError extends ExecutableResponseError {\n}\nexports.InvalidSuccessFieldError = InvalidSuccessFieldError;\n/**\n * An error thrown when the 'expiration_time' field in an executable response is missing or invalid.\n */ class InvalidExpirationTimeFieldError extends ExecutableResponseError {\n}\nexports.InvalidExpirationTimeFieldError = InvalidExpirationTimeFieldError;\n/**\n * An error thrown when the 'token_type' field in an executable response is missing or invalid.\n */ class InvalidTokenTypeFieldError extends ExecutableResponseError {\n}\nexports.InvalidTokenTypeFieldError = InvalidTokenTypeFieldError;\n/**\n * An error thrown when the 'code' field in an executable response is missing or invalid.\n */ class InvalidCodeFieldError extends ExecutableResponseError {\n}\nexports.InvalidCodeFieldError = InvalidCodeFieldError;\n/**\n * An error thrown when the 'message' field in an executable response is missing or invalid.\n */ class InvalidMessageFieldError extends ExecutableResponseError {\n}\nexports.InvalidMessageFieldError = InvalidMessageFieldError;\n/**\n * An error thrown when the subject token in an executable response is missing or invalid.\n */ class InvalidSubjectTokenError extends ExecutableResponseError {\n}\nexports.InvalidSubjectTokenError = InvalidSubjectTokenError;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/google-auth-library/build/src/auth/executable-response.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/google-auth-library/build/src/auth/externalAccountAuthorizedUserClient.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/google-auth-library/build/src/auth/externalAccountAuthorizedUserClient.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright 2023 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ExternalAccountAuthorizedUserClient = exports.EXTERNAL_ACCOUNT_AUTHORIZED_USER_TYPE = void 0;\nconst authclient_1 = __webpack_require__(/*! ./authclient */ \"(action-browser)/./node_modules/google-auth-library/build/src/auth/authclient.js\");\nconst oauth2common_1 = __webpack_require__(/*! ./oauth2common */ \"(action-browser)/./node_modules/google-auth-library/build/src/auth/oauth2common.js\");\nconst gaxios_1 = __webpack_require__(/*! gaxios */ \"(action-browser)/./node_modules/gaxios/build/src/index.js\");\nconst stream = __webpack_require__(/*! stream */ \"stream\");\nconst baseexternalclient_1 = __webpack_require__(/*! ./baseexternalclient */ \"(action-browser)/./node_modules/google-auth-library/build/src/auth/baseexternalclient.js\");\n/**\n * The credentials JSON file type for external account authorized user clients.\n */ exports.EXTERNAL_ACCOUNT_AUTHORIZED_USER_TYPE = \"external_account_authorized_user\";\n/**\n * Handler for token refresh requests sent to the token_url endpoint for external\n * authorized user credentials.\n */ class ExternalAccountAuthorizedUserHandler extends oauth2common_1.OAuthClientAuthHandler {\n    /**\n     * Initializes an ExternalAccountAuthorizedUserHandler instance.\n     * @param url The URL of the token refresh endpoint.\n     * @param transporter The transporter to use for the refresh request.\n     * @param clientAuthentication The client authentication credentials to use\n     *   for the refresh request.\n     */ constructor(url, transporter, clientAuthentication){\n        super(clientAuthentication);\n        this.url = url;\n        this.transporter = transporter;\n    }\n    /**\n     * Requests a new access token from the token_url endpoint using the provided\n     *   refresh token.\n     * @param refreshToken The refresh token to use to generate a new access token.\n     * @param additionalHeaders Optional additional headers to pass along the\n     *   request.\n     * @return A promise that resolves with the token refresh response containing\n     *   the requested access token and its expiration time.\n     */ async refreshToken(refreshToken, additionalHeaders) {\n        const values = new URLSearchParams({\n            grant_type: \"refresh_token\",\n            refresh_token: refreshToken\n        });\n        const headers = {\n            \"Content-Type\": \"application/x-www-form-urlencoded\",\n            ...additionalHeaders\n        };\n        const opts = {\n            url: this.url,\n            method: \"POST\",\n            headers,\n            data: values.toString(),\n            responseType: \"json\"\n        };\n        // Apply OAuth client authentication.\n        this.applyClientAuthenticationOptions(opts);\n        try {\n            const response = await this.transporter.request(opts);\n            // Successful response.\n            const tokenRefreshResponse = response.data;\n            tokenRefreshResponse.res = response;\n            return tokenRefreshResponse;\n        } catch (error) {\n            // Translate error to OAuthError.\n            if (error instanceof gaxios_1.GaxiosError && error.response) {\n                throw (0, oauth2common_1.getErrorFromOAuthErrorResponse)(error.response.data, // Preserve other fields from the original error.\n                error);\n            }\n            // Request could fail before the server responds.\n            throw error;\n        }\n    }\n}\n/**\n * External Account Authorized User Client. This is used for OAuth2 credentials\n * sourced using external identities through Workforce Identity Federation.\n * Obtaining the initial access and refresh token can be done through the\n * Google Cloud CLI.\n */ class ExternalAccountAuthorizedUserClient extends authclient_1.AuthClient {\n    /**\n     * Instantiates an ExternalAccountAuthorizedUserClient instances using the\n     * provided JSON object loaded from a credentials files.\n     * An error is throws if the credential is not valid.\n     * @param options The external account authorized user option object typically\n     *   from the external accoutn authorized user JSON credential file.\n     * @param additionalOptions **DEPRECATED, all options are available in the\n     *   `options` parameter.** Optional additional behavior customization options.\n     *   These currently customize expiration threshold time and whether to retry\n     *   on 401/403 API request errors.\n     */ constructor(options, additionalOptions){\n        super({\n            ...options,\n            ...additionalOptions\n        });\n        this.refreshToken = options.refresh_token;\n        const clientAuth = {\n            confidentialClientType: \"basic\",\n            clientId: options.client_id,\n            clientSecret: options.client_secret\n        };\n        this.externalAccountAuthorizedUserHandler = new ExternalAccountAuthorizedUserHandler(options.token_url, this.transporter, clientAuth);\n        this.cachedAccessToken = null;\n        this.quotaProjectId = options.quota_project_id;\n        // As threshold could be zero,\n        // eagerRefreshThresholdMillis || EXPIRATION_TIME_OFFSET will override the\n        // zero value.\n        if (typeof (additionalOptions === null || additionalOptions === void 0 ? void 0 : additionalOptions.eagerRefreshThresholdMillis) !== \"number\") {\n            this.eagerRefreshThresholdMillis = baseexternalclient_1.EXPIRATION_TIME_OFFSET;\n        } else {\n            this.eagerRefreshThresholdMillis = additionalOptions.eagerRefreshThresholdMillis;\n        }\n        this.forceRefreshOnFailure = !!(additionalOptions === null || additionalOptions === void 0 ? void 0 : additionalOptions.forceRefreshOnFailure);\n        if (options.universe_domain) {\n            this.universeDomain = options.universe_domain;\n        }\n    }\n    async getAccessToken() {\n        // If cached access token is unavailable or expired, force refresh.\n        if (!this.cachedAccessToken || this.isExpired(this.cachedAccessToken)) {\n            await this.refreshAccessTokenAsync();\n        }\n        // Return GCP access token in GetAccessTokenResponse format.\n        return {\n            token: this.cachedAccessToken.access_token,\n            res: this.cachedAccessToken.res\n        };\n    }\n    async getRequestHeaders() {\n        const accessTokenResponse = await this.getAccessToken();\n        const headers = {\n            Authorization: `Bearer ${accessTokenResponse.token}`\n        };\n        return this.addSharedMetadataHeaders(headers);\n    }\n    request(opts, callback) {\n        if (callback) {\n            this.requestAsync(opts).then((r)=>callback(null, r), (e)=>{\n                return callback(e, e.response);\n            });\n        } else {\n            return this.requestAsync(opts);\n        }\n    }\n    /**\n     * Authenticates the provided HTTP request, processes it and resolves with the\n     * returned response.\n     * @param opts The HTTP request options.\n     * @param retry Whether the current attempt is a retry after a failed attempt.\n     * @return A promise that resolves with the successful response.\n     */ async requestAsync(opts, retry = false) {\n        let response;\n        try {\n            const requestHeaders = await this.getRequestHeaders();\n            opts.headers = opts.headers || {};\n            if (requestHeaders && requestHeaders[\"x-goog-user-project\"]) {\n                opts.headers[\"x-goog-user-project\"] = requestHeaders[\"x-goog-user-project\"];\n            }\n            if (requestHeaders && requestHeaders.Authorization) {\n                opts.headers.Authorization = requestHeaders.Authorization;\n            }\n            response = await this.transporter.request(opts);\n        } catch (e) {\n            const res = e.response;\n            if (res) {\n                const statusCode = res.status;\n                // Retry the request for metadata if the following criteria are true:\n                // - We haven't already retried.  It only makes sense to retry once.\n                // - The response was a 401 or a 403\n                // - The request didn't send a readableStream\n                // - forceRefreshOnFailure is true\n                const isReadableStream = res.config.data instanceof stream.Readable;\n                const isAuthErr = statusCode === 401 || statusCode === 403;\n                if (!retry && isAuthErr && !isReadableStream && this.forceRefreshOnFailure) {\n                    await this.refreshAccessTokenAsync();\n                    return await this.requestAsync(opts, true);\n                }\n            }\n            throw e;\n        }\n        return response;\n    }\n    /**\n     * Forces token refresh, even if unexpired tokens are currently cached.\n     * @return A promise that resolves with the refreshed credential.\n     */ async refreshAccessTokenAsync() {\n        // Refresh the access token using the refresh token.\n        const refreshResponse = await this.externalAccountAuthorizedUserHandler.refreshToken(this.refreshToken);\n        this.cachedAccessToken = {\n            access_token: refreshResponse.access_token,\n            expiry_date: new Date().getTime() + refreshResponse.expires_in * 1000,\n            res: refreshResponse.res\n        };\n        if (refreshResponse.refresh_token !== undefined) {\n            this.refreshToken = refreshResponse.refresh_token;\n        }\n        return this.cachedAccessToken;\n    }\n    /**\n     * Returns whether the provided credentials are expired or not.\n     * If there is no expiry time, assumes the token is not expired or expiring.\n     * @param credentials The credentials to check for expiration.\n     * @return Whether the credentials are expired or not.\n     */ isExpired(credentials) {\n        const now = new Date().getTime();\n        return credentials.expiry_date ? now >= credentials.expiry_date - this.eagerRefreshThresholdMillis : false;\n    }\n}\nexports.ExternalAccountAuthorizedUserClient = ExternalAccountAuthorizedUserClient;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/google-auth-library/build/src/auth/externalAccountAuthorizedUserClient.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/google-auth-library/build/src/auth/externalclient.js":
/*!***************************************************************************!*\
  !*** ./node_modules/google-auth-library/build/src/auth/externalclient.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ExternalAccountClient = void 0;\nconst baseexternalclient_1 = __webpack_require__(/*! ./baseexternalclient */ \"(action-browser)/./node_modules/google-auth-library/build/src/auth/baseexternalclient.js\");\nconst identitypoolclient_1 = __webpack_require__(/*! ./identitypoolclient */ \"(action-browser)/./node_modules/google-auth-library/build/src/auth/identitypoolclient.js\");\nconst awsclient_1 = __webpack_require__(/*! ./awsclient */ \"(action-browser)/./node_modules/google-auth-library/build/src/auth/awsclient.js\");\nconst pluggable_auth_client_1 = __webpack_require__(/*! ./pluggable-auth-client */ \"(action-browser)/./node_modules/google-auth-library/build/src/auth/pluggable-auth-client.js\");\n/**\n * Dummy class with no constructor. Developers are expected to use fromJSON.\n */ class ExternalAccountClient {\n    constructor(){\n        throw new Error(\"ExternalAccountClients should be initialized via: \" + \"ExternalAccountClient.fromJSON(), \" + \"directly via explicit constructors, eg. \" + \"new AwsClient(options), new IdentityPoolClient(options), new\" + \"PluggableAuthClientOptions, or via \" + \"new GoogleAuth(options).getClient()\");\n    }\n    /**\n     * This static method will instantiate the\n     * corresponding type of external account credential depending on the\n     * underlying credential source.\n     * @param options The external account options object typically loaded\n     *   from the external account JSON credential file.\n     * @param additionalOptions **DEPRECATED, all options are available in the\n     *   `options` parameter.** Optional additional behavior customization options.\n     *   These currently customize expiration threshold time and whether to retry\n     *   on 401/403 API request errors.\n     * @return A BaseExternalAccountClient instance or null if the options\n     *   provided do not correspond to an external account credential.\n     */ static fromJSON(options, additionalOptions) {\n        var _a, _b;\n        if (options && options.type === baseexternalclient_1.EXTERNAL_ACCOUNT_TYPE) {\n            if ((_a = options.credential_source) === null || _a === void 0 ? void 0 : _a.environment_id) {\n                return new awsclient_1.AwsClient(options, additionalOptions);\n            } else if ((_b = options.credential_source) === null || _b === void 0 ? void 0 : _b.executable) {\n                return new pluggable_auth_client_1.PluggableAuthClient(options, additionalOptions);\n            } else {\n                return new identitypoolclient_1.IdentityPoolClient(options, additionalOptions);\n            }\n        } else {\n            return null;\n        }\n    }\n}\nexports.ExternalAccountClient = ExternalAccountClient;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9nb29nbGUtYXV0aC1saWJyYXJ5L2J1aWxkL3NyYy9hdXRoL2V4dGVybmFsY2xpZW50LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsNEJBQTRCO0FBQzVCLEVBQUU7QUFDRixrRUFBa0U7QUFDbEUsbUVBQW1FO0FBQ25FLDBDQUEwQztBQUMxQyxFQUFFO0FBQ0Ysa0RBQWtEO0FBQ2xELEVBQUU7QUFDRixzRUFBc0U7QUFDdEUsb0VBQW9FO0FBQ3BFLDJFQUEyRTtBQUMzRSxzRUFBc0U7QUFDdEUsaUNBQWlDO0FBQ2pDQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsNkJBQTZCLEdBQUcsS0FBSztBQUNyQyxNQUFNRyx1QkFBdUJDLG1CQUFPQSxDQUFDLHNIQUFzQjtBQUMzRCxNQUFNQyx1QkFBdUJELG1CQUFPQSxDQUFDLHNIQUFzQjtBQUMzRCxNQUFNRSxjQUFjRixtQkFBT0EsQ0FBQyxvR0FBYTtBQUN6QyxNQUFNRywwQkFBMEJILG1CQUFPQSxDQUFDLDRIQUF5QjtBQUNqRTs7Q0FFQyxHQUNELE1BQU1GO0lBQ0ZNLGFBQWM7UUFDVixNQUFNLElBQUlDLE1BQU0sdURBQ1osdUNBQ0EsNkNBQ0EsaUVBQ0Esd0NBQ0E7SUFDUjtJQUNBOzs7Ozs7Ozs7Ozs7S0FZQyxHQUNELE9BQU9DLFNBQVNDLE9BQU8sRUFBRUMsaUJBQWlCLEVBQUU7UUFDeEMsSUFBSUMsSUFBSUM7UUFDUixJQUFJSCxXQUFXQSxRQUFRSSxJQUFJLEtBQUtaLHFCQUFxQmEscUJBQXFCLEVBQUU7WUFDeEUsSUFBSSxDQUFDSCxLQUFLRixRQUFRTSxpQkFBaUIsTUFBTSxRQUFRSixPQUFPLEtBQUssSUFBSSxLQUFLLElBQUlBLEdBQUdLLGNBQWMsRUFBRTtnQkFDekYsT0FBTyxJQUFJWixZQUFZYSxTQUFTLENBQUNSLFNBQVNDO1lBQzlDLE9BQ0ssSUFBSSxDQUFDRSxLQUFLSCxRQUFRTSxpQkFBaUIsTUFBTSxRQUFRSCxPQUFPLEtBQUssSUFBSSxLQUFLLElBQUlBLEdBQUdNLFVBQVUsRUFBRTtnQkFDMUYsT0FBTyxJQUFJYix3QkFBd0JjLG1CQUFtQixDQUFDVixTQUFTQztZQUNwRSxPQUNLO2dCQUNELE9BQU8sSUFBSVAscUJBQXFCaUIsa0JBQWtCLENBQUNYLFNBQVNDO1lBQ2hFO1FBQ0osT0FDSztZQUNELE9BQU87UUFDWDtJQUNKO0FBQ0o7QUFDQVosNkJBQTZCLEdBQUdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3BvdGlmeS10by15b3V0dWJlLy4vbm9kZV9tb2R1bGVzL2dvb2dsZS1hdXRoLWxpYnJhcnkvYnVpbGQvc3JjL2F1dGgvZXh0ZXJuYWxjbGllbnQuanM/OWM5ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCAyMDIxIEdvb2dsZSBMTENcbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5FeHRlcm5hbEFjY291bnRDbGllbnQgPSB2b2lkIDA7XG5jb25zdCBiYXNlZXh0ZXJuYWxjbGllbnRfMSA9IHJlcXVpcmUoXCIuL2Jhc2VleHRlcm5hbGNsaWVudFwiKTtcbmNvbnN0IGlkZW50aXR5cG9vbGNsaWVudF8xID0gcmVxdWlyZShcIi4vaWRlbnRpdHlwb29sY2xpZW50XCIpO1xuY29uc3QgYXdzY2xpZW50XzEgPSByZXF1aXJlKFwiLi9hd3NjbGllbnRcIik7XG5jb25zdCBwbHVnZ2FibGVfYXV0aF9jbGllbnRfMSA9IHJlcXVpcmUoXCIuL3BsdWdnYWJsZS1hdXRoLWNsaWVudFwiKTtcbi8qKlxuICogRHVtbXkgY2xhc3Mgd2l0aCBubyBjb25zdHJ1Y3Rvci4gRGV2ZWxvcGVycyBhcmUgZXhwZWN0ZWQgdG8gdXNlIGZyb21KU09OLlxuICovXG5jbGFzcyBFeHRlcm5hbEFjY291bnRDbGllbnQge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4dGVybmFsQWNjb3VudENsaWVudHMgc2hvdWxkIGJlIGluaXRpYWxpemVkIHZpYTogJyArXG4gICAgICAgICAgICAnRXh0ZXJuYWxBY2NvdW50Q2xpZW50LmZyb21KU09OKCksICcgK1xuICAgICAgICAgICAgJ2RpcmVjdGx5IHZpYSBleHBsaWNpdCBjb25zdHJ1Y3RvcnMsIGVnLiAnICtcbiAgICAgICAgICAgICduZXcgQXdzQ2xpZW50KG9wdGlvbnMpLCBuZXcgSWRlbnRpdHlQb29sQ2xpZW50KG9wdGlvbnMpLCBuZXcnICtcbiAgICAgICAgICAgICdQbHVnZ2FibGVBdXRoQ2xpZW50T3B0aW9ucywgb3IgdmlhICcgK1xuICAgICAgICAgICAgJ25ldyBHb29nbGVBdXRoKG9wdGlvbnMpLmdldENsaWVudCgpJyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoaXMgc3RhdGljIG1ldGhvZCB3aWxsIGluc3RhbnRpYXRlIHRoZVxuICAgICAqIGNvcnJlc3BvbmRpbmcgdHlwZSBvZiBleHRlcm5hbCBhY2NvdW50IGNyZWRlbnRpYWwgZGVwZW5kaW5nIG9uIHRoZVxuICAgICAqIHVuZGVybHlpbmcgY3JlZGVudGlhbCBzb3VyY2UuXG4gICAgICogQHBhcmFtIG9wdGlvbnMgVGhlIGV4dGVybmFsIGFjY291bnQgb3B0aW9ucyBvYmplY3QgdHlwaWNhbGx5IGxvYWRlZFxuICAgICAqICAgZnJvbSB0aGUgZXh0ZXJuYWwgYWNjb3VudCBKU09OIGNyZWRlbnRpYWwgZmlsZS5cbiAgICAgKiBAcGFyYW0gYWRkaXRpb25hbE9wdGlvbnMgKipERVBSRUNBVEVELCBhbGwgb3B0aW9ucyBhcmUgYXZhaWxhYmxlIGluIHRoZVxuICAgICAqICAgYG9wdGlvbnNgIHBhcmFtZXRlci4qKiBPcHRpb25hbCBhZGRpdGlvbmFsIGJlaGF2aW9yIGN1c3RvbWl6YXRpb24gb3B0aW9ucy5cbiAgICAgKiAgIFRoZXNlIGN1cnJlbnRseSBjdXN0b21pemUgZXhwaXJhdGlvbiB0aHJlc2hvbGQgdGltZSBhbmQgd2hldGhlciB0byByZXRyeVxuICAgICAqICAgb24gNDAxLzQwMyBBUEkgcmVxdWVzdCBlcnJvcnMuXG4gICAgICogQHJldHVybiBBIEJhc2VFeHRlcm5hbEFjY291bnRDbGllbnQgaW5zdGFuY2Ugb3IgbnVsbCBpZiB0aGUgb3B0aW9uc1xuICAgICAqICAgcHJvdmlkZWQgZG8gbm90IGNvcnJlc3BvbmQgdG8gYW4gZXh0ZXJuYWwgYWNjb3VudCBjcmVkZW50aWFsLlxuICAgICAqL1xuICAgIHN0YXRpYyBmcm9tSlNPTihvcHRpb25zLCBhZGRpdGlvbmFsT3B0aW9ucykge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLnR5cGUgPT09IGJhc2VleHRlcm5hbGNsaWVudF8xLkVYVEVSTkFMX0FDQ09VTlRfVFlQRSkge1xuICAgICAgICAgICAgaWYgKChfYSA9IG9wdGlvbnMuY3JlZGVudGlhbF9zb3VyY2UpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5lbnZpcm9ubWVudF9pZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgYXdzY2xpZW50XzEuQXdzQ2xpZW50KG9wdGlvbnMsIGFkZGl0aW9uYWxPcHRpb25zKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKChfYiA9IG9wdGlvbnMuY3JlZGVudGlhbF9zb3VyY2UpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5leGVjdXRhYmxlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBwbHVnZ2FibGVfYXV0aF9jbGllbnRfMS5QbHVnZ2FibGVBdXRoQ2xpZW50KG9wdGlvbnMsIGFkZGl0aW9uYWxPcHRpb25zKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgaWRlbnRpdHlwb29sY2xpZW50XzEuSWRlbnRpdHlQb29sQ2xpZW50KG9wdGlvbnMsIGFkZGl0aW9uYWxPcHRpb25zKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5FeHRlcm5hbEFjY291bnRDbGllbnQgPSBFeHRlcm5hbEFjY291bnRDbGllbnQ7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJFeHRlcm5hbEFjY291bnRDbGllbnQiLCJiYXNlZXh0ZXJuYWxjbGllbnRfMSIsInJlcXVpcmUiLCJpZGVudGl0eXBvb2xjbGllbnRfMSIsImF3c2NsaWVudF8xIiwicGx1Z2dhYmxlX2F1dGhfY2xpZW50XzEiLCJjb25zdHJ1Y3RvciIsIkVycm9yIiwiZnJvbUpTT04iLCJvcHRpb25zIiwiYWRkaXRpb25hbE9wdGlvbnMiLCJfYSIsIl9iIiwidHlwZSIsIkVYVEVSTkFMX0FDQ09VTlRfVFlQRSIsImNyZWRlbnRpYWxfc291cmNlIiwiZW52aXJvbm1lbnRfaWQiLCJBd3NDbGllbnQiLCJleGVjdXRhYmxlIiwiUGx1Z2dhYmxlQXV0aENsaWVudCIsIklkZW50aXR5UG9vbENsaWVudCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/google-auth-library/build/src/auth/externalclient.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/google-auth-library/build/src/auth/googleauth.js":
/*!***********************************************************************!*\
  !*** ./node_modules/google-auth-library/build/src/auth/googleauth.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.GoogleAuth = exports.CLOUD_SDK_CLIENT_ID = void 0;\nconst child_process_1 = __webpack_require__(/*! child_process */ \"child_process\");\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst gcpMetadata = __webpack_require__(/*! gcp-metadata */ \"(action-browser)/./node_modules/google-auth-library/node_modules/gcp-metadata/build/src/index.js\");\nconst os = __webpack_require__(/*! os */ \"os\");\nconst path = __webpack_require__(/*! path */ \"path\");\nconst crypto_1 = __webpack_require__(/*! ../crypto/crypto */ \"(action-browser)/./node_modules/google-auth-library/build/src/crypto/crypto.js\");\nconst transporters_1 = __webpack_require__(/*! ../transporters */ \"(action-browser)/./node_modules/google-auth-library/build/src/transporters.js\");\nconst computeclient_1 = __webpack_require__(/*! ./computeclient */ \"(action-browser)/./node_modules/google-auth-library/build/src/auth/computeclient.js\");\nconst idtokenclient_1 = __webpack_require__(/*! ./idtokenclient */ \"(action-browser)/./node_modules/google-auth-library/build/src/auth/idtokenclient.js\");\nconst envDetect_1 = __webpack_require__(/*! ./envDetect */ \"(action-browser)/./node_modules/google-auth-library/build/src/auth/envDetect.js\");\nconst jwtclient_1 = __webpack_require__(/*! ./jwtclient */ \"(action-browser)/./node_modules/google-auth-library/build/src/auth/jwtclient.js\");\nconst refreshclient_1 = __webpack_require__(/*! ./refreshclient */ \"(action-browser)/./node_modules/google-auth-library/build/src/auth/refreshclient.js\");\nconst impersonated_1 = __webpack_require__(/*! ./impersonated */ \"(action-browser)/./node_modules/google-auth-library/build/src/auth/impersonated.js\");\nconst externalclient_1 = __webpack_require__(/*! ./externalclient */ \"(action-browser)/./node_modules/google-auth-library/build/src/auth/externalclient.js\");\nconst baseexternalclient_1 = __webpack_require__(/*! ./baseexternalclient */ \"(action-browser)/./node_modules/google-auth-library/build/src/auth/baseexternalclient.js\");\nconst authclient_1 = __webpack_require__(/*! ./authclient */ \"(action-browser)/./node_modules/google-auth-library/build/src/auth/authclient.js\");\nconst externalAccountAuthorizedUserClient_1 = __webpack_require__(/*! ./externalAccountAuthorizedUserClient */ \"(action-browser)/./node_modules/google-auth-library/build/src/auth/externalAccountAuthorizedUserClient.js\");\nconst util_1 = __webpack_require__(/*! ../util */ \"(action-browser)/./node_modules/google-auth-library/build/src/util.js\");\nexports.CLOUD_SDK_CLIENT_ID = \"764086051850-6qr4p6gpi6hn506pt8ejuq83di341hur.apps.googleusercontent.com\";\nconst GoogleAuthExceptionMessages = {\n    NO_PROJECT_ID_FOUND: \"Unable to detect a Project Id in the current environment. \\n\" + \"To learn more about authentication and Google APIs, visit: \\n\" + \"https://cloud.google.com/docs/authentication/getting-started\",\n    NO_CREDENTIALS_FOUND: \"Unable to find credentials in current environment. \\n\" + \"To learn more about authentication and Google APIs, visit: \\n\" + \"https://cloud.google.com/docs/authentication/getting-started\",\n    NO_UNIVERSE_DOMAIN_FOUND: \"Unable to detect a Universe Domain in the current environment.\\n\" + \"To learn more about Universe Domain retrieval, visit: \\n\" + \"https://cloud.google.com/compute/docs/metadata/predefined-metadata-keys\"\n};\nclass GoogleAuth {\n    // Note:  this properly is only public to satisify unit tests.\n    // https://github.com/Microsoft/TypeScript/issues/5228\n    get isGCE() {\n        return this.checkIsGCE;\n    }\n    /**\n     * Configuration is resolved in the following order of precedence:\n     * - {@link GoogleAuthOptions.credentials `credentials`}\n     * - {@link GoogleAuthOptions.keyFilename `keyFilename`}\n     * - {@link GoogleAuthOptions.keyFile `keyFile`}\n     *\n     * {@link GoogleAuthOptions.clientOptions `clientOptions`} are passed to the\n     * {@link AuthClient `AuthClient`s}.\n     *\n     * @param opts\n     */ constructor(opts){\n        /**\n         * Caches a value indicating whether the auth layer is running on Google\n         * Compute Engine.\n         * @private\n         */ this.checkIsGCE = undefined;\n        // To save the contents of the JSON credential file\n        this.jsonContent = null;\n        this.cachedCredential = null;\n        this.clientOptions = {};\n        opts = opts || {};\n        this._cachedProjectId = opts.projectId || null;\n        this.cachedCredential = opts.authClient || null;\n        this.keyFilename = opts.keyFilename || opts.keyFile;\n        this.scopes = opts.scopes;\n        this.jsonContent = opts.credentials || null;\n        this.clientOptions = opts.clientOptions || {};\n        if (opts.universeDomain) {\n            this.clientOptions.universeDomain = opts.universeDomain;\n        }\n    }\n    // GAPIC client libraries should always use self-signed JWTs. The following\n    // variables are set on the JWT client in order to indicate the type of library,\n    // and sign the JWT with the correct audience and scopes (if not supplied).\n    setGapicJWTValues(client) {\n        client.defaultServicePath = this.defaultServicePath;\n        client.useJWTAccessWithScope = this.useJWTAccessWithScope;\n        client.defaultScopes = this.defaultScopes;\n    }\n    getProjectId(callback) {\n        if (callback) {\n            this.getProjectIdAsync().then((r)=>callback(null, r), callback);\n        } else {\n            return this.getProjectIdAsync();\n        }\n    }\n    /**\n     * A temporary method for internal `getProjectId` usages where `null` is\n     * acceptable. In a future major release, `getProjectId` should return `null`\n     * (as the `Promise<string | null>` base signature describes) and this private\n     * method should be removed.\n     *\n     * @returns Promise that resolves with project id (or `null`)\n     */ async getProjectIdOptional() {\n        try {\n            return await this.getProjectId();\n        } catch (e) {\n            if (e instanceof Error && e.message === GoogleAuthExceptionMessages.NO_PROJECT_ID_FOUND) {\n                return null;\n            } else {\n                throw e;\n            }\n        }\n    }\n    /*\n     * A private method for finding and caching a projectId.\n     *\n     * Supports environments in order of precedence:\n     * - GCLOUD_PROJECT or GOOGLE_CLOUD_PROJECT environment variable\n     * - GOOGLE_APPLICATION_CREDENTIALS JSON file\n     * - Cloud SDK: `gcloud config config-helper --format json`\n     * - GCE project ID from metadata server\n     *\n     * @returns projectId\n     */ async findAndCacheProjectId() {\n        let projectId = null;\n        projectId || (projectId = await this.getProductionProjectId());\n        projectId || (projectId = await this.getFileProjectId());\n        projectId || (projectId = await this.getDefaultServiceProjectId());\n        projectId || (projectId = await this.getGCEProjectId());\n        projectId || (projectId = await this.getExternalAccountClientProjectId());\n        if (projectId) {\n            this._cachedProjectId = projectId;\n            return projectId;\n        } else {\n            throw new Error(GoogleAuthExceptionMessages.NO_PROJECT_ID_FOUND);\n        }\n    }\n    async getProjectIdAsync() {\n        if (this._cachedProjectId) {\n            return this._cachedProjectId;\n        }\n        if (!this._findProjectIdPromise) {\n            this._findProjectIdPromise = this.findAndCacheProjectId();\n        }\n        return this._findProjectIdPromise;\n    }\n    /**\n     * Retrieves a universe domain from the metadata server via\n     * {@link gcpMetadata.universe}.\n     *\n     * @returns a universe domain\n     */ async getUniverseDomainFromMetadataServer() {\n        var _a;\n        let universeDomain;\n        try {\n            universeDomain = await gcpMetadata.universe(\"universe_domain\");\n            universeDomain || (universeDomain = authclient_1.DEFAULT_UNIVERSE);\n        } catch (e) {\n            if (e && ((_a = e === null || e === void 0 ? void 0 : e.response) === null || _a === void 0 ? void 0 : _a.status) === 404) {\n                universeDomain = authclient_1.DEFAULT_UNIVERSE;\n            } else {\n                throw e;\n            }\n        }\n        return universeDomain;\n    }\n    /**\n     * Retrieves, caches, and returns the universe domain in the following order\n     * of precedence:\n     * - The universe domain in {@link GoogleAuth.clientOptions}\n     * - An existing or ADC {@link AuthClient}'s universe domain\n     * - {@link gcpMetadata.universe}, if {@link Compute} client\n     *\n     * @returns The universe domain\n     */ async getUniverseDomain() {\n        let universeDomain = (0, util_1.originalOrCamelOptions)(this.clientOptions).get(\"universe_domain\");\n        try {\n            universeDomain !== null && universeDomain !== void 0 ? universeDomain : universeDomain = (await this.getClient()).universeDomain;\n        } catch (_a) {\n            // client or ADC is not available\n            universeDomain !== null && universeDomain !== void 0 ? universeDomain : universeDomain = authclient_1.DEFAULT_UNIVERSE;\n        }\n        return universeDomain;\n    }\n    /**\n     * @returns Any scopes (user-specified or default scopes specified by the\n     *   client library) that need to be set on the current Auth client.\n     */ getAnyScopes() {\n        return this.scopes || this.defaultScopes;\n    }\n    getApplicationDefault(optionsOrCallback = {}, callback) {\n        let options;\n        if (typeof optionsOrCallback === \"function\") {\n            callback = optionsOrCallback;\n        } else {\n            options = optionsOrCallback;\n        }\n        if (callback) {\n            this.getApplicationDefaultAsync(options).then((r)=>callback(null, r.credential, r.projectId), callback);\n        } else {\n            return this.getApplicationDefaultAsync(options);\n        }\n    }\n    async getApplicationDefaultAsync(options = {}) {\n        // If we've already got a cached credential, return it.\n        // This will also preserve one's configured quota project, in case they\n        // set one directly on the credential previously.\n        if (this.cachedCredential) {\n            return await this.prepareAndCacheADC(this.cachedCredential);\n        }\n        // Since this is a 'new' ADC to cache we will use the environment variable\n        // if it's available. We prefer this value over the value from ADC.\n        const quotaProjectIdOverride = process.env[\"GOOGLE_CLOUD_QUOTA_PROJECT\"];\n        let credential;\n        // Check for the existence of a local environment variable pointing to the\n        // location of the credential file. This is typically used in local\n        // developer scenarios.\n        credential = await this._tryGetApplicationCredentialsFromEnvironmentVariable(options);\n        if (credential) {\n            if (credential instanceof jwtclient_1.JWT) {\n                credential.scopes = this.scopes;\n            } else if (credential instanceof baseexternalclient_1.BaseExternalAccountClient) {\n                credential.scopes = this.getAnyScopes();\n            }\n            return await this.prepareAndCacheADC(credential, quotaProjectIdOverride);\n        }\n        // Look in the well-known credential file location.\n        credential = await this._tryGetApplicationCredentialsFromWellKnownFile(options);\n        if (credential) {\n            if (credential instanceof jwtclient_1.JWT) {\n                credential.scopes = this.scopes;\n            } else if (credential instanceof baseexternalclient_1.BaseExternalAccountClient) {\n                credential.scopes = this.getAnyScopes();\n            }\n            return await this.prepareAndCacheADC(credential, quotaProjectIdOverride);\n        }\n        // Determine if we're running on GCE.\n        if (await this._checkIsGCE()) {\n            // set universe domain for Compute client\n            if (!(0, util_1.originalOrCamelOptions)(options).get(\"universe_domain\")) {\n                options.universeDomain = await this.getUniverseDomainFromMetadataServer();\n            }\n            options.scopes = this.getAnyScopes();\n            return await this.prepareAndCacheADC(new computeclient_1.Compute(options), quotaProjectIdOverride);\n        }\n        throw new Error(\"Could not load the default credentials. Browse to https://cloud.google.com/docs/authentication/getting-started for more information.\");\n    }\n    async prepareAndCacheADC(credential, quotaProjectIdOverride) {\n        const projectId = await this.getProjectIdOptional();\n        if (quotaProjectIdOverride) {\n            credential.quotaProjectId = quotaProjectIdOverride;\n        }\n        this.cachedCredential = credential;\n        return {\n            credential,\n            projectId\n        };\n    }\n    /**\n     * Determines whether the auth layer is running on Google Compute Engine.\n     * Checks for GCP Residency, then fallback to checking if metadata server\n     * is available.\n     *\n     * @returns A promise that resolves with the boolean.\n     * @api private\n     */ async _checkIsGCE() {\n        if (this.checkIsGCE === undefined) {\n            this.checkIsGCE = gcpMetadata.getGCPResidency() || await gcpMetadata.isAvailable();\n        }\n        return this.checkIsGCE;\n    }\n    /**\n     * Attempts to load default credentials from the environment variable path..\n     * @returns Promise that resolves with the OAuth2Client or null.\n     * @api private\n     */ async _tryGetApplicationCredentialsFromEnvironmentVariable(options) {\n        const credentialsPath = process.env[\"GOOGLE_APPLICATION_CREDENTIALS\"] || process.env[\"google_application_credentials\"];\n        if (!credentialsPath || credentialsPath.length === 0) {\n            return null;\n        }\n        try {\n            return this._getApplicationCredentialsFromFilePath(credentialsPath, options);\n        } catch (e) {\n            if (e instanceof Error) {\n                e.message = `Unable to read the credential file specified by the GOOGLE_APPLICATION_CREDENTIALS environment variable: ${e.message}`;\n            }\n            throw e;\n        }\n    }\n    /**\n     * Attempts to load default credentials from a well-known file location\n     * @return Promise that resolves with the OAuth2Client or null.\n     * @api private\n     */ async _tryGetApplicationCredentialsFromWellKnownFile(options) {\n        // First, figure out the location of the file, depending upon the OS type.\n        let location = null;\n        if (this._isWindows()) {\n            // Windows\n            location = process.env[\"APPDATA\"];\n        } else {\n            // Linux or Mac\n            const home = process.env[\"HOME\"];\n            if (home) {\n                location = path.join(home, \".config\");\n            }\n        }\n        // If we found the root path, expand it.\n        if (location) {\n            location = path.join(location, \"gcloud\", \"application_default_credentials.json\");\n            if (!fs.existsSync(location)) {\n                location = null;\n            }\n        }\n        // The file does not exist.\n        if (!location) {\n            return null;\n        }\n        // The file seems to exist. Try to use it.\n        const client = await this._getApplicationCredentialsFromFilePath(location, options);\n        return client;\n    }\n    /**\n     * Attempts to load default credentials from a file at the given path..\n     * @param filePath The path to the file to read.\n     * @returns Promise that resolves with the OAuth2Client\n     * @api private\n     */ async _getApplicationCredentialsFromFilePath(filePath, options = {}) {\n        // Make sure the path looks like a string.\n        if (!filePath || filePath.length === 0) {\n            throw new Error(\"The file path is invalid.\");\n        }\n        // Make sure there is a file at the path. lstatSync will throw if there is\n        // nothing there.\n        try {\n            // Resolve path to actual file in case of symlink. Expect a thrown error\n            // if not resolvable.\n            filePath = fs.realpathSync(filePath);\n            if (!fs.lstatSync(filePath).isFile()) {\n                throw new Error();\n            }\n        } catch (err) {\n            if (err instanceof Error) {\n                err.message = `The file at ${filePath} does not exist, or it is not a file. ${err.message}`;\n            }\n            throw err;\n        }\n        // Now open a read stream on the file, and parse it.\n        const readStream = fs.createReadStream(filePath);\n        return this.fromStream(readStream, options);\n    }\n    /**\n     * Create a credentials instance using a given impersonated input options.\n     * @param json The impersonated input object.\n     * @returns JWT or UserRefresh Client with data\n     */ fromImpersonatedJSON(json) {\n        var _a, _b, _c, _d, _e;\n        if (!json) {\n            throw new Error(\"Must pass in a JSON object containing an  impersonated refresh token\");\n        }\n        if (json.type !== impersonated_1.IMPERSONATED_ACCOUNT_TYPE) {\n            throw new Error(`The incoming JSON object does not have the \"${impersonated_1.IMPERSONATED_ACCOUNT_TYPE}\" type`);\n        }\n        if (!json.source_credentials) {\n            throw new Error(\"The incoming JSON object does not contain a source_credentials field\");\n        }\n        if (!json.service_account_impersonation_url) {\n            throw new Error(\"The incoming JSON object does not contain a service_account_impersonation_url field\");\n        }\n        // Create source client for impersonation\n        const sourceClient = new refreshclient_1.UserRefreshClient();\n        sourceClient.fromJSON(json.source_credentials);\n        if (((_a = json.service_account_impersonation_url) === null || _a === void 0 ? void 0 : _a.length) > 256) {\n            /**\n             * Prevents DOS attacks.\n             * @see {@link https://github.com/googleapis/google-auth-library-nodejs/security/code-scanning/85}\n             **/ throw new RangeError(`Target principal is too long: ${json.service_account_impersonation_url}`);\n        }\n        // Extreact service account from service_account_impersonation_url\n        const targetPrincipal = (_c = (_b = /(?<target>[^/]+):generateAccessToken$/.exec(json.service_account_impersonation_url)) === null || _b === void 0 ? void 0 : _b.groups) === null || _c === void 0 ? void 0 : _c.target;\n        if (!targetPrincipal) {\n            throw new RangeError(`Cannot extract target principal from ${json.service_account_impersonation_url}`);\n        }\n        const targetScopes = (_d = this.getAnyScopes()) !== null && _d !== void 0 ? _d : [];\n        const client = new impersonated_1.Impersonated({\n            ...json,\n            delegates: (_e = json.delegates) !== null && _e !== void 0 ? _e : [],\n            sourceClient: sourceClient,\n            targetPrincipal: targetPrincipal,\n            targetScopes: Array.isArray(targetScopes) ? targetScopes : [\n                targetScopes\n            ]\n        });\n        return client;\n    }\n    /**\n     * Create a credentials instance using the given input options.\n     * @param json The input object.\n     * @param options The JWT or UserRefresh options for the client\n     * @returns JWT or UserRefresh Client with data\n     */ fromJSON(json, options = {}) {\n        let client;\n        // user's preferred universe domain\n        const preferredUniverseDomain = (0, util_1.originalOrCamelOptions)(options).get(\"universe_domain\");\n        if (json.type === refreshclient_1.USER_REFRESH_ACCOUNT_TYPE) {\n            client = new refreshclient_1.UserRefreshClient(options);\n            client.fromJSON(json);\n        } else if (json.type === impersonated_1.IMPERSONATED_ACCOUNT_TYPE) {\n            client = this.fromImpersonatedJSON(json);\n        } else if (json.type === baseexternalclient_1.EXTERNAL_ACCOUNT_TYPE) {\n            client = externalclient_1.ExternalAccountClient.fromJSON(json, options);\n            client.scopes = this.getAnyScopes();\n        } else if (json.type === externalAccountAuthorizedUserClient_1.EXTERNAL_ACCOUNT_AUTHORIZED_USER_TYPE) {\n            client = new externalAccountAuthorizedUserClient_1.ExternalAccountAuthorizedUserClient(json, options);\n        } else {\n            options.scopes = this.scopes;\n            client = new jwtclient_1.JWT(options);\n            this.setGapicJWTValues(client);\n            client.fromJSON(json);\n        }\n        if (preferredUniverseDomain) {\n            client.universeDomain = preferredUniverseDomain;\n        }\n        return client;\n    }\n    /**\n     * Return a JWT or UserRefreshClient from JavaScript object, caching both the\n     * object used to instantiate and the client.\n     * @param json The input object.\n     * @param options The JWT or UserRefresh options for the client\n     * @returns JWT or UserRefresh Client with data\n     */ _cacheClientFromJSON(json, options) {\n        const client = this.fromJSON(json, options);\n        // cache both raw data used to instantiate client and client itself.\n        this.jsonContent = json;\n        this.cachedCredential = client;\n        return client;\n    }\n    fromStream(inputStream, optionsOrCallback = {}, callback) {\n        let options = {};\n        if (typeof optionsOrCallback === \"function\") {\n            callback = optionsOrCallback;\n        } else {\n            options = optionsOrCallback;\n        }\n        if (callback) {\n            this.fromStreamAsync(inputStream, options).then((r)=>callback(null, r), callback);\n        } else {\n            return this.fromStreamAsync(inputStream, options);\n        }\n    }\n    fromStreamAsync(inputStream, options) {\n        return new Promise((resolve, reject)=>{\n            if (!inputStream) {\n                throw new Error(\"Must pass in a stream containing the Google auth settings.\");\n            }\n            let s = \"\";\n            inputStream.setEncoding(\"utf8\").on(\"error\", reject).on(\"data\", (chunk)=>s += chunk).on(\"end\", ()=>{\n                try {\n                    try {\n                        const data = JSON.parse(s);\n                        const r = this._cacheClientFromJSON(data, options);\n                        return resolve(r);\n                    } catch (err) {\n                        // If we failed parsing this.keyFileName, assume that it\n                        // is a PEM or p12 certificate:\n                        if (!this.keyFilename) throw err;\n                        const client = new jwtclient_1.JWT({\n                            ...this.clientOptions,\n                            keyFile: this.keyFilename\n                        });\n                        this.cachedCredential = client;\n                        this.setGapicJWTValues(client);\n                        return resolve(client);\n                    }\n                } catch (err) {\n                    return reject(err);\n                }\n            });\n        });\n    }\n    /**\n     * Create a credentials instance using the given API key string.\n     * @param apiKey The API key string\n     * @param options An optional options object.\n     * @returns A JWT loaded from the key\n     */ fromAPIKey(apiKey, options) {\n        options = options || {};\n        const client = new jwtclient_1.JWT(options);\n        client.fromAPIKey(apiKey);\n        return client;\n    }\n    /**\n     * Determines whether the current operating system is Windows.\n     * @api private\n     */ _isWindows() {\n        const sys = os.platform();\n        if (sys && sys.length >= 3) {\n            if (sys.substring(0, 3).toLowerCase() === \"win\") {\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * Run the Google Cloud SDK command that prints the default project ID\n     */ async getDefaultServiceProjectId() {\n        return new Promise((resolve)=>{\n            (0, child_process_1.exec)(\"gcloud config config-helper --format json\", (err, stdout)=>{\n                if (!err && stdout) {\n                    try {\n                        const projectId = JSON.parse(stdout).configuration.properties.core.project;\n                        resolve(projectId);\n                        return;\n                    } catch (e) {\n                    // ignore errors\n                    }\n                }\n                resolve(null);\n            });\n        });\n    }\n    /**\n     * Loads the project id from environment variables.\n     * @api private\n     */ getProductionProjectId() {\n        return process.env[\"GCLOUD_PROJECT\"] || process.env[\"GOOGLE_CLOUD_PROJECT\"] || process.env[\"gcloud_project\"] || process.env[\"google_cloud_project\"];\n    }\n    /**\n     * Loads the project id from the GOOGLE_APPLICATION_CREDENTIALS json file.\n     * @api private\n     */ async getFileProjectId() {\n        if (this.cachedCredential) {\n            // Try to read the project ID from the cached credentials file\n            return this.cachedCredential.projectId;\n        }\n        // Ensure the projectId is loaded from the keyFile if available.\n        if (this.keyFilename) {\n            const creds = await this.getClient();\n            if (creds && creds.projectId) {\n                return creds.projectId;\n            }\n        }\n        // Try to load a credentials file and read its project ID\n        const r = await this._tryGetApplicationCredentialsFromEnvironmentVariable();\n        if (r) {\n            return r.projectId;\n        } else {\n            return null;\n        }\n    }\n    /**\n     * Gets the project ID from external account client if available.\n     */ async getExternalAccountClientProjectId() {\n        if (!this.jsonContent || this.jsonContent.type !== baseexternalclient_1.EXTERNAL_ACCOUNT_TYPE) {\n            return null;\n        }\n        const creds = await this.getClient();\n        // Do not suppress the underlying error, as the error could contain helpful\n        // information for debugging and fixing. This is especially true for\n        // external account creds as in order to get the project ID, the following\n        // operations have to succeed:\n        // 1. Valid credentials file should be supplied.\n        // 2. Ability to retrieve access tokens from STS token exchange API.\n        // 3. Ability to exchange for service account impersonated credentials (if\n        //    enabled).\n        // 4. Ability to get project info using the access token from step 2 or 3.\n        // Without surfacing the error, it is harder for developers to determine\n        // which step went wrong.\n        return await creds.getProjectId();\n    }\n    /**\n     * Gets the Compute Engine project ID if it can be inferred.\n     */ async getGCEProjectId() {\n        try {\n            const r = await gcpMetadata.project(\"project-id\");\n            return r;\n        } catch (e) {\n            // Ignore any errors\n            return null;\n        }\n    }\n    getCredentials(callback) {\n        if (callback) {\n            this.getCredentialsAsync().then((r)=>callback(null, r), callback);\n        } else {\n            return this.getCredentialsAsync();\n        }\n    }\n    async getCredentialsAsync() {\n        const client = await this.getClient();\n        if (client instanceof impersonated_1.Impersonated) {\n            return {\n                client_email: client.getTargetPrincipal()\n            };\n        }\n        if (client instanceof baseexternalclient_1.BaseExternalAccountClient) {\n            const serviceAccountEmail = client.getServiceAccountEmail();\n            if (serviceAccountEmail) {\n                return {\n                    client_email: serviceAccountEmail,\n                    universe_domain: client.universeDomain\n                };\n            }\n        }\n        if (this.jsonContent) {\n            return {\n                client_email: this.jsonContent.client_email,\n                private_key: this.jsonContent.private_key,\n                universe_domain: this.jsonContent.universe_domain\n            };\n        }\n        if (await this._checkIsGCE()) {\n            const [client_email, universe_domain] = await Promise.all([\n                gcpMetadata.instance(\"service-accounts/default/email\"),\n                this.getUniverseDomain()\n            ]);\n            return {\n                client_email,\n                universe_domain\n            };\n        }\n        throw new Error(GoogleAuthExceptionMessages.NO_CREDENTIALS_FOUND);\n    }\n    /**\n     * Automatically obtain an {@link AuthClient `AuthClient`} based on the\n     * provided configuration. If no options were passed, use Application\n     * Default Credentials.\n     */ async getClient() {\n        if (!this.cachedCredential) {\n            if (this.jsonContent) {\n                this._cacheClientFromJSON(this.jsonContent, this.clientOptions);\n            } else if (this.keyFilename) {\n                const filePath = path.resolve(this.keyFilename);\n                const stream = fs.createReadStream(filePath);\n                await this.fromStreamAsync(stream, this.clientOptions);\n            } else {\n                await this.getApplicationDefaultAsync(this.clientOptions);\n            }\n        }\n        return this.cachedCredential;\n    }\n    /**\n     * Creates a client which will fetch an ID token for authorization.\n     * @param targetAudience the audience for the fetched ID token.\n     * @returns IdTokenClient for making HTTP calls authenticated with ID tokens.\n     */ async getIdTokenClient(targetAudience) {\n        const client = await this.getClient();\n        if (!(\"fetchIdToken\" in client)) {\n            throw new Error(\"Cannot fetch ID token in this environment, use GCE or set the GOOGLE_APPLICATION_CREDENTIALS environment variable to a service account credentials JSON file.\");\n        }\n        return new idtokenclient_1.IdTokenClient({\n            targetAudience,\n            idTokenProvider: client\n        });\n    }\n    /**\n     * Automatically obtain application default credentials, and return\n     * an access token for making requests.\n     */ async getAccessToken() {\n        const client = await this.getClient();\n        return (await client.getAccessToken()).token;\n    }\n    /**\n     * Obtain the HTTP headers that will provide authorization for a given\n     * request.\n     */ async getRequestHeaders(url) {\n        const client = await this.getClient();\n        return client.getRequestHeaders(url);\n    }\n    /**\n     * Obtain credentials for a request, then attach the appropriate headers to\n     * the request options.\n     * @param opts Axios or Request options on which to attach the headers\n     */ async authorizeRequest(opts) {\n        opts = opts || {};\n        const url = opts.url || opts.uri;\n        const client = await this.getClient();\n        const headers = await client.getRequestHeaders(url);\n        opts.headers = Object.assign(opts.headers || {}, headers);\n        return opts;\n    }\n    /**\n     * Automatically obtain application default credentials, and make an\n     * HTTP request using the given options.\n     * @param opts Axios request options for the HTTP request.\n     */ // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    async request(opts) {\n        const client = await this.getClient();\n        return client.request(opts);\n    }\n    /**\n     * Determine the compute environment in which the code is running.\n     */ getEnv() {\n        return (0, envDetect_1.getEnv)();\n    }\n    /**\n     * Sign the given data with the current private key, or go out\n     * to the IAM API to sign it.\n     * @param data The data to be signed.\n     * @param endpoint A custom endpoint to use.\n     *\n     * @example\n     * ```\n     * sign('data', 'https://iamcredentials.googleapis.com/v1/projects/-/serviceAccounts/');\n     * ```\n     */ async sign(data, endpoint) {\n        const client = await this.getClient();\n        const universe = await this.getUniverseDomain();\n        endpoint = endpoint || `https://iamcredentials.${universe}/v1/projects/-/serviceAccounts/`;\n        if (client instanceof impersonated_1.Impersonated) {\n            const signed = await client.sign(data);\n            return signed.signedBlob;\n        }\n        const crypto = (0, crypto_1.createCrypto)();\n        if (client instanceof jwtclient_1.JWT && client.key) {\n            const sign = await crypto.sign(client.key, data);\n            return sign;\n        }\n        const creds = await this.getCredentials();\n        if (!creds.client_email) {\n            throw new Error(\"Cannot sign data without `client_email`.\");\n        }\n        return this.signBlob(crypto, creds.client_email, data, endpoint);\n    }\n    async signBlob(crypto, emailOrUniqueId, data, endpoint) {\n        const url = new URL(endpoint + `${emailOrUniqueId}:signBlob`);\n        const res = await this.request({\n            method: \"POST\",\n            url: url.href,\n            data: {\n                payload: crypto.encodeBase64StringUtf8(data)\n            }\n        });\n        return res.data.signedBlob;\n    }\n}\nexports.GoogleAuth = GoogleAuth;\n/**\n * Export DefaultTransporter as a static property of the class.\n */ GoogleAuth.DefaultTransporter = transporters_1.DefaultTransporter;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9nb29nbGUtYXV0aC1saWJyYXJ5L2J1aWxkL3NyYy9hdXRoL2dvb2dsZWF1dGguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw0QkFBNEI7QUFDNUIsRUFBRTtBQUNGLGtFQUFrRTtBQUNsRSxtRUFBbUU7QUFDbkUsMENBQTBDO0FBQzFDLEVBQUU7QUFDRixrREFBa0Q7QUFDbEQsRUFBRTtBQUNGLHNFQUFzRTtBQUN0RSxvRUFBb0U7QUFDcEUsMkVBQTJFO0FBQzNFLHNFQUFzRTtBQUN0RSxpQ0FBaUM7QUFDakNBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxrQkFBa0IsR0FBR0EsMkJBQTJCLEdBQUcsS0FBSztBQUN4RCxNQUFNSSxrQkFBa0JDLG1CQUFPQSxDQUFDLG9DQUFlO0FBQy9DLE1BQU1DLEtBQUtELG1CQUFPQSxDQUFDLGNBQUk7QUFDdkIsTUFBTUUsY0FBY0YsbUJBQU9BLENBQUMsc0hBQWM7QUFDMUMsTUFBTUcsS0FBS0gsbUJBQU9BLENBQUMsY0FBSTtBQUN2QixNQUFNSSxPQUFPSixtQkFBT0EsQ0FBQyxrQkFBTTtBQUMzQixNQUFNSyxXQUFXTCxtQkFBT0EsQ0FBQyx3R0FBa0I7QUFDM0MsTUFBTU0saUJBQWlCTixtQkFBT0EsQ0FBQyxzR0FBaUI7QUFDaEQsTUFBTU8sa0JBQWtCUCxtQkFBT0EsQ0FBQyw0R0FBaUI7QUFDakQsTUFBTVEsa0JBQWtCUixtQkFBT0EsQ0FBQyw0R0FBaUI7QUFDakQsTUFBTVMsY0FBY1QsbUJBQU9BLENBQUMsb0dBQWE7QUFDekMsTUFBTVUsY0FBY1YsbUJBQU9BLENBQUMsb0dBQWE7QUFDekMsTUFBTVcsa0JBQWtCWCxtQkFBT0EsQ0FBQyw0R0FBaUI7QUFDakQsTUFBTVksaUJBQWlCWixtQkFBT0EsQ0FBQywwR0FBZ0I7QUFDL0MsTUFBTWEsbUJBQW1CYixtQkFBT0EsQ0FBQyw4R0FBa0I7QUFDbkQsTUFBTWMsdUJBQXVCZCxt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QUFNTSxTQUFTSCxNQUFNLEVBQUVJLGVBQWUsRUFBRWhELElBQUksRUFBRXlDLFFBQVEsRUFBRTtRQUNwRCxNQUFNUixNQUFNLElBQUlnQixJQUFJUixXQUFXLENBQUMsRUFBRU8sZ0JBQWdCLFNBQVMsQ0FBQztRQUM1RCxNQUFNRSxNQUFNLE1BQU0sSUFBSSxDQUFDWixPQUFPLENBQUM7WUFDM0JhLFFBQVE7WUFDUmxCLEtBQUtBLElBQUltQixJQUFJO1lBQ2JwRCxNQUFNO2dCQUNGcUQsU0FBU1QsT0FBT1Usc0JBQXNCLENBQUN0RDtZQUMzQztRQUNKO1FBQ0EsT0FBT2tELElBQUlsRCxJQUFJLENBQUMyQyxVQUFVO0lBQzlCO0FBQ0o7QUFDQS9MLGtCQUFrQixHQUFHRTtBQUNyQjs7Q0FFQyxHQUNEQSxXQUFXeU0sa0JBQWtCLEdBQUdoTSxlQUFlZ00sa0JBQWtCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3BvdGlmeS10by15b3V0dWJlLy4vbm9kZV9tb2R1bGVzL2dvb2dsZS1hdXRoLWxpYnJhcnkvYnVpbGQvc3JjL2F1dGgvZ29vZ2xlYXV0aC5qcz8xZjM5Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkdvb2dsZUF1dGggPSBleHBvcnRzLkNMT1VEX1NES19DTElFTlRfSUQgPSB2b2lkIDA7XG5jb25zdCBjaGlsZF9wcm9jZXNzXzEgPSByZXF1aXJlKFwiY2hpbGRfcHJvY2Vzc1wiKTtcbmNvbnN0IGZzID0gcmVxdWlyZShcImZzXCIpO1xuY29uc3QgZ2NwTWV0YWRhdGEgPSByZXF1aXJlKFwiZ2NwLW1ldGFkYXRhXCIpO1xuY29uc3Qgb3MgPSByZXF1aXJlKFwib3NcIik7XG5jb25zdCBwYXRoID0gcmVxdWlyZShcInBhdGhcIik7XG5jb25zdCBjcnlwdG9fMSA9IHJlcXVpcmUoXCIuLi9jcnlwdG8vY3J5cHRvXCIpO1xuY29uc3QgdHJhbnNwb3J0ZXJzXzEgPSByZXF1aXJlKFwiLi4vdHJhbnNwb3J0ZXJzXCIpO1xuY29uc3QgY29tcHV0ZWNsaWVudF8xID0gcmVxdWlyZShcIi4vY29tcHV0ZWNsaWVudFwiKTtcbmNvbnN0IGlkdG9rZW5jbGllbnRfMSA9IHJlcXVpcmUoXCIuL2lkdG9rZW5jbGllbnRcIik7XG5jb25zdCBlbnZEZXRlY3RfMSA9IHJlcXVpcmUoXCIuL2VudkRldGVjdFwiKTtcbmNvbnN0IGp3dGNsaWVudF8xID0gcmVxdWlyZShcIi4vand0Y2xpZW50XCIpO1xuY29uc3QgcmVmcmVzaGNsaWVudF8xID0gcmVxdWlyZShcIi4vcmVmcmVzaGNsaWVudFwiKTtcbmNvbnN0IGltcGVyc29uYXRlZF8xID0gcmVxdWlyZShcIi4vaW1wZXJzb25hdGVkXCIpO1xuY29uc3QgZXh0ZXJuYWxjbGllbnRfMSA9IHJlcXVpcmUoXCIuL2V4dGVybmFsY2xpZW50XCIpO1xuY29uc3QgYmFzZWV4dGVybmFsY2xpZW50XzEgPSByZXF1aXJlKFwiLi9iYXNlZXh0ZXJuYWxjbGllbnRcIik7XG5jb25zdCBhdXRoY2xpZW50XzEgPSByZXF1aXJlKFwiLi9hdXRoY2xpZW50XCIpO1xuY29uc3QgZXh0ZXJuYWxBY2NvdW50QXV0aG9yaXplZFVzZXJDbGllbnRfMSA9IHJlcXVpcmUoXCIuL2V4dGVybmFsQWNjb3VudEF1dGhvcml6ZWRVc2VyQ2xpZW50XCIpO1xuY29uc3QgdXRpbF8xID0gcmVxdWlyZShcIi4uL3V0aWxcIik7XG5leHBvcnRzLkNMT1VEX1NES19DTElFTlRfSUQgPSAnNzY0MDg2MDUxODUwLTZxcjRwNmdwaTZobjUwNnB0OGVqdXE4M2RpMzQxaHVyLmFwcHMuZ29vZ2xldXNlcmNvbnRlbnQuY29tJztcbmNvbnN0IEdvb2dsZUF1dGhFeGNlcHRpb25NZXNzYWdlcyA9IHtcbiAgICBOT19QUk9KRUNUX0lEX0ZPVU5EOiAnVW5hYmxlIHRvIGRldGVjdCBhIFByb2plY3QgSWQgaW4gdGhlIGN1cnJlbnQgZW52aXJvbm1lbnQuIFxcbicgK1xuICAgICAgICAnVG8gbGVhcm4gbW9yZSBhYm91dCBhdXRoZW50aWNhdGlvbiBhbmQgR29vZ2xlIEFQSXMsIHZpc2l0OiBcXG4nICtcbiAgICAgICAgJ2h0dHBzOi8vY2xvdWQuZ29vZ2xlLmNvbS9kb2NzL2F1dGhlbnRpY2F0aW9uL2dldHRpbmctc3RhcnRlZCcsXG4gICAgTk9fQ1JFREVOVElBTFNfRk9VTkQ6ICdVbmFibGUgdG8gZmluZCBjcmVkZW50aWFscyBpbiBjdXJyZW50IGVudmlyb25tZW50LiBcXG4nICtcbiAgICAgICAgJ1RvIGxlYXJuIG1vcmUgYWJvdXQgYXV0aGVudGljYXRpb24gYW5kIEdvb2dsZSBBUElzLCB2aXNpdDogXFxuJyArXG4gICAgICAgICdodHRwczovL2Nsb3VkLmdvb2dsZS5jb20vZG9jcy9hdXRoZW50aWNhdGlvbi9nZXR0aW5nLXN0YXJ0ZWQnLFxuICAgIE5PX1VOSVZFUlNFX0RPTUFJTl9GT1VORDogJ1VuYWJsZSB0byBkZXRlY3QgYSBVbml2ZXJzZSBEb21haW4gaW4gdGhlIGN1cnJlbnQgZW52aXJvbm1lbnQuXFxuJyArXG4gICAgICAgICdUbyBsZWFybiBtb3JlIGFib3V0IFVuaXZlcnNlIERvbWFpbiByZXRyaWV2YWwsIHZpc2l0OiBcXG4nICtcbiAgICAgICAgJ2h0dHBzOi8vY2xvdWQuZ29vZ2xlLmNvbS9jb21wdXRlL2RvY3MvbWV0YWRhdGEvcHJlZGVmaW5lZC1tZXRhZGF0YS1rZXlzJyxcbn07XG5jbGFzcyBHb29nbGVBdXRoIHtcbiAgICAvLyBOb3RlOiAgdGhpcyBwcm9wZXJseSBpcyBvbmx5IHB1YmxpYyB0byBzYXRpc2lmeSB1bml0IHRlc3RzLlxuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9NaWNyb3NvZnQvVHlwZVNjcmlwdC9pc3N1ZXMvNTIyOFxuICAgIGdldCBpc0dDRSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2hlY2tJc0dDRTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ29uZmlndXJhdGlvbiBpcyByZXNvbHZlZCBpbiB0aGUgZm9sbG93aW5nIG9yZGVyIG9mIHByZWNlZGVuY2U6XG4gICAgICogLSB7QGxpbmsgR29vZ2xlQXV0aE9wdGlvbnMuY3JlZGVudGlhbHMgYGNyZWRlbnRpYWxzYH1cbiAgICAgKiAtIHtAbGluayBHb29nbGVBdXRoT3B0aW9ucy5rZXlGaWxlbmFtZSBga2V5RmlsZW5hbWVgfVxuICAgICAqIC0ge0BsaW5rIEdvb2dsZUF1dGhPcHRpb25zLmtleUZpbGUgYGtleUZpbGVgfVxuICAgICAqXG4gICAgICoge0BsaW5rIEdvb2dsZUF1dGhPcHRpb25zLmNsaWVudE9wdGlvbnMgYGNsaWVudE9wdGlvbnNgfSBhcmUgcGFzc2VkIHRvIHRoZVxuICAgICAqIHtAbGluayBBdXRoQ2xpZW50IGBBdXRoQ2xpZW50YHN9LlxuICAgICAqXG4gICAgICogQHBhcmFtIG9wdHNcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDYWNoZXMgYSB2YWx1ZSBpbmRpY2F0aW5nIHdoZXRoZXIgdGhlIGF1dGggbGF5ZXIgaXMgcnVubmluZyBvbiBHb29nbGVcbiAgICAgICAgICogQ29tcHV0ZSBFbmdpbmUuXG4gICAgICAgICAqIEBwcml2YXRlXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmNoZWNrSXNHQ0UgPSB1bmRlZmluZWQ7XG4gICAgICAgIC8vIFRvIHNhdmUgdGhlIGNvbnRlbnRzIG9mIHRoZSBKU09OIGNyZWRlbnRpYWwgZmlsZVxuICAgICAgICB0aGlzLmpzb25Db250ZW50ID0gbnVsbDtcbiAgICAgICAgdGhpcy5jYWNoZWRDcmVkZW50aWFsID0gbnVsbDtcbiAgICAgICAgdGhpcy5jbGllbnRPcHRpb25zID0ge307XG4gICAgICAgIG9wdHMgPSBvcHRzIHx8IHt9O1xuICAgICAgICB0aGlzLl9jYWNoZWRQcm9qZWN0SWQgPSBvcHRzLnByb2plY3RJZCB8fCBudWxsO1xuICAgICAgICB0aGlzLmNhY2hlZENyZWRlbnRpYWwgPSBvcHRzLmF1dGhDbGllbnQgfHwgbnVsbDtcbiAgICAgICAgdGhpcy5rZXlGaWxlbmFtZSA9IG9wdHMua2V5RmlsZW5hbWUgfHwgb3B0cy5rZXlGaWxlO1xuICAgICAgICB0aGlzLnNjb3BlcyA9IG9wdHMuc2NvcGVzO1xuICAgICAgICB0aGlzLmpzb25Db250ZW50ID0gb3B0cy5jcmVkZW50aWFscyB8fCBudWxsO1xuICAgICAgICB0aGlzLmNsaWVudE9wdGlvbnMgPSBvcHRzLmNsaWVudE9wdGlvbnMgfHwge307XG4gICAgICAgIGlmIChvcHRzLnVuaXZlcnNlRG9tYWluKSB7XG4gICAgICAgICAgICB0aGlzLmNsaWVudE9wdGlvbnMudW5pdmVyc2VEb21haW4gPSBvcHRzLnVuaXZlcnNlRG9tYWluO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIEdBUElDIGNsaWVudCBsaWJyYXJpZXMgc2hvdWxkIGFsd2F5cyB1c2Ugc2VsZi1zaWduZWQgSldUcy4gVGhlIGZvbGxvd2luZ1xuICAgIC8vIHZhcmlhYmxlcyBhcmUgc2V0IG9uIHRoZSBKV1QgY2xpZW50IGluIG9yZGVyIHRvIGluZGljYXRlIHRoZSB0eXBlIG9mIGxpYnJhcnksXG4gICAgLy8gYW5kIHNpZ24gdGhlIEpXVCB3aXRoIHRoZSBjb3JyZWN0IGF1ZGllbmNlIGFuZCBzY29wZXMgKGlmIG5vdCBzdXBwbGllZCkuXG4gICAgc2V0R2FwaWNKV1RWYWx1ZXMoY2xpZW50KSB7XG4gICAgICAgIGNsaWVudC5kZWZhdWx0U2VydmljZVBhdGggPSB0aGlzLmRlZmF1bHRTZXJ2aWNlUGF0aDtcbiAgICAgICAgY2xpZW50LnVzZUpXVEFjY2Vzc1dpdGhTY29wZSA9IHRoaXMudXNlSldUQWNjZXNzV2l0aFNjb3BlO1xuICAgICAgICBjbGllbnQuZGVmYXVsdFNjb3BlcyA9IHRoaXMuZGVmYXVsdFNjb3BlcztcbiAgICB9XG4gICAgZ2V0UHJvamVjdElkKGNhbGxiYWNrKSB7XG4gICAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICAgICAgdGhpcy5nZXRQcm9qZWN0SWRBc3luYygpLnRoZW4ociA9PiBjYWxsYmFjayhudWxsLCByKSwgY2FsbGJhY2spO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UHJvamVjdElkQXN5bmMoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBBIHRlbXBvcmFyeSBtZXRob2QgZm9yIGludGVybmFsIGBnZXRQcm9qZWN0SWRgIHVzYWdlcyB3aGVyZSBgbnVsbGAgaXNcbiAgICAgKiBhY2NlcHRhYmxlLiBJbiBhIGZ1dHVyZSBtYWpvciByZWxlYXNlLCBgZ2V0UHJvamVjdElkYCBzaG91bGQgcmV0dXJuIGBudWxsYFxuICAgICAqIChhcyB0aGUgYFByb21pc2U8c3RyaW5nIHwgbnVsbD5gIGJhc2Ugc2lnbmF0dXJlIGRlc2NyaWJlcykgYW5kIHRoaXMgcHJpdmF0ZVxuICAgICAqIG1ldGhvZCBzaG91bGQgYmUgcmVtb3ZlZC5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIFByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIHByb2plY3QgaWQgKG9yIGBudWxsYClcbiAgICAgKi9cbiAgICBhc3luYyBnZXRQcm9qZWN0SWRPcHRpb25hbCgpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBhd2FpdCB0aGlzLmdldFByb2plY3RJZCgpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICBpZiAoZSBpbnN0YW5jZW9mIEVycm9yICYmXG4gICAgICAgICAgICAgICAgZS5tZXNzYWdlID09PSBHb29nbGVBdXRoRXhjZXB0aW9uTWVzc2FnZXMuTk9fUFJPSkVDVF9JRF9GT1VORCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvKlxuICAgICAqIEEgcHJpdmF0ZSBtZXRob2QgZm9yIGZpbmRpbmcgYW5kIGNhY2hpbmcgYSBwcm9qZWN0SWQuXG4gICAgICpcbiAgICAgKiBTdXBwb3J0cyBlbnZpcm9ubWVudHMgaW4gb3JkZXIgb2YgcHJlY2VkZW5jZTpcbiAgICAgKiAtIEdDTE9VRF9QUk9KRUNUIG9yIEdPT0dMRV9DTE9VRF9QUk9KRUNUIGVudmlyb25tZW50IHZhcmlhYmxlXG4gICAgICogLSBHT09HTEVfQVBQTElDQVRJT05fQ1JFREVOVElBTFMgSlNPTiBmaWxlXG4gICAgICogLSBDbG91ZCBTREs6IGBnY2xvdWQgY29uZmlnIGNvbmZpZy1oZWxwZXIgLS1mb3JtYXQganNvbmBcbiAgICAgKiAtIEdDRSBwcm9qZWN0IElEIGZyb20gbWV0YWRhdGEgc2VydmVyXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBwcm9qZWN0SWRcbiAgICAgKi9cbiAgICBhc3luYyBmaW5kQW5kQ2FjaGVQcm9qZWN0SWQoKSB7XG4gICAgICAgIGxldCBwcm9qZWN0SWQgPSBudWxsO1xuICAgICAgICBwcm9qZWN0SWQgfHwgKHByb2plY3RJZCA9IGF3YWl0IHRoaXMuZ2V0UHJvZHVjdGlvblByb2plY3RJZCgpKTtcbiAgICAgICAgcHJvamVjdElkIHx8IChwcm9qZWN0SWQgPSBhd2FpdCB0aGlzLmdldEZpbGVQcm9qZWN0SWQoKSk7XG4gICAgICAgIHByb2plY3RJZCB8fCAocHJvamVjdElkID0gYXdhaXQgdGhpcy5nZXREZWZhdWx0U2VydmljZVByb2plY3RJZCgpKTtcbiAgICAgICAgcHJvamVjdElkIHx8IChwcm9qZWN0SWQgPSBhd2FpdCB0aGlzLmdldEdDRVByb2plY3RJZCgpKTtcbiAgICAgICAgcHJvamVjdElkIHx8IChwcm9qZWN0SWQgPSBhd2FpdCB0aGlzLmdldEV4dGVybmFsQWNjb3VudENsaWVudFByb2plY3RJZCgpKTtcbiAgICAgICAgaWYgKHByb2plY3RJZCkge1xuICAgICAgICAgICAgdGhpcy5fY2FjaGVkUHJvamVjdElkID0gcHJvamVjdElkO1xuICAgICAgICAgICAgcmV0dXJuIHByb2plY3RJZDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihHb29nbGVBdXRoRXhjZXB0aW9uTWVzc2FnZXMuTk9fUFJPSkVDVF9JRF9GT1VORCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYXN5bmMgZ2V0UHJvamVjdElkQXN5bmMoKSB7XG4gICAgICAgIGlmICh0aGlzLl9jYWNoZWRQcm9qZWN0SWQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9jYWNoZWRQcm9qZWN0SWQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLl9maW5kUHJvamVjdElkUHJvbWlzZSkge1xuICAgICAgICAgICAgdGhpcy5fZmluZFByb2plY3RJZFByb21pc2UgPSB0aGlzLmZpbmRBbmRDYWNoZVByb2plY3RJZCgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9maW5kUHJvamVjdElkUHJvbWlzZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0cmlldmVzIGEgdW5pdmVyc2UgZG9tYWluIGZyb20gdGhlIG1ldGFkYXRhIHNlcnZlciB2aWFcbiAgICAgKiB7QGxpbmsgZ2NwTWV0YWRhdGEudW5pdmVyc2V9LlxuICAgICAqXG4gICAgICogQHJldHVybnMgYSB1bml2ZXJzZSBkb21haW5cbiAgICAgKi9cbiAgICBhc3luYyBnZXRVbml2ZXJzZURvbWFpbkZyb21NZXRhZGF0YVNlcnZlcigpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBsZXQgdW5pdmVyc2VEb21haW47XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB1bml2ZXJzZURvbWFpbiA9IGF3YWl0IGdjcE1ldGFkYXRhLnVuaXZlcnNlKCd1bml2ZXJzZV9kb21haW4nKTtcbiAgICAgICAgICAgIHVuaXZlcnNlRG9tYWluIHx8ICh1bml2ZXJzZURvbWFpbiA9IGF1dGhjbGllbnRfMS5ERUZBVUxUX1VOSVZFUlNFKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgaWYgKGUgJiYgKChfYSA9IGUgPT09IG51bGwgfHwgZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZS5yZXNwb25zZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnN0YXR1cykgPT09IDQwNCkge1xuICAgICAgICAgICAgICAgIHVuaXZlcnNlRG9tYWluID0gYXV0aGNsaWVudF8xLkRFRkFVTFRfVU5JVkVSU0U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1bml2ZXJzZURvbWFpbjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0cmlldmVzLCBjYWNoZXMsIGFuZCByZXR1cm5zIHRoZSB1bml2ZXJzZSBkb21haW4gaW4gdGhlIGZvbGxvd2luZyBvcmRlclxuICAgICAqIG9mIHByZWNlZGVuY2U6XG4gICAgICogLSBUaGUgdW5pdmVyc2UgZG9tYWluIGluIHtAbGluayBHb29nbGVBdXRoLmNsaWVudE9wdGlvbnN9XG4gICAgICogLSBBbiBleGlzdGluZyBvciBBREMge0BsaW5rIEF1dGhDbGllbnR9J3MgdW5pdmVyc2UgZG9tYWluXG4gICAgICogLSB7QGxpbmsgZ2NwTWV0YWRhdGEudW5pdmVyc2V9LCBpZiB7QGxpbmsgQ29tcHV0ZX0gY2xpZW50XG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBUaGUgdW5pdmVyc2UgZG9tYWluXG4gICAgICovXG4gICAgYXN5bmMgZ2V0VW5pdmVyc2VEb21haW4oKSB7XG4gICAgICAgIGxldCB1bml2ZXJzZURvbWFpbiA9ICgwLCB1dGlsXzEub3JpZ2luYWxPckNhbWVsT3B0aW9ucykodGhpcy5jbGllbnRPcHRpb25zKS5nZXQoJ3VuaXZlcnNlX2RvbWFpbicpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdW5pdmVyc2VEb21haW4gIT09IG51bGwgJiYgdW5pdmVyc2VEb21haW4gIT09IHZvaWQgMCA/IHVuaXZlcnNlRG9tYWluIDogKHVuaXZlcnNlRG9tYWluID0gKGF3YWl0IHRoaXMuZ2V0Q2xpZW50KCkpLnVuaXZlcnNlRG9tYWluKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoX2EpIHtcbiAgICAgICAgICAgIC8vIGNsaWVudCBvciBBREMgaXMgbm90IGF2YWlsYWJsZVxuICAgICAgICAgICAgdW5pdmVyc2VEb21haW4gIT09IG51bGwgJiYgdW5pdmVyc2VEb21haW4gIT09IHZvaWQgMCA/IHVuaXZlcnNlRG9tYWluIDogKHVuaXZlcnNlRG9tYWluID0gYXV0aGNsaWVudF8xLkRFRkFVTFRfVU5JVkVSU0UpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1bml2ZXJzZURvbWFpbjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHJldHVybnMgQW55IHNjb3BlcyAodXNlci1zcGVjaWZpZWQgb3IgZGVmYXVsdCBzY29wZXMgc3BlY2lmaWVkIGJ5IHRoZVxuICAgICAqICAgY2xpZW50IGxpYnJhcnkpIHRoYXQgbmVlZCB0byBiZSBzZXQgb24gdGhlIGN1cnJlbnQgQXV0aCBjbGllbnQuXG4gICAgICovXG4gICAgZ2V0QW55U2NvcGVzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zY29wZXMgfHwgdGhpcy5kZWZhdWx0U2NvcGVzO1xuICAgIH1cbiAgICBnZXRBcHBsaWNhdGlvbkRlZmF1bHQob3B0aW9uc09yQ2FsbGJhY2sgPSB7fSwgY2FsbGJhY2spIHtcbiAgICAgICAgbGV0IG9wdGlvbnM7XG4gICAgICAgIGlmICh0eXBlb2Ygb3B0aW9uc09yQ2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrID0gb3B0aW9uc09yQ2FsbGJhY2s7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBvcHRpb25zID0gb3B0aW9uc09yQ2FsbGJhY2s7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICB0aGlzLmdldEFwcGxpY2F0aW9uRGVmYXVsdEFzeW5jKG9wdGlvbnMpLnRoZW4ociA9PiBjYWxsYmFjayhudWxsLCByLmNyZWRlbnRpYWwsIHIucHJvamVjdElkKSwgY2FsbGJhY2spO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0QXBwbGljYXRpb25EZWZhdWx0QXN5bmMob3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYXN5bmMgZ2V0QXBwbGljYXRpb25EZWZhdWx0QXN5bmMob3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIC8vIElmIHdlJ3ZlIGFscmVhZHkgZ290IGEgY2FjaGVkIGNyZWRlbnRpYWwsIHJldHVybiBpdC5cbiAgICAgICAgLy8gVGhpcyB3aWxsIGFsc28gcHJlc2VydmUgb25lJ3MgY29uZmlndXJlZCBxdW90YSBwcm9qZWN0LCBpbiBjYXNlIHRoZXlcbiAgICAgICAgLy8gc2V0IG9uZSBkaXJlY3RseSBvbiB0aGUgY3JlZGVudGlhbCBwcmV2aW91c2x5LlxuICAgICAgICBpZiAodGhpcy5jYWNoZWRDcmVkZW50aWFsKSB7XG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5wcmVwYXJlQW5kQ2FjaGVBREModGhpcy5jYWNoZWRDcmVkZW50aWFsKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBTaW5jZSB0aGlzIGlzIGEgJ25ldycgQURDIHRvIGNhY2hlIHdlIHdpbGwgdXNlIHRoZSBlbnZpcm9ubWVudCB2YXJpYWJsZVxuICAgICAgICAvLyBpZiBpdCdzIGF2YWlsYWJsZS4gV2UgcHJlZmVyIHRoaXMgdmFsdWUgb3ZlciB0aGUgdmFsdWUgZnJvbSBBREMuXG4gICAgICAgIGNvbnN0IHF1b3RhUHJvamVjdElkT3ZlcnJpZGUgPSBwcm9jZXNzLmVudlsnR09PR0xFX0NMT1VEX1FVT1RBX1BST0pFQ1QnXTtcbiAgICAgICAgbGV0IGNyZWRlbnRpYWw7XG4gICAgICAgIC8vIENoZWNrIGZvciB0aGUgZXhpc3RlbmNlIG9mIGEgbG9jYWwgZW52aXJvbm1lbnQgdmFyaWFibGUgcG9pbnRpbmcgdG8gdGhlXG4gICAgICAgIC8vIGxvY2F0aW9uIG9mIHRoZSBjcmVkZW50aWFsIGZpbGUuIFRoaXMgaXMgdHlwaWNhbGx5IHVzZWQgaW4gbG9jYWxcbiAgICAgICAgLy8gZGV2ZWxvcGVyIHNjZW5hcmlvcy5cbiAgICAgICAgY3JlZGVudGlhbCA9XG4gICAgICAgICAgICBhd2FpdCB0aGlzLl90cnlHZXRBcHBsaWNhdGlvbkNyZWRlbnRpYWxzRnJvbUVudmlyb25tZW50VmFyaWFibGUob3B0aW9ucyk7XG4gICAgICAgIGlmIChjcmVkZW50aWFsKSB7XG4gICAgICAgICAgICBpZiAoY3JlZGVudGlhbCBpbnN0YW5jZW9mIGp3dGNsaWVudF8xLkpXVCkge1xuICAgICAgICAgICAgICAgIGNyZWRlbnRpYWwuc2NvcGVzID0gdGhpcy5zY29wZXM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjcmVkZW50aWFsIGluc3RhbmNlb2YgYmFzZWV4dGVybmFsY2xpZW50XzEuQmFzZUV4dGVybmFsQWNjb3VudENsaWVudCkge1xuICAgICAgICAgICAgICAgIGNyZWRlbnRpYWwuc2NvcGVzID0gdGhpcy5nZXRBbnlTY29wZXMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBhd2FpdCB0aGlzLnByZXBhcmVBbmRDYWNoZUFEQyhjcmVkZW50aWFsLCBxdW90YVByb2plY3RJZE92ZXJyaWRlKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBMb29rIGluIHRoZSB3ZWxsLWtub3duIGNyZWRlbnRpYWwgZmlsZSBsb2NhdGlvbi5cbiAgICAgICAgY3JlZGVudGlhbCA9XG4gICAgICAgICAgICBhd2FpdCB0aGlzLl90cnlHZXRBcHBsaWNhdGlvbkNyZWRlbnRpYWxzRnJvbVdlbGxLbm93bkZpbGUob3B0aW9ucyk7XG4gICAgICAgIGlmIChjcmVkZW50aWFsKSB7XG4gICAgICAgICAgICBpZiAoY3JlZGVudGlhbCBpbnN0YW5jZW9mIGp3dGNsaWVudF8xLkpXVCkge1xuICAgICAgICAgICAgICAgIGNyZWRlbnRpYWwuc2NvcGVzID0gdGhpcy5zY29wZXM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjcmVkZW50aWFsIGluc3RhbmNlb2YgYmFzZWV4dGVybmFsY2xpZW50XzEuQmFzZUV4dGVybmFsQWNjb3VudENsaWVudCkge1xuICAgICAgICAgICAgICAgIGNyZWRlbnRpYWwuc2NvcGVzID0gdGhpcy5nZXRBbnlTY29wZXMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBhd2FpdCB0aGlzLnByZXBhcmVBbmRDYWNoZUFEQyhjcmVkZW50aWFsLCBxdW90YVByb2plY3RJZE92ZXJyaWRlKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBEZXRlcm1pbmUgaWYgd2UncmUgcnVubmluZyBvbiBHQ0UuXG4gICAgICAgIGlmIChhd2FpdCB0aGlzLl9jaGVja0lzR0NFKCkpIHtcbiAgICAgICAgICAgIC8vIHNldCB1bml2ZXJzZSBkb21haW4gZm9yIENvbXB1dGUgY2xpZW50XG4gICAgICAgICAgICBpZiAoISgwLCB1dGlsXzEub3JpZ2luYWxPckNhbWVsT3B0aW9ucykob3B0aW9ucykuZ2V0KCd1bml2ZXJzZV9kb21haW4nKSkge1xuICAgICAgICAgICAgICAgIG9wdGlvbnMudW5pdmVyc2VEb21haW4gPVxuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmdldFVuaXZlcnNlRG9tYWluRnJvbU1ldGFkYXRhU2VydmVyKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvcHRpb25zLnNjb3BlcyA9IHRoaXMuZ2V0QW55U2NvcGVzKCk7XG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5wcmVwYXJlQW5kQ2FjaGVBREMobmV3IGNvbXB1dGVjbGllbnRfMS5Db21wdXRlKG9wdGlvbnMpLCBxdW90YVByb2plY3RJZE92ZXJyaWRlKTtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NvdWxkIG5vdCBsb2FkIHRoZSBkZWZhdWx0IGNyZWRlbnRpYWxzLiBCcm93c2UgdG8gaHR0cHM6Ly9jbG91ZC5nb29nbGUuY29tL2RvY3MvYXV0aGVudGljYXRpb24vZ2V0dGluZy1zdGFydGVkIGZvciBtb3JlIGluZm9ybWF0aW9uLicpO1xuICAgIH1cbiAgICBhc3luYyBwcmVwYXJlQW5kQ2FjaGVBREMoY3JlZGVudGlhbCwgcXVvdGFQcm9qZWN0SWRPdmVycmlkZSkge1xuICAgICAgICBjb25zdCBwcm9qZWN0SWQgPSBhd2FpdCB0aGlzLmdldFByb2plY3RJZE9wdGlvbmFsKCk7XG4gICAgICAgIGlmIChxdW90YVByb2plY3RJZE92ZXJyaWRlKSB7XG4gICAgICAgICAgICBjcmVkZW50aWFsLnF1b3RhUHJvamVjdElkID0gcXVvdGFQcm9qZWN0SWRPdmVycmlkZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNhY2hlZENyZWRlbnRpYWwgPSBjcmVkZW50aWFsO1xuICAgICAgICByZXR1cm4geyBjcmVkZW50aWFsLCBwcm9qZWN0SWQgfTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBhdXRoIGxheWVyIGlzIHJ1bm5pbmcgb24gR29vZ2xlIENvbXB1dGUgRW5naW5lLlxuICAgICAqIENoZWNrcyBmb3IgR0NQIFJlc2lkZW5jeSwgdGhlbiBmYWxsYmFjayB0byBjaGVja2luZyBpZiBtZXRhZGF0YSBzZXJ2ZXJcbiAgICAgKiBpcyBhdmFpbGFibGUuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBBIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIHRoZSBib29sZWFuLlxuICAgICAqIEBhcGkgcHJpdmF0ZVxuICAgICAqL1xuICAgIGFzeW5jIF9jaGVja0lzR0NFKCkge1xuICAgICAgICBpZiAodGhpcy5jaGVja0lzR0NFID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuY2hlY2tJc0dDRSA9XG4gICAgICAgICAgICAgICAgZ2NwTWV0YWRhdGEuZ2V0R0NQUmVzaWRlbmN5KCkgfHwgKGF3YWl0IGdjcE1ldGFkYXRhLmlzQXZhaWxhYmxlKCkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmNoZWNrSXNHQ0U7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEF0dGVtcHRzIHRvIGxvYWQgZGVmYXVsdCBjcmVkZW50aWFscyBmcm9tIHRoZSBlbnZpcm9ubWVudCB2YXJpYWJsZSBwYXRoLi5cbiAgICAgKiBAcmV0dXJucyBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCB0aGUgT0F1dGgyQ2xpZW50IG9yIG51bGwuXG4gICAgICogQGFwaSBwcml2YXRlXG4gICAgICovXG4gICAgYXN5bmMgX3RyeUdldEFwcGxpY2F0aW9uQ3JlZGVudGlhbHNGcm9tRW52aXJvbm1lbnRWYXJpYWJsZShvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IGNyZWRlbnRpYWxzUGF0aCA9IHByb2Nlc3MuZW52WydHT09HTEVfQVBQTElDQVRJT05fQ1JFREVOVElBTFMnXSB8fFxuICAgICAgICAgICAgcHJvY2Vzcy5lbnZbJ2dvb2dsZV9hcHBsaWNhdGlvbl9jcmVkZW50aWFscyddO1xuICAgICAgICBpZiAoIWNyZWRlbnRpYWxzUGF0aCB8fCBjcmVkZW50aWFsc1BhdGgubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2dldEFwcGxpY2F0aW9uQ3JlZGVudGlhbHNGcm9tRmlsZVBhdGgoY3JlZGVudGlhbHNQYXRoLCBvcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgaWYgKGUgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICAgICAgICAgIGUubWVzc2FnZSA9IGBVbmFibGUgdG8gcmVhZCB0aGUgY3JlZGVudGlhbCBmaWxlIHNwZWNpZmllZCBieSB0aGUgR09PR0xFX0FQUExJQ0FUSU9OX0NSRURFTlRJQUxTIGVudmlyb25tZW50IHZhcmlhYmxlOiAke2UubWVzc2FnZX1gO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBBdHRlbXB0cyB0byBsb2FkIGRlZmF1bHQgY3JlZGVudGlhbHMgZnJvbSBhIHdlbGwta25vd24gZmlsZSBsb2NhdGlvblxuICAgICAqIEByZXR1cm4gUHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggdGhlIE9BdXRoMkNsaWVudCBvciBudWxsLlxuICAgICAqIEBhcGkgcHJpdmF0ZVxuICAgICAqL1xuICAgIGFzeW5jIF90cnlHZXRBcHBsaWNhdGlvbkNyZWRlbnRpYWxzRnJvbVdlbGxLbm93bkZpbGUob3B0aW9ucykge1xuICAgICAgICAvLyBGaXJzdCwgZmlndXJlIG91dCB0aGUgbG9jYXRpb24gb2YgdGhlIGZpbGUsIGRlcGVuZGluZyB1cG9uIHRoZSBPUyB0eXBlLlxuICAgICAgICBsZXQgbG9jYXRpb24gPSBudWxsO1xuICAgICAgICBpZiAodGhpcy5faXNXaW5kb3dzKCkpIHtcbiAgICAgICAgICAgIC8vIFdpbmRvd3NcbiAgICAgICAgICAgIGxvY2F0aW9uID0gcHJvY2Vzcy5lbnZbJ0FQUERBVEEnXTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIExpbnV4IG9yIE1hY1xuICAgICAgICAgICAgY29uc3QgaG9tZSA9IHByb2Nlc3MuZW52WydIT01FJ107XG4gICAgICAgICAgICBpZiAoaG9tZSkge1xuICAgICAgICAgICAgICAgIGxvY2F0aW9uID0gcGF0aC5qb2luKGhvbWUsICcuY29uZmlnJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gSWYgd2UgZm91bmQgdGhlIHJvb3QgcGF0aCwgZXhwYW5kIGl0LlxuICAgICAgICBpZiAobG9jYXRpb24pIHtcbiAgICAgICAgICAgIGxvY2F0aW9uID0gcGF0aC5qb2luKGxvY2F0aW9uLCAnZ2Nsb3VkJywgJ2FwcGxpY2F0aW9uX2RlZmF1bHRfY3JlZGVudGlhbHMuanNvbicpO1xuICAgICAgICAgICAgaWYgKCFmcy5leGlzdHNTeW5jKGxvY2F0aW9uKSkge1xuICAgICAgICAgICAgICAgIGxvY2F0aW9uID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBUaGUgZmlsZSBkb2VzIG5vdCBleGlzdC5cbiAgICAgICAgaWYgKCFsb2NhdGlvbikge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgLy8gVGhlIGZpbGUgc2VlbXMgdG8gZXhpc3QuIFRyeSB0byB1c2UgaXQuXG4gICAgICAgIGNvbnN0IGNsaWVudCA9IGF3YWl0IHRoaXMuX2dldEFwcGxpY2F0aW9uQ3JlZGVudGlhbHNGcm9tRmlsZVBhdGgobG9jYXRpb24sIG9wdGlvbnMpO1xuICAgICAgICByZXR1cm4gY2xpZW50O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBdHRlbXB0cyB0byBsb2FkIGRlZmF1bHQgY3JlZGVudGlhbHMgZnJvbSBhIGZpbGUgYXQgdGhlIGdpdmVuIHBhdGguLlxuICAgICAqIEBwYXJhbSBmaWxlUGF0aCBUaGUgcGF0aCB0byB0aGUgZmlsZSB0byByZWFkLlxuICAgICAqIEByZXR1cm5zIFByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIHRoZSBPQXV0aDJDbGllbnRcbiAgICAgKiBAYXBpIHByaXZhdGVcbiAgICAgKi9cbiAgICBhc3luYyBfZ2V0QXBwbGljYXRpb25DcmVkZW50aWFsc0Zyb21GaWxlUGF0aChmaWxlUGF0aCwgb3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIC8vIE1ha2Ugc3VyZSB0aGUgcGF0aCBsb29rcyBsaWtlIGEgc3RyaW5nLlxuICAgICAgICBpZiAoIWZpbGVQYXRoIHx8IGZpbGVQYXRoLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgZmlsZSBwYXRoIGlzIGludmFsaWQuJyk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gTWFrZSBzdXJlIHRoZXJlIGlzIGEgZmlsZSBhdCB0aGUgcGF0aC4gbHN0YXRTeW5jIHdpbGwgdGhyb3cgaWYgdGhlcmUgaXNcbiAgICAgICAgLy8gbm90aGluZyB0aGVyZS5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFJlc29sdmUgcGF0aCB0byBhY3R1YWwgZmlsZSBpbiBjYXNlIG9mIHN5bWxpbmsuIEV4cGVjdCBhIHRocm93biBlcnJvclxuICAgICAgICAgICAgLy8gaWYgbm90IHJlc29sdmFibGUuXG4gICAgICAgICAgICBmaWxlUGF0aCA9IGZzLnJlYWxwYXRoU3luYyhmaWxlUGF0aCk7XG4gICAgICAgICAgICBpZiAoIWZzLmxzdGF0U3luYyhmaWxlUGF0aCkuaXNGaWxlKCkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBpZiAoZXJyIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgICAgICAgICBlcnIubWVzc2FnZSA9IGBUaGUgZmlsZSBhdCAke2ZpbGVQYXRofSBkb2VzIG5vdCBleGlzdCwgb3IgaXQgaXMgbm90IGEgZmlsZS4gJHtlcnIubWVzc2FnZX1gO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICB9XG4gICAgICAgIC8vIE5vdyBvcGVuIGEgcmVhZCBzdHJlYW0gb24gdGhlIGZpbGUsIGFuZCBwYXJzZSBpdC5cbiAgICAgICAgY29uc3QgcmVhZFN0cmVhbSA9IGZzLmNyZWF0ZVJlYWRTdHJlYW0oZmlsZVBhdGgpO1xuICAgICAgICByZXR1cm4gdGhpcy5mcm9tU3RyZWFtKHJlYWRTdHJlYW0sIG9wdGlvbnMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBjcmVkZW50aWFscyBpbnN0YW5jZSB1c2luZyBhIGdpdmVuIGltcGVyc29uYXRlZCBpbnB1dCBvcHRpb25zLlxuICAgICAqIEBwYXJhbSBqc29uIFRoZSBpbXBlcnNvbmF0ZWQgaW5wdXQgb2JqZWN0LlxuICAgICAqIEByZXR1cm5zIEpXVCBvciBVc2VyUmVmcmVzaCBDbGllbnQgd2l0aCBkYXRhXG4gICAgICovXG4gICAgZnJvbUltcGVyc29uYXRlZEpTT04oanNvbikge1xuICAgICAgICB2YXIgX2EsIF9iLCBfYywgX2QsIF9lO1xuICAgICAgICBpZiAoIWpzb24pIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTXVzdCBwYXNzIGluIGEgSlNPTiBvYmplY3QgY29udGFpbmluZyBhbiAgaW1wZXJzb25hdGVkIHJlZnJlc2ggdG9rZW4nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoanNvbi50eXBlICE9PSBpbXBlcnNvbmF0ZWRfMS5JTVBFUlNPTkFURURfQUNDT1VOVF9UWVBFKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFRoZSBpbmNvbWluZyBKU09OIG9iamVjdCBkb2VzIG5vdCBoYXZlIHRoZSBcIiR7aW1wZXJzb25hdGVkXzEuSU1QRVJTT05BVEVEX0FDQ09VTlRfVFlQRX1cIiB0eXBlYCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFqc29uLnNvdXJjZV9jcmVkZW50aWFscykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgaW5jb21pbmcgSlNPTiBvYmplY3QgZG9lcyBub3QgY29udGFpbiBhIHNvdXJjZV9jcmVkZW50aWFscyBmaWVsZCcpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghanNvbi5zZXJ2aWNlX2FjY291bnRfaW1wZXJzb25hdGlvbl91cmwpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVGhlIGluY29taW5nIEpTT04gb2JqZWN0IGRvZXMgbm90IGNvbnRhaW4gYSBzZXJ2aWNlX2FjY291bnRfaW1wZXJzb25hdGlvbl91cmwgZmllbGQnKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBDcmVhdGUgc291cmNlIGNsaWVudCBmb3IgaW1wZXJzb25hdGlvblxuICAgICAgICBjb25zdCBzb3VyY2VDbGllbnQgPSBuZXcgcmVmcmVzaGNsaWVudF8xLlVzZXJSZWZyZXNoQ2xpZW50KCk7XG4gICAgICAgIHNvdXJjZUNsaWVudC5mcm9tSlNPTihqc29uLnNvdXJjZV9jcmVkZW50aWFscyk7XG4gICAgICAgIGlmICgoKF9hID0ganNvbi5zZXJ2aWNlX2FjY291bnRfaW1wZXJzb25hdGlvbl91cmwpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5sZW5ndGgpID4gMjU2KSB7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFByZXZlbnRzIERPUyBhdHRhY2tzLlxuICAgICAgICAgICAgICogQHNlZSB7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2dvb2dsZWFwaXMvZ29vZ2xlLWF1dGgtbGlicmFyeS1ub2RlanMvc2VjdXJpdHkvY29kZS1zY2FubmluZy84NX1cbiAgICAgICAgICAgICAqKi9cbiAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKGBUYXJnZXQgcHJpbmNpcGFsIGlzIHRvbyBsb25nOiAke2pzb24uc2VydmljZV9hY2NvdW50X2ltcGVyc29uYXRpb25fdXJsfWApO1xuICAgICAgICB9XG4gICAgICAgIC8vIEV4dHJlYWN0IHNlcnZpY2UgYWNjb3VudCBmcm9tIHNlcnZpY2VfYWNjb3VudF9pbXBlcnNvbmF0aW9uX3VybFxuICAgICAgICBjb25zdCB0YXJnZXRQcmluY2lwYWwgPSAoX2MgPSAoX2IgPSAvKD88dGFyZ2V0PlteL10rKTpnZW5lcmF0ZUFjY2Vzc1Rva2VuJC8uZXhlYyhqc29uLnNlcnZpY2VfYWNjb3VudF9pbXBlcnNvbmF0aW9uX3VybCkpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5ncm91cHMpID09PSBudWxsIHx8IF9jID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYy50YXJnZXQ7XG4gICAgICAgIGlmICghdGFyZ2V0UHJpbmNpcGFsKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihgQ2Fubm90IGV4dHJhY3QgdGFyZ2V0IHByaW5jaXBhbCBmcm9tICR7anNvbi5zZXJ2aWNlX2FjY291bnRfaW1wZXJzb25hdGlvbl91cmx9YCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdGFyZ2V0U2NvcGVzID0gKF9kID0gdGhpcy5nZXRBbnlTY29wZXMoKSkgIT09IG51bGwgJiYgX2QgIT09IHZvaWQgMCA/IF9kIDogW107XG4gICAgICAgIGNvbnN0IGNsaWVudCA9IG5ldyBpbXBlcnNvbmF0ZWRfMS5JbXBlcnNvbmF0ZWQoe1xuICAgICAgICAgICAgLi4uanNvbixcbiAgICAgICAgICAgIGRlbGVnYXRlczogKF9lID0ganNvbi5kZWxlZ2F0ZXMpICE9PSBudWxsICYmIF9lICE9PSB2b2lkIDAgPyBfZSA6IFtdLFxuICAgICAgICAgICAgc291cmNlQ2xpZW50OiBzb3VyY2VDbGllbnQsXG4gICAgICAgICAgICB0YXJnZXRQcmluY2lwYWw6IHRhcmdldFByaW5jaXBhbCxcbiAgICAgICAgICAgIHRhcmdldFNjb3BlczogQXJyYXkuaXNBcnJheSh0YXJnZXRTY29wZXMpID8gdGFyZ2V0U2NvcGVzIDogW3RhcmdldFNjb3Blc10sXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gY2xpZW50O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBjcmVkZW50aWFscyBpbnN0YW5jZSB1c2luZyB0aGUgZ2l2ZW4gaW5wdXQgb3B0aW9ucy5cbiAgICAgKiBAcGFyYW0ganNvbiBUaGUgaW5wdXQgb2JqZWN0LlxuICAgICAqIEBwYXJhbSBvcHRpb25zIFRoZSBKV1Qgb3IgVXNlclJlZnJlc2ggb3B0aW9ucyBmb3IgdGhlIGNsaWVudFxuICAgICAqIEByZXR1cm5zIEpXVCBvciBVc2VyUmVmcmVzaCBDbGllbnQgd2l0aCBkYXRhXG4gICAgICovXG4gICAgZnJvbUpTT04oanNvbiwgb3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIGxldCBjbGllbnQ7XG4gICAgICAgIC8vIHVzZXIncyBwcmVmZXJyZWQgdW5pdmVyc2UgZG9tYWluXG4gICAgICAgIGNvbnN0IHByZWZlcnJlZFVuaXZlcnNlRG9tYWluID0gKDAsIHV0aWxfMS5vcmlnaW5hbE9yQ2FtZWxPcHRpb25zKShvcHRpb25zKS5nZXQoJ3VuaXZlcnNlX2RvbWFpbicpO1xuICAgICAgICBpZiAoanNvbi50eXBlID09PSByZWZyZXNoY2xpZW50XzEuVVNFUl9SRUZSRVNIX0FDQ09VTlRfVFlQRSkge1xuICAgICAgICAgICAgY2xpZW50ID0gbmV3IHJlZnJlc2hjbGllbnRfMS5Vc2VyUmVmcmVzaENsaWVudChvcHRpb25zKTtcbiAgICAgICAgICAgIGNsaWVudC5mcm9tSlNPTihqc29uKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChqc29uLnR5cGUgPT09IGltcGVyc29uYXRlZF8xLklNUEVSU09OQVRFRF9BQ0NPVU5UX1RZUEUpIHtcbiAgICAgICAgICAgIGNsaWVudCA9IHRoaXMuZnJvbUltcGVyc29uYXRlZEpTT04oanNvbik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoanNvbi50eXBlID09PSBiYXNlZXh0ZXJuYWxjbGllbnRfMS5FWFRFUk5BTF9BQ0NPVU5UX1RZUEUpIHtcbiAgICAgICAgICAgIGNsaWVudCA9IGV4dGVybmFsY2xpZW50XzEuRXh0ZXJuYWxBY2NvdW50Q2xpZW50LmZyb21KU09OKGpzb24sIG9wdGlvbnMpO1xuICAgICAgICAgICAgY2xpZW50LnNjb3BlcyA9IHRoaXMuZ2V0QW55U2NvcGVzKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoanNvbi50eXBlID09PSBleHRlcm5hbEFjY291bnRBdXRob3JpemVkVXNlckNsaWVudF8xLkVYVEVSTkFMX0FDQ09VTlRfQVVUSE9SSVpFRF9VU0VSX1RZUEUpIHtcbiAgICAgICAgICAgIGNsaWVudCA9IG5ldyBleHRlcm5hbEFjY291bnRBdXRob3JpemVkVXNlckNsaWVudF8xLkV4dGVybmFsQWNjb3VudEF1dGhvcml6ZWRVc2VyQ2xpZW50KGpzb24sIG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgb3B0aW9ucy5zY29wZXMgPSB0aGlzLnNjb3BlcztcbiAgICAgICAgICAgIGNsaWVudCA9IG5ldyBqd3RjbGllbnRfMS5KV1Qob3B0aW9ucyk7XG4gICAgICAgICAgICB0aGlzLnNldEdhcGljSldUVmFsdWVzKGNsaWVudCk7XG4gICAgICAgICAgICBjbGllbnQuZnJvbUpTT04oanNvbik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHByZWZlcnJlZFVuaXZlcnNlRG9tYWluKSB7XG4gICAgICAgICAgICBjbGllbnQudW5pdmVyc2VEb21haW4gPSBwcmVmZXJyZWRVbml2ZXJzZURvbWFpbjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY2xpZW50O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm4gYSBKV1Qgb3IgVXNlclJlZnJlc2hDbGllbnQgZnJvbSBKYXZhU2NyaXB0IG9iamVjdCwgY2FjaGluZyBib3RoIHRoZVxuICAgICAqIG9iamVjdCB1c2VkIHRvIGluc3RhbnRpYXRlIGFuZCB0aGUgY2xpZW50LlxuICAgICAqIEBwYXJhbSBqc29uIFRoZSBpbnB1dCBvYmplY3QuXG4gICAgICogQHBhcmFtIG9wdGlvbnMgVGhlIEpXVCBvciBVc2VyUmVmcmVzaCBvcHRpb25zIGZvciB0aGUgY2xpZW50XG4gICAgICogQHJldHVybnMgSldUIG9yIFVzZXJSZWZyZXNoIENsaWVudCB3aXRoIGRhdGFcbiAgICAgKi9cbiAgICBfY2FjaGVDbGllbnRGcm9tSlNPTihqc29uLCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IGNsaWVudCA9IHRoaXMuZnJvbUpTT04oanNvbiwgb3B0aW9ucyk7XG4gICAgICAgIC8vIGNhY2hlIGJvdGggcmF3IGRhdGEgdXNlZCB0byBpbnN0YW50aWF0ZSBjbGllbnQgYW5kIGNsaWVudCBpdHNlbGYuXG4gICAgICAgIHRoaXMuanNvbkNvbnRlbnQgPSBqc29uO1xuICAgICAgICB0aGlzLmNhY2hlZENyZWRlbnRpYWwgPSBjbGllbnQ7XG4gICAgICAgIHJldHVybiBjbGllbnQ7XG4gICAgfVxuICAgIGZyb21TdHJlYW0oaW5wdXRTdHJlYW0sIG9wdGlvbnNPckNhbGxiYWNrID0ge30sIGNhbGxiYWNrKSB7XG4gICAgICAgIGxldCBvcHRpb25zID0ge307XG4gICAgICAgIGlmICh0eXBlb2Ygb3B0aW9uc09yQ2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrID0gb3B0aW9uc09yQ2FsbGJhY2s7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBvcHRpb25zID0gb3B0aW9uc09yQ2FsbGJhY2s7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICB0aGlzLmZyb21TdHJlYW1Bc3luYyhpbnB1dFN0cmVhbSwgb3B0aW9ucykudGhlbihyID0+IGNhbGxiYWNrKG51bGwsIHIpLCBjYWxsYmFjayk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5mcm9tU3RyZWFtQXN5bmMoaW5wdXRTdHJlYW0sIG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZyb21TdHJlYW1Bc3luYyhpbnB1dFN0cmVhbSwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgaWYgKCFpbnB1dFN0cmVhbSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTXVzdCBwYXNzIGluIGEgc3RyZWFtIGNvbnRhaW5pbmcgdGhlIEdvb2dsZSBhdXRoIHNldHRpbmdzLicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IHMgPSAnJztcbiAgICAgICAgICAgIGlucHV0U3RyZWFtXG4gICAgICAgICAgICAgICAgLnNldEVuY29kaW5nKCd1dGY4JylcbiAgICAgICAgICAgICAgICAub24oJ2Vycm9yJywgcmVqZWN0KVxuICAgICAgICAgICAgICAgIC5vbignZGF0YScsIGNodW5rID0+IChzICs9IGNodW5rKSlcbiAgICAgICAgICAgICAgICAub24oJ2VuZCcsICgpID0+IHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZGF0YSA9IEpTT04ucGFyc2Uocyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByID0gdGhpcy5fY2FjaGVDbGllbnRGcm9tSlNPTihkYXRhLCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlKHIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIElmIHdlIGZhaWxlZCBwYXJzaW5nIHRoaXMua2V5RmlsZU5hbWUsIGFzc3VtZSB0aGF0IGl0XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBpcyBhIFBFTSBvciBwMTIgY2VydGlmaWNhdGU6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMua2V5RmlsZW5hbWUpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY2xpZW50ID0gbmV3IGp3dGNsaWVudF8xLkpXVCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLi4udGhpcy5jbGllbnRPcHRpb25zLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleUZpbGU6IHRoaXMua2V5RmlsZW5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2FjaGVkQ3JlZGVudGlhbCA9IGNsaWVudDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0R2FwaWNKV1RWYWx1ZXMoY2xpZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlKGNsaWVudCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVqZWN0KGVycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBjcmVkZW50aWFscyBpbnN0YW5jZSB1c2luZyB0aGUgZ2l2ZW4gQVBJIGtleSBzdHJpbmcuXG4gICAgICogQHBhcmFtIGFwaUtleSBUaGUgQVBJIGtleSBzdHJpbmdcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyBBbiBvcHRpb25hbCBvcHRpb25zIG9iamVjdC5cbiAgICAgKiBAcmV0dXJucyBBIEpXVCBsb2FkZWQgZnJvbSB0aGUga2V5XG4gICAgICovXG4gICAgZnJvbUFQSUtleShhcGlLZXksIG9wdGlvbnMpIHtcbiAgICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgICAgIGNvbnN0IGNsaWVudCA9IG5ldyBqd3RjbGllbnRfMS5KV1Qob3B0aW9ucyk7XG4gICAgICAgIGNsaWVudC5mcm9tQVBJS2V5KGFwaUtleSk7XG4gICAgICAgIHJldHVybiBjbGllbnQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIERldGVybWluZXMgd2hldGhlciB0aGUgY3VycmVudCBvcGVyYXRpbmcgc3lzdGVtIGlzIFdpbmRvd3MuXG4gICAgICogQGFwaSBwcml2YXRlXG4gICAgICovXG4gICAgX2lzV2luZG93cygpIHtcbiAgICAgICAgY29uc3Qgc3lzID0gb3MucGxhdGZvcm0oKTtcbiAgICAgICAgaWYgKHN5cyAmJiBzeXMubGVuZ3RoID49IDMpIHtcbiAgICAgICAgICAgIGlmIChzeXMuc3Vic3RyaW5nKDAsIDMpLnRvTG93ZXJDYXNlKCkgPT09ICd3aW4nKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSdW4gdGhlIEdvb2dsZSBDbG91ZCBTREsgY29tbWFuZCB0aGF0IHByaW50cyB0aGUgZGVmYXVsdCBwcm9qZWN0IElEXG4gICAgICovXG4gICAgYXN5bmMgZ2V0RGVmYXVsdFNlcnZpY2VQcm9qZWN0SWQoKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgICAgICAgICgwLCBjaGlsZF9wcm9jZXNzXzEuZXhlYykoJ2djbG91ZCBjb25maWcgY29uZmlnLWhlbHBlciAtLWZvcm1hdCBqc29uJywgKGVyciwgc3Rkb3V0KSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCFlcnIgJiYgc3Rkb3V0KSB7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwcm9qZWN0SWQgPSBKU09OLnBhcnNlKHN0ZG91dCkuY29uZmlndXJhdGlvbi5wcm9wZXJ0aWVzLmNvcmUucHJvamVjdDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUocHJvamVjdElkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWdub3JlIGVycm9yc1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJlc29sdmUobnVsbCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIExvYWRzIHRoZSBwcm9qZWN0IGlkIGZyb20gZW52aXJvbm1lbnQgdmFyaWFibGVzLlxuICAgICAqIEBhcGkgcHJpdmF0ZVxuICAgICAqL1xuICAgIGdldFByb2R1Y3Rpb25Qcm9qZWN0SWQoKSB7XG4gICAgICAgIHJldHVybiAocHJvY2Vzcy5lbnZbJ0dDTE9VRF9QUk9KRUNUJ10gfHxcbiAgICAgICAgICAgIHByb2Nlc3MuZW52WydHT09HTEVfQ0xPVURfUFJPSkVDVCddIHx8XG4gICAgICAgICAgICBwcm9jZXNzLmVudlsnZ2Nsb3VkX3Byb2plY3QnXSB8fFxuICAgICAgICAgICAgcHJvY2Vzcy5lbnZbJ2dvb2dsZV9jbG91ZF9wcm9qZWN0J10pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBMb2FkcyB0aGUgcHJvamVjdCBpZCBmcm9tIHRoZSBHT09HTEVfQVBQTElDQVRJT05fQ1JFREVOVElBTFMganNvbiBmaWxlLlxuICAgICAqIEBhcGkgcHJpdmF0ZVxuICAgICAqL1xuICAgIGFzeW5jIGdldEZpbGVQcm9qZWN0SWQoKSB7XG4gICAgICAgIGlmICh0aGlzLmNhY2hlZENyZWRlbnRpYWwpIHtcbiAgICAgICAgICAgIC8vIFRyeSB0byByZWFkIHRoZSBwcm9qZWN0IElEIGZyb20gdGhlIGNhY2hlZCBjcmVkZW50aWFscyBmaWxlXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jYWNoZWRDcmVkZW50aWFsLnByb2plY3RJZDtcbiAgICAgICAgfVxuICAgICAgICAvLyBFbnN1cmUgdGhlIHByb2plY3RJZCBpcyBsb2FkZWQgZnJvbSB0aGUga2V5RmlsZSBpZiBhdmFpbGFibGUuXG4gICAgICAgIGlmICh0aGlzLmtleUZpbGVuYW1lKSB7XG4gICAgICAgICAgICBjb25zdCBjcmVkcyA9IGF3YWl0IHRoaXMuZ2V0Q2xpZW50KCk7XG4gICAgICAgICAgICBpZiAoY3JlZHMgJiYgY3JlZHMucHJvamVjdElkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNyZWRzLnByb2plY3RJZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBUcnkgdG8gbG9hZCBhIGNyZWRlbnRpYWxzIGZpbGUgYW5kIHJlYWQgaXRzIHByb2plY3QgSURcbiAgICAgICAgY29uc3QgciA9IGF3YWl0IHRoaXMuX3RyeUdldEFwcGxpY2F0aW9uQ3JlZGVudGlhbHNGcm9tRW52aXJvbm1lbnRWYXJpYWJsZSgpO1xuICAgICAgICBpZiAocikge1xuICAgICAgICAgICAgcmV0dXJuIHIucHJvamVjdElkO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgcHJvamVjdCBJRCBmcm9tIGV4dGVybmFsIGFjY291bnQgY2xpZW50IGlmIGF2YWlsYWJsZS5cbiAgICAgKi9cbiAgICBhc3luYyBnZXRFeHRlcm5hbEFjY291bnRDbGllbnRQcm9qZWN0SWQoKSB7XG4gICAgICAgIGlmICghdGhpcy5qc29uQ29udGVudCB8fCB0aGlzLmpzb25Db250ZW50LnR5cGUgIT09IGJhc2VleHRlcm5hbGNsaWVudF8xLkVYVEVSTkFMX0FDQ09VTlRfVFlQRSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY3JlZHMgPSBhd2FpdCB0aGlzLmdldENsaWVudCgpO1xuICAgICAgICAvLyBEbyBub3Qgc3VwcHJlc3MgdGhlIHVuZGVybHlpbmcgZXJyb3IsIGFzIHRoZSBlcnJvciBjb3VsZCBjb250YWluIGhlbHBmdWxcbiAgICAgICAgLy8gaW5mb3JtYXRpb24gZm9yIGRlYnVnZ2luZyBhbmQgZml4aW5nLiBUaGlzIGlzIGVzcGVjaWFsbHkgdHJ1ZSBmb3JcbiAgICAgICAgLy8gZXh0ZXJuYWwgYWNjb3VudCBjcmVkcyBhcyBpbiBvcmRlciB0byBnZXQgdGhlIHByb2plY3QgSUQsIHRoZSBmb2xsb3dpbmdcbiAgICAgICAgLy8gb3BlcmF0aW9ucyBoYXZlIHRvIHN1Y2NlZWQ6XG4gICAgICAgIC8vIDEuIFZhbGlkIGNyZWRlbnRpYWxzIGZpbGUgc2hvdWxkIGJlIHN1cHBsaWVkLlxuICAgICAgICAvLyAyLiBBYmlsaXR5IHRvIHJldHJpZXZlIGFjY2VzcyB0b2tlbnMgZnJvbSBTVFMgdG9rZW4gZXhjaGFuZ2UgQVBJLlxuICAgICAgICAvLyAzLiBBYmlsaXR5IHRvIGV4Y2hhbmdlIGZvciBzZXJ2aWNlIGFjY291bnQgaW1wZXJzb25hdGVkIGNyZWRlbnRpYWxzIChpZlxuICAgICAgICAvLyAgICBlbmFibGVkKS5cbiAgICAgICAgLy8gNC4gQWJpbGl0eSB0byBnZXQgcHJvamVjdCBpbmZvIHVzaW5nIHRoZSBhY2Nlc3MgdG9rZW4gZnJvbSBzdGVwIDIgb3IgMy5cbiAgICAgICAgLy8gV2l0aG91dCBzdXJmYWNpbmcgdGhlIGVycm9yLCBpdCBpcyBoYXJkZXIgZm9yIGRldmVsb3BlcnMgdG8gZGV0ZXJtaW5lXG4gICAgICAgIC8vIHdoaWNoIHN0ZXAgd2VudCB3cm9uZy5cbiAgICAgICAgcmV0dXJuIGF3YWl0IGNyZWRzLmdldFByb2plY3RJZCgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBDb21wdXRlIEVuZ2luZSBwcm9qZWN0IElEIGlmIGl0IGNhbiBiZSBpbmZlcnJlZC5cbiAgICAgKi9cbiAgICBhc3luYyBnZXRHQ0VQcm9qZWN0SWQoKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCByID0gYXdhaXQgZ2NwTWV0YWRhdGEucHJvamVjdCgncHJvamVjdC1pZCcpO1xuICAgICAgICAgICAgcmV0dXJuIHI7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIC8vIElnbm9yZSBhbnkgZXJyb3JzXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXRDcmVkZW50aWFscyhjYWxsYmFjaykge1xuICAgICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgIHRoaXMuZ2V0Q3JlZGVudGlhbHNBc3luYygpLnRoZW4ociA9PiBjYWxsYmFjayhudWxsLCByKSwgY2FsbGJhY2spO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Q3JlZGVudGlhbHNBc3luYygpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGFzeW5jIGdldENyZWRlbnRpYWxzQXN5bmMoKSB7XG4gICAgICAgIGNvbnN0IGNsaWVudCA9IGF3YWl0IHRoaXMuZ2V0Q2xpZW50KCk7XG4gICAgICAgIGlmIChjbGllbnQgaW5zdGFuY2VvZiBpbXBlcnNvbmF0ZWRfMS5JbXBlcnNvbmF0ZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB7IGNsaWVudF9lbWFpbDogY2xpZW50LmdldFRhcmdldFByaW5jaXBhbCgpIH07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNsaWVudCBpbnN0YW5jZW9mIGJhc2VleHRlcm5hbGNsaWVudF8xLkJhc2VFeHRlcm5hbEFjY291bnRDbGllbnQpIHtcbiAgICAgICAgICAgIGNvbnN0IHNlcnZpY2VBY2NvdW50RW1haWwgPSBjbGllbnQuZ2V0U2VydmljZUFjY291bnRFbWFpbCgpO1xuICAgICAgICAgICAgaWYgKHNlcnZpY2VBY2NvdW50RW1haWwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBjbGllbnRfZW1haWw6IHNlcnZpY2VBY2NvdW50RW1haWwsXG4gICAgICAgICAgICAgICAgICAgIHVuaXZlcnNlX2RvbWFpbjogY2xpZW50LnVuaXZlcnNlRG9tYWluLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuanNvbkNvbnRlbnQpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgY2xpZW50X2VtYWlsOiB0aGlzLmpzb25Db250ZW50LmNsaWVudF9lbWFpbCxcbiAgICAgICAgICAgICAgICBwcml2YXRlX2tleTogdGhpcy5qc29uQ29udGVudC5wcml2YXRlX2tleSxcbiAgICAgICAgICAgICAgICB1bml2ZXJzZV9kb21haW46IHRoaXMuanNvbkNvbnRlbnQudW5pdmVyc2VfZG9tYWluLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYXdhaXQgdGhpcy5fY2hlY2tJc0dDRSgpKSB7XG4gICAgICAgICAgICBjb25zdCBbY2xpZW50X2VtYWlsLCB1bml2ZXJzZV9kb21haW5dID0gYXdhaXQgUHJvbWlzZS5hbGwoW1xuICAgICAgICAgICAgICAgIGdjcE1ldGFkYXRhLmluc3RhbmNlKCdzZXJ2aWNlLWFjY291bnRzL2RlZmF1bHQvZW1haWwnKSxcbiAgICAgICAgICAgICAgICB0aGlzLmdldFVuaXZlcnNlRG9tYWluKCksXG4gICAgICAgICAgICBdKTtcbiAgICAgICAgICAgIHJldHVybiB7IGNsaWVudF9lbWFpbCwgdW5pdmVyc2VfZG9tYWluIH07XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKEdvb2dsZUF1dGhFeGNlcHRpb25NZXNzYWdlcy5OT19DUkVERU5USUFMU19GT1VORCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEF1dG9tYXRpY2FsbHkgb2J0YWluIGFuIHtAbGluayBBdXRoQ2xpZW50IGBBdXRoQ2xpZW50YH0gYmFzZWQgb24gdGhlXG4gICAgICogcHJvdmlkZWQgY29uZmlndXJhdGlvbi4gSWYgbm8gb3B0aW9ucyB3ZXJlIHBhc3NlZCwgdXNlIEFwcGxpY2F0aW9uXG4gICAgICogRGVmYXVsdCBDcmVkZW50aWFscy5cbiAgICAgKi9cbiAgICBhc3luYyBnZXRDbGllbnQoKSB7XG4gICAgICAgIGlmICghdGhpcy5jYWNoZWRDcmVkZW50aWFsKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5qc29uQ29udGVudCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2NhY2hlQ2xpZW50RnJvbUpTT04odGhpcy5qc29uQ29udGVudCwgdGhpcy5jbGllbnRPcHRpb25zKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMua2V5RmlsZW5hbWUpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBmaWxlUGF0aCA9IHBhdGgucmVzb2x2ZSh0aGlzLmtleUZpbGVuYW1lKTtcbiAgICAgICAgICAgICAgICBjb25zdCBzdHJlYW0gPSBmcy5jcmVhdGVSZWFkU3RyZWFtKGZpbGVQYXRoKTtcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmZyb21TdHJlYW1Bc3luYyhzdHJlYW0sIHRoaXMuY2xpZW50T3B0aW9ucyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmdldEFwcGxpY2F0aW9uRGVmYXVsdEFzeW5jKHRoaXMuY2xpZW50T3B0aW9ucyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuY2FjaGVkQ3JlZGVudGlhbDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNsaWVudCB3aGljaCB3aWxsIGZldGNoIGFuIElEIHRva2VuIGZvciBhdXRob3JpemF0aW9uLlxuICAgICAqIEBwYXJhbSB0YXJnZXRBdWRpZW5jZSB0aGUgYXVkaWVuY2UgZm9yIHRoZSBmZXRjaGVkIElEIHRva2VuLlxuICAgICAqIEByZXR1cm5zIElkVG9rZW5DbGllbnQgZm9yIG1ha2luZyBIVFRQIGNhbGxzIGF1dGhlbnRpY2F0ZWQgd2l0aCBJRCB0b2tlbnMuXG4gICAgICovXG4gICAgYXN5bmMgZ2V0SWRUb2tlbkNsaWVudCh0YXJnZXRBdWRpZW5jZSkge1xuICAgICAgICBjb25zdCBjbGllbnQgPSBhd2FpdCB0aGlzLmdldENsaWVudCgpO1xuICAgICAgICBpZiAoISgnZmV0Y2hJZFRva2VuJyBpbiBjbGllbnQpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBmZXRjaCBJRCB0b2tlbiBpbiB0aGlzIGVudmlyb25tZW50LCB1c2UgR0NFIG9yIHNldCB0aGUgR09PR0xFX0FQUExJQ0FUSU9OX0NSRURFTlRJQUxTIGVudmlyb25tZW50IHZhcmlhYmxlIHRvIGEgc2VydmljZSBhY2NvdW50IGNyZWRlbnRpYWxzIEpTT04gZmlsZS4nKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IGlkdG9rZW5jbGllbnRfMS5JZFRva2VuQ2xpZW50KHsgdGFyZ2V0QXVkaWVuY2UsIGlkVG9rZW5Qcm92aWRlcjogY2xpZW50IH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBdXRvbWF0aWNhbGx5IG9idGFpbiBhcHBsaWNhdGlvbiBkZWZhdWx0IGNyZWRlbnRpYWxzLCBhbmQgcmV0dXJuXG4gICAgICogYW4gYWNjZXNzIHRva2VuIGZvciBtYWtpbmcgcmVxdWVzdHMuXG4gICAgICovXG4gICAgYXN5bmMgZ2V0QWNjZXNzVG9rZW4oKSB7XG4gICAgICAgIGNvbnN0IGNsaWVudCA9IGF3YWl0IHRoaXMuZ2V0Q2xpZW50KCk7XG4gICAgICAgIHJldHVybiAoYXdhaXQgY2xpZW50LmdldEFjY2Vzc1Rva2VuKCkpLnRva2VuO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBPYnRhaW4gdGhlIEhUVFAgaGVhZGVycyB0aGF0IHdpbGwgcHJvdmlkZSBhdXRob3JpemF0aW9uIGZvciBhIGdpdmVuXG4gICAgICogcmVxdWVzdC5cbiAgICAgKi9cbiAgICBhc3luYyBnZXRSZXF1ZXN0SGVhZGVycyh1cmwpIHtcbiAgICAgICAgY29uc3QgY2xpZW50ID0gYXdhaXQgdGhpcy5nZXRDbGllbnQoKTtcbiAgICAgICAgcmV0dXJuIGNsaWVudC5nZXRSZXF1ZXN0SGVhZGVycyh1cmwpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBPYnRhaW4gY3JlZGVudGlhbHMgZm9yIGEgcmVxdWVzdCwgdGhlbiBhdHRhY2ggdGhlIGFwcHJvcHJpYXRlIGhlYWRlcnMgdG9cbiAgICAgKiB0aGUgcmVxdWVzdCBvcHRpb25zLlxuICAgICAqIEBwYXJhbSBvcHRzIEF4aW9zIG9yIFJlcXVlc3Qgb3B0aW9ucyBvbiB3aGljaCB0byBhdHRhY2ggdGhlIGhlYWRlcnNcbiAgICAgKi9cbiAgICBhc3luYyBhdXRob3JpemVSZXF1ZXN0KG9wdHMpIHtcbiAgICAgICAgb3B0cyA9IG9wdHMgfHwge307XG4gICAgICAgIGNvbnN0IHVybCA9IG9wdHMudXJsIHx8IG9wdHMudXJpO1xuICAgICAgICBjb25zdCBjbGllbnQgPSBhd2FpdCB0aGlzLmdldENsaWVudCgpO1xuICAgICAgICBjb25zdCBoZWFkZXJzID0gYXdhaXQgY2xpZW50LmdldFJlcXVlc3RIZWFkZXJzKHVybCk7XG4gICAgICAgIG9wdHMuaGVhZGVycyA9IE9iamVjdC5hc3NpZ24ob3B0cy5oZWFkZXJzIHx8IHt9LCBoZWFkZXJzKTtcbiAgICAgICAgcmV0dXJuIG9wdHM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEF1dG9tYXRpY2FsbHkgb2J0YWluIGFwcGxpY2F0aW9uIGRlZmF1bHQgY3JlZGVudGlhbHMsIGFuZCBtYWtlIGFuXG4gICAgICogSFRUUCByZXF1ZXN0IHVzaW5nIHRoZSBnaXZlbiBvcHRpb25zLlxuICAgICAqIEBwYXJhbSBvcHRzIEF4aW9zIHJlcXVlc3Qgb3B0aW9ucyBmb3IgdGhlIEhUVFAgcmVxdWVzdC5cbiAgICAgKi9cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgIGFzeW5jIHJlcXVlc3Qob3B0cykge1xuICAgICAgICBjb25zdCBjbGllbnQgPSBhd2FpdCB0aGlzLmdldENsaWVudCgpO1xuICAgICAgICByZXR1cm4gY2xpZW50LnJlcXVlc3Qob3B0cyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIERldGVybWluZSB0aGUgY29tcHV0ZSBlbnZpcm9ubWVudCBpbiB3aGljaCB0aGUgY29kZSBpcyBydW5uaW5nLlxuICAgICAqL1xuICAgIGdldEVudigpIHtcbiAgICAgICAgcmV0dXJuICgwLCBlbnZEZXRlY3RfMS5nZXRFbnYpKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNpZ24gdGhlIGdpdmVuIGRhdGEgd2l0aCB0aGUgY3VycmVudCBwcml2YXRlIGtleSwgb3IgZ28gb3V0XG4gICAgICogdG8gdGhlIElBTSBBUEkgdG8gc2lnbiBpdC5cbiAgICAgKiBAcGFyYW0gZGF0YSBUaGUgZGF0YSB0byBiZSBzaWduZWQuXG4gICAgICogQHBhcmFtIGVuZHBvaW50IEEgY3VzdG9tIGVuZHBvaW50IHRvIHVzZS5cbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogYGBgXG4gICAgICogc2lnbignZGF0YScsICdodHRwczovL2lhbWNyZWRlbnRpYWxzLmdvb2dsZWFwaXMuY29tL3YxL3Byb2plY3RzLy0vc2VydmljZUFjY291bnRzLycpO1xuICAgICAqIGBgYFxuICAgICAqL1xuICAgIGFzeW5jIHNpZ24oZGF0YSwgZW5kcG9pbnQpIHtcbiAgICAgICAgY29uc3QgY2xpZW50ID0gYXdhaXQgdGhpcy5nZXRDbGllbnQoKTtcbiAgICAgICAgY29uc3QgdW5pdmVyc2UgPSBhd2FpdCB0aGlzLmdldFVuaXZlcnNlRG9tYWluKCk7XG4gICAgICAgIGVuZHBvaW50ID1cbiAgICAgICAgICAgIGVuZHBvaW50IHx8XG4gICAgICAgICAgICAgICAgYGh0dHBzOi8vaWFtY3JlZGVudGlhbHMuJHt1bml2ZXJzZX0vdjEvcHJvamVjdHMvLS9zZXJ2aWNlQWNjb3VudHMvYDtcbiAgICAgICAgaWYgKGNsaWVudCBpbnN0YW5jZW9mIGltcGVyc29uYXRlZF8xLkltcGVyc29uYXRlZCkge1xuICAgICAgICAgICAgY29uc3Qgc2lnbmVkID0gYXdhaXQgY2xpZW50LnNpZ24oZGF0YSk7XG4gICAgICAgICAgICByZXR1cm4gc2lnbmVkLnNpZ25lZEJsb2I7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY3J5cHRvID0gKDAsIGNyeXB0b18xLmNyZWF0ZUNyeXB0bykoKTtcbiAgICAgICAgaWYgKGNsaWVudCBpbnN0YW5jZW9mIGp3dGNsaWVudF8xLkpXVCAmJiBjbGllbnQua2V5KSB7XG4gICAgICAgICAgICBjb25zdCBzaWduID0gYXdhaXQgY3J5cHRvLnNpZ24oY2xpZW50LmtleSwgZGF0YSk7XG4gICAgICAgICAgICByZXR1cm4gc2lnbjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjcmVkcyA9IGF3YWl0IHRoaXMuZ2V0Q3JlZGVudGlhbHMoKTtcbiAgICAgICAgaWYgKCFjcmVkcy5jbGllbnRfZW1haWwpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IHNpZ24gZGF0YSB3aXRob3V0IGBjbGllbnRfZW1haWxgLicpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLnNpZ25CbG9iKGNyeXB0bywgY3JlZHMuY2xpZW50X2VtYWlsLCBkYXRhLCBlbmRwb2ludCk7XG4gICAgfVxuICAgIGFzeW5jIHNpZ25CbG9iKGNyeXB0bywgZW1haWxPclVuaXF1ZUlkLCBkYXRhLCBlbmRwb2ludCkge1xuICAgICAgICBjb25zdCB1cmwgPSBuZXcgVVJMKGVuZHBvaW50ICsgYCR7ZW1haWxPclVuaXF1ZUlkfTpzaWduQmxvYmApO1xuICAgICAgICBjb25zdCByZXMgPSBhd2FpdCB0aGlzLnJlcXVlc3Qoe1xuICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgICAgICB1cmw6IHVybC5ocmVmLFxuICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgIHBheWxvYWQ6IGNyeXB0by5lbmNvZGVCYXNlNjRTdHJpbmdVdGY4KGRhdGEpLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiByZXMuZGF0YS5zaWduZWRCbG9iO1xuICAgIH1cbn1cbmV4cG9ydHMuR29vZ2xlQXV0aCA9IEdvb2dsZUF1dGg7XG4vKipcbiAqIEV4cG9ydCBEZWZhdWx0VHJhbnNwb3J0ZXIgYXMgYSBzdGF0aWMgcHJvcGVydHkgb2YgdGhlIGNsYXNzLlxuICovXG5Hb29nbGVBdXRoLkRlZmF1bHRUcmFuc3BvcnRlciA9IHRyYW5zcG9ydGVyc18xLkRlZmF1bHRUcmFuc3BvcnRlcjtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIkdvb2dsZUF1dGgiLCJDTE9VRF9TREtfQ0xJRU5UX0lEIiwiY2hpbGRfcHJvY2Vzc18xIiwicmVxdWlyZSIsImZzIiwiZ2NwTWV0YWRhdGEiLCJvcyIsInBhdGgiLCJjcnlwdG9fMSIsInRyYW5zcG9ydGVyc18xIiwiY29tcHV0ZWNsaWVudF8xIiwiaWR0b2tlbmNsaWVudF8xIiwiZW52RGV0ZWN0XzEiLCJqd3RjbGllbnRfMSIsInJlZnJlc2hjbGllbnRfMSIsImltcGVyc29uYXRlZF8xIiwiZXh0ZXJuYWxjbGllbnRfMSIsImJhc2VleHRlcm5hbGNsaWVudF8xIiwiYXV0aGNsaWVudF8xIiwiZXh0ZXJuYWxBY2NvdW50QXV0aG9yaXplZFVzZXJDbGllbnRfMSIsInV0aWxfMSIsIkdvb2dsZUF1dGhFeGNlcHRpb25NZXNzYWdlcyIsIk5PX1BST0pFQ1RfSURfRk9VTkQiLCJOT19DUkVERU5USUFMU19GT1VORCIsIk5PX1VOSVZFUlNFX0RPTUFJTl9GT1VORCIsImlzR0NFIiwiY2hlY2tJc0dDRSIsImNvbnN0cnVjdG9yIiwib3B0cyIsInVuZGVmaW5lZCIsImpzb25Db250ZW50IiwiY2FjaGVkQ3JlZGVudGlhbCIsImNsaWVudE9wdGlvbnMiLCJfY2FjaGVkUHJvamVjdElkIiwicHJvamVjdElkIiwiYXV0aENsaWVudCIsImtleUZpbGVuYW1lIiwia2V5RmlsZSIsInNjb3BlcyIsImNyZWRlbnRpYWxzIiwidW5pdmVyc2VEb21haW4iLCJzZXRHYXBpY0pXVFZhbHVlcyIsImNsaWVudCIsImRlZmF1bHRTZXJ2aWNlUGF0aCIsInVzZUpXVEFjY2Vzc1dpdGhTY29wZSIsImRlZmF1bHRTY29wZXMiLCJnZXRQcm9qZWN0SWQiLCJjYWxsYmFjayIsImdldFByb2plY3RJZEFzeW5jIiwidGhlbiIsInIiLCJnZXRQcm9qZWN0SWRPcHRpb25hbCIsImUiLCJFcnJvciIsIm1lc3NhZ2UiLCJmaW5kQW5kQ2FjaGVQcm9qZWN0SWQiLCJnZXRQcm9kdWN0aW9uUHJvamVjdElkIiwiZ2V0RmlsZVByb2plY3RJZCIsImdldERlZmF1bHRTZXJ2aWNlUHJvamVjdElkIiwiZ2V0R0NFUHJvamVjdElkIiwiZ2V0RXh0ZXJuYWxBY2NvdW50Q2xpZW50UHJvamVjdElkIiwiX2ZpbmRQcm9qZWN0SWRQcm9taXNlIiwiZ2V0VW5pdmVyc2VEb21haW5Gcm9tTWV0YWRhdGFTZXJ2ZXIiLCJfYSIsInVuaXZlcnNlIiwiREVGQVVMVF9VTklWRVJTRSIsInJlc3BvbnNlIiwic3RhdHVzIiwiZ2V0VW5pdmVyc2VEb21haW4iLCJvcmlnaW5hbE9yQ2FtZWxPcHRpb25zIiwiZ2V0IiwiZ2V0Q2xpZW50IiwiZ2V0QW55U2NvcGVzIiwiZ2V0QXBwbGljYXRpb25EZWZhdWx0Iiwib3B0aW9uc09yQ2FsbGJhY2siLCJvcHRpb25zIiwiZ2V0QXBwbGljYXRpb25EZWZhdWx0QXN5bmMiLCJjcmVkZW50aWFsIiwicHJlcGFyZUFuZENhY2hlQURDIiwicXVvdGFQcm9qZWN0SWRPdmVycmlkZSIsInByb2Nlc3MiLCJlbnYiLCJfdHJ5R2V0QXBwbGljYXRpb25DcmVkZW50aWFsc0Zyb21FbnZpcm9ubWVudFZhcmlhYmxlIiwiSldUIiwiQmFzZUV4dGVybmFsQWNjb3VudENsaWVudCIsIl90cnlHZXRBcHBsaWNhdGlvbkNyZWRlbnRpYWxzRnJvbVdlbGxLbm93bkZpbGUiLCJfY2hlY2tJc0dDRSIsIkNvbXB1dGUiLCJxdW90YVByb2plY3RJZCIsImdldEdDUFJlc2lkZW5jeSIsImlzQXZhaWxhYmxlIiwiY3JlZGVudGlhbHNQYXRoIiwibGVuZ3RoIiwiX2dldEFwcGxpY2F0aW9uQ3JlZGVudGlhbHNGcm9tRmlsZVBhdGgiLCJsb2NhdGlvbiIsIl9pc1dpbmRvd3MiLCJob21lIiwiam9pbiIsImV4aXN0c1N5bmMiLCJmaWxlUGF0aCIsInJlYWxwYXRoU3luYyIsImxzdGF0U3luYyIsImlzRmlsZSIsImVyciIsInJlYWRTdHJlYW0iLCJjcmVhdGVSZWFkU3RyZWFtIiwiZnJvbVN0cmVhbSIsImZyb21JbXBlcnNvbmF0ZWRKU09OIiwianNvbiIsIl9iIiwiX2MiLCJfZCIsIl9lIiwidHlwZSIsIklNUEVSU09OQVRFRF9BQ0NPVU5UX1RZUEUiLCJzb3VyY2VfY3JlZGVudGlhbHMiLCJzZXJ2aWNlX2FjY291bnRfaW1wZXJzb25hdGlvbl91cmwiLCJzb3VyY2VDbGllbnQiLCJVc2VyUmVmcmVzaENsaWVudCIsImZyb21KU09OIiwiUmFuZ2VFcnJvciIsInRhcmdldFByaW5jaXBhbCIsImV4ZWMiLCJncm91cHMiLCJ0YXJnZXQiLCJ0YXJnZXRTY29wZXMiLCJJbXBlcnNvbmF0ZWQiLCJkZWxlZ2F0ZXMiLCJBcnJheSIsImlzQXJyYXkiLCJwcmVmZXJyZWRVbml2ZXJzZURvbWFpbiIsIlVTRVJfUkVGUkVTSF9BQ0NPVU5UX1RZUEUiLCJFWFRFUk5BTF9BQ0NPVU5UX1RZUEUiLCJFeHRlcm5hbEFjY291bnRDbGllbnQiLCJFWFRFUk5BTF9BQ0NPVU5UX0FVVEhPUklaRURfVVNFUl9UWVBFIiwiRXh0ZXJuYWxBY2NvdW50QXV0aG9yaXplZFVzZXJDbGllbnQiLCJfY2FjaGVDbGllbnRGcm9tSlNPTiIsImlucHV0U3RyZWFtIiwiZnJvbVN0cmVhbUFzeW5jIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJzIiwic2V0RW5jb2RpbmciLCJvbiIsImNodW5rIiwiZGF0YSIsIkpTT04iLCJwYXJzZSIsImZyb21BUElLZXkiLCJhcGlLZXkiLCJzeXMiLCJwbGF0Zm9ybSIsInN1YnN0cmluZyIsInRvTG93ZXJDYXNlIiwic3Rkb3V0IiwiY29uZmlndXJhdGlvbiIsInByb3BlcnRpZXMiLCJjb3JlIiwicHJvamVjdCIsImNyZWRzIiwiZ2V0Q3JlZGVudGlhbHMiLCJnZXRDcmVkZW50aWFsc0FzeW5jIiwiY2xpZW50X2VtYWlsIiwiZ2V0VGFyZ2V0UHJpbmNpcGFsIiwic2VydmljZUFjY291bnRFbWFpbCIsImdldFNlcnZpY2VBY2NvdW50RW1haWwiLCJ1bml2ZXJzZV9kb21haW4iLCJwcml2YXRlX2tleSIsImFsbCIsImluc3RhbmNlIiwic3RyZWFtIiwiZ2V0SWRUb2tlbkNsaWVudCIsInRhcmdldEF1ZGllbmNlIiwiSWRUb2tlbkNsaWVudCIsImlkVG9rZW5Qcm92aWRlciIsImdldEFjY2Vzc1Rva2VuIiwidG9rZW4iLCJnZXRSZXF1ZXN0SGVhZGVycyIsInVybCIsImF1dGhvcml6ZVJlcXVlc3QiLCJ1cmkiLCJoZWFkZXJzIiwiYXNzaWduIiwicmVxdWVzdCIsImdldEVudiIsInNpZ24iLCJlbmRwb2ludCIsInNpZ25lZCIsInNpZ25lZEJsb2IiLCJjcnlwdG8iLCJjcmVhdGVDcnlwdG8iLCJrZXkiLCJzaWduQmxvYiIsImVtYWlsT3JVbmlxdWVJZCIsIlVSTCIsInJlcyIsIm1ldGhvZCIsImhyZWYiLCJwYXlsb2FkIiwiZW5jb2RlQmFzZTY0U3RyaW5nVXRmOCIsIkRlZmF1bHRUcmFuc3BvcnRlciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/google-auth-library/build/src/auth/googleauth.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/google-auth-library/build/src/auth/iam.js":
/*!****************************************************************!*\
  !*** ./node_modules/google-auth-library/build/src/auth/iam.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n// Copyright 2014 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.IAMAuth = void 0;\nclass IAMAuth {\n    /**\n     * IAM credentials.\n     *\n     * @param selector the iam authority selector\n     * @param token the token\n     * @constructor\n     */ constructor(selector, token){\n        this.selector = selector;\n        this.token = token;\n        this.selector = selector;\n        this.token = token;\n    }\n    /**\n     * Acquire the HTTP headers required to make an authenticated request.\n     */ getRequestHeaders() {\n        return {\n            \"x-goog-iam-authority-selector\": this.selector,\n            \"x-goog-iam-authorization-token\": this.token\n        };\n    }\n}\nexports.IAMAuth = IAMAuth;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9nb29nbGUtYXV0aC1saWJyYXJ5L2J1aWxkL3NyYy9hdXRoL2lhbS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDRCQUE0QjtBQUM1QixFQUFFO0FBQ0Ysa0VBQWtFO0FBQ2xFLG1FQUFtRTtBQUNuRSwwQ0FBMEM7QUFDMUMsRUFBRTtBQUNGLGtEQUFrRDtBQUNsRCxFQUFFO0FBQ0Ysc0VBQXNFO0FBQ3RFLG9FQUFvRTtBQUNwRSwyRUFBMkU7QUFDM0Usc0VBQXNFO0FBQ3RFLGlDQUFpQztBQUNqQ0EsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELGVBQWUsR0FBRyxLQUFLO0FBQ3ZCLE1BQU1FO0lBQ0Y7Ozs7OztLQU1DLEdBQ0RDLFlBQVlDLFFBQVEsRUFBRUMsS0FBSyxDQUFFO1FBQ3pCLElBQUksQ0FBQ0QsUUFBUSxHQUFHQTtRQUNoQixJQUFJLENBQUNDLEtBQUssR0FBR0E7UUFDYixJQUFJLENBQUNELFFBQVEsR0FBR0E7UUFDaEIsSUFBSSxDQUFDQyxLQUFLLEdBQUdBO0lBQ2pCO0lBQ0E7O0tBRUMsR0FDREMsb0JBQW9CO1FBQ2hCLE9BQU87WUFDSCxpQ0FBaUMsSUFBSSxDQUFDRixRQUFRO1lBQzlDLGtDQUFrQyxJQUFJLENBQUNDLEtBQUs7UUFDaEQ7SUFDSjtBQUNKO0FBQ0FMLGVBQWUsR0FBR0UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zcG90aWZ5LXRvLXlvdXR1YmUvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWF1dGgtbGlicmFyeS9idWlsZC9zcmMvYXV0aC9pYW0uanM/YmNmNyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCAyMDE0IEdvb2dsZSBMTENcbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5JQU1BdXRoID0gdm9pZCAwO1xuY2xhc3MgSUFNQXV0aCB7XG4gICAgLyoqXG4gICAgICogSUFNIGNyZWRlbnRpYWxzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHNlbGVjdG9yIHRoZSBpYW0gYXV0aG9yaXR5IHNlbGVjdG9yXG4gICAgICogQHBhcmFtIHRva2VuIHRoZSB0b2tlblxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHNlbGVjdG9yLCB0b2tlbikge1xuICAgICAgICB0aGlzLnNlbGVjdG9yID0gc2VsZWN0b3I7XG4gICAgICAgIHRoaXMudG9rZW4gPSB0b2tlbjtcbiAgICAgICAgdGhpcy5zZWxlY3RvciA9IHNlbGVjdG9yO1xuICAgICAgICB0aGlzLnRva2VuID0gdG9rZW47XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFjcXVpcmUgdGhlIEhUVFAgaGVhZGVycyByZXF1aXJlZCB0byBtYWtlIGFuIGF1dGhlbnRpY2F0ZWQgcmVxdWVzdC5cbiAgICAgKi9cbiAgICBnZXRSZXF1ZXN0SGVhZGVycygpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICd4LWdvb2ctaWFtLWF1dGhvcml0eS1zZWxlY3Rvcic6IHRoaXMuc2VsZWN0b3IsXG4gICAgICAgICAgICAneC1nb29nLWlhbS1hdXRob3JpemF0aW9uLXRva2VuJzogdGhpcy50b2tlbixcbiAgICAgICAgfTtcbiAgICB9XG59XG5leHBvcnRzLklBTUF1dGggPSBJQU1BdXRoO1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiSUFNQXV0aCIsImNvbnN0cnVjdG9yIiwic2VsZWN0b3IiLCJ0b2tlbiIsImdldFJlcXVlc3RIZWFkZXJzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/google-auth-library/build/src/auth/iam.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/google-auth-library/build/src/auth/identitypoolclient.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/google-auth-library/build/src/auth/identitypoolclient.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nvar _a, _b, _c;\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.IdentityPoolClient = void 0;\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst util_1 = __webpack_require__(/*! util */ \"util\");\nconst baseexternalclient_1 = __webpack_require__(/*! ./baseexternalclient */ \"(action-browser)/./node_modules/google-auth-library/build/src/auth/baseexternalclient.js\");\nconst util_2 = __webpack_require__(/*! ../util */ \"(action-browser)/./node_modules/google-auth-library/build/src/util.js\");\n// fs.readfile is undefined in browser karma tests causing\n// `npm run browser-test` to fail as test.oauth2.ts imports this file via\n// src/index.ts.\n// Fallback to void function to avoid promisify throwing a TypeError.\nconst readFile = (0, util_1.promisify)((_a = fs.readFile) !== null && _a !== void 0 ? _a : ()=>{});\nconst realpath = (0, util_1.promisify)((_b = fs.realpath) !== null && _b !== void 0 ? _b : ()=>{});\nconst lstat = (0, util_1.promisify)((_c = fs.lstat) !== null && _c !== void 0 ? _c : ()=>{});\n/**\n * Defines the Url-sourced and file-sourced external account clients mainly\n * used for K8s and Azure workloads.\n */ class IdentityPoolClient extends baseexternalclient_1.BaseExternalAccountClient {\n    /**\n     * Instantiate an IdentityPoolClient instance using the provided JSON\n     * object loaded from an external account credentials file.\n     * An error is thrown if the credential is not a valid file-sourced or\n     * url-sourced credential or a workforce pool user project is provided\n     * with a non workforce audience.\n     * @param options The external account options object typically loaded\n     *   from the external account JSON credential file. The camelCased options\n     *   are aliases for the snake_cased options.\n     * @param additionalOptions **DEPRECATED, all options are available in the\n     *   `options` parameter.** Optional additional behavior customization options.\n     *   These currently customize expiration threshold time and whether to retry\n     *   on 401/403 API request errors.\n     */ constructor(options, additionalOptions){\n        super(options, additionalOptions);\n        const opts = (0, util_2.originalOrCamelOptions)(options);\n        const credentialSource = opts.get(\"credential_source\");\n        const credentialSourceOpts = (0, util_2.originalOrCamelOptions)(credentialSource);\n        this.file = credentialSourceOpts.get(\"file\");\n        this.url = credentialSourceOpts.get(\"url\");\n        this.headers = credentialSourceOpts.get(\"headers\");\n        if (this.file && this.url) {\n            throw new Error('No valid Identity Pool \"credential_source\" provided, must be either file or url.');\n        } else if (this.file && !this.url) {\n            this.credentialSourceType = \"file\";\n        } else if (!this.file && this.url) {\n            this.credentialSourceType = \"url\";\n        } else {\n            throw new Error('No valid Identity Pool \"credential_source\" provided, must be either file or url.');\n        }\n        const formatOpts = (0, util_2.originalOrCamelOptions)(credentialSourceOpts.get(\"format\"));\n        // Text is the default format type.\n        this.formatType = formatOpts.get(\"type\") || \"text\";\n        this.formatSubjectTokenFieldName = formatOpts.get(\"subject_token_field_name\");\n        if (this.formatType !== \"json\" && this.formatType !== \"text\") {\n            throw new Error(`Invalid credential_source format \"${this.formatType}\"`);\n        }\n        if (this.formatType === \"json\" && !this.formatSubjectTokenFieldName) {\n            throw new Error(\"Missing subject_token_field_name for JSON credential_source format\");\n        }\n    }\n    /**\n     * Triggered when a external subject token is needed to be exchanged for a GCP\n     * access token via GCP STS endpoint.\n     * This uses the `options.credential_source` object to figure out how\n     * to retrieve the token using the current environment. In this case,\n     * this either retrieves the local credential from a file location (k8s\n     * workload) or by sending a GET request to a local metadata server (Azure\n     * workloads).\n     * @return A promise that resolves with the external subject token.\n     */ async retrieveSubjectToken() {\n        if (this.file) {\n            return await this.getTokenFromFile(this.file, this.formatType, this.formatSubjectTokenFieldName);\n        }\n        return await this.getTokenFromUrl(this.url, this.formatType, this.formatSubjectTokenFieldName, this.headers);\n    }\n    /**\n     * Looks up the external subject token in the file path provided and\n     * resolves with that token.\n     * @param file The file path where the external credential is located.\n     * @param formatType The token file or URL response type (JSON or text).\n     * @param formatSubjectTokenFieldName For JSON response types, this is the\n     *   subject_token field name. For Azure, this is access_token. For text\n     *   response types, this is ignored.\n     * @return A promise that resolves with the external subject token.\n     */ async getTokenFromFile(filePath, formatType, formatSubjectTokenFieldName) {\n        // Make sure there is a file at the path. lstatSync will throw if there is\n        // nothing there.\n        try {\n            // Resolve path to actual file in case of symlink. Expect a thrown error\n            // if not resolvable.\n            filePath = await realpath(filePath);\n            if (!(await lstat(filePath)).isFile()) {\n                throw new Error();\n            }\n        } catch (err) {\n            if (err instanceof Error) {\n                err.message = `The file at ${filePath} does not exist, or it is not a file. ${err.message}`;\n            }\n            throw err;\n        }\n        let subjectToken;\n        const rawText = await readFile(filePath, {\n            encoding: \"utf8\"\n        });\n        if (formatType === \"text\") {\n            subjectToken = rawText;\n        } else if (formatType === \"json\" && formatSubjectTokenFieldName) {\n            const json = JSON.parse(rawText);\n            subjectToken = json[formatSubjectTokenFieldName];\n        }\n        if (!subjectToken) {\n            throw new Error(\"Unable to parse the subject_token from the credential_source file\");\n        }\n        return subjectToken;\n    }\n    /**\n     * Sends a GET request to the URL provided and resolves with the returned\n     * external subject token.\n     * @param url The URL to call to retrieve the subject token. This is typically\n     *   a local metadata server.\n     * @param formatType The token file or URL response type (JSON or text).\n     * @param formatSubjectTokenFieldName For JSON response types, this is the\n     *   subject_token field name. For Azure, this is access_token. For text\n     *   response types, this is ignored.\n     * @param headers The optional additional headers to send with the request to\n     *   the metadata server url.\n     * @return A promise that resolves with the external subject token.\n     */ async getTokenFromUrl(url, formatType, formatSubjectTokenFieldName, headers) {\n        const opts = {\n            url,\n            method: \"GET\",\n            headers,\n            responseType: formatType\n        };\n        let subjectToken;\n        if (formatType === \"text\") {\n            const response = await this.transporter.request(opts);\n            subjectToken = response.data;\n        } else if (formatType === \"json\" && formatSubjectTokenFieldName) {\n            const response = await this.transporter.request(opts);\n            subjectToken = response.data[formatSubjectTokenFieldName];\n        }\n        if (!subjectToken) {\n            throw new Error(\"Unable to parse the subject_token from the credential_source URL\");\n        }\n        return subjectToken;\n    }\n}\nexports.IdentityPoolClient = IdentityPoolClient;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/google-auth-library/build/src/auth/identitypoolclient.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/google-auth-library/build/src/auth/idtokenclient.js":
/*!**************************************************************************!*\
  !*** ./node_modules/google-auth-library/build/src/auth/idtokenclient.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright 2020 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.IdTokenClient = void 0;\nconst oauth2client_1 = __webpack_require__(/*! ./oauth2client */ \"(action-browser)/./node_modules/google-auth-library/build/src/auth/oauth2client.js\");\nclass IdTokenClient extends oauth2client_1.OAuth2Client {\n    /**\n     * Google ID Token client\n     *\n     * Retrieve ID token from the metadata server.\n     * See: https://cloud.google.com/docs/authentication/get-id-token#metadata-server\n     */ constructor(options){\n        super(options);\n        this.targetAudience = options.targetAudience;\n        this.idTokenProvider = options.idTokenProvider;\n    }\n    async getRequestMetadataAsync(// eslint-disable-next-line @typescript-eslint/no-unused-vars\n    url) {\n        if (!this.credentials.id_token || !this.credentials.expiry_date || this.isTokenExpiring()) {\n            const idToken = await this.idTokenProvider.fetchIdToken(this.targetAudience);\n            this.credentials = {\n                id_token: idToken,\n                expiry_date: this.getIdTokenExpiryDate(idToken)\n            };\n        }\n        const headers = {\n            Authorization: \"Bearer \" + this.credentials.id_token\n        };\n        return {\n            headers\n        };\n    }\n    getIdTokenExpiryDate(idToken) {\n        const payloadB64 = idToken.split(\".\")[1];\n        if (payloadB64) {\n            const payload = JSON.parse(Buffer.from(payloadB64, \"base64\").toString(\"ascii\"));\n            return payload.exp * 1000;\n        }\n    }\n}\nexports.IdTokenClient = IdTokenClient;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9nb29nbGUtYXV0aC1saWJyYXJ5L2J1aWxkL3NyYy9hdXRoL2lkdG9rZW5jbGllbnQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw0QkFBNEI7QUFDNUIsRUFBRTtBQUNGLGtFQUFrRTtBQUNsRSxtRUFBbUU7QUFDbkUsMENBQTBDO0FBQzFDLEVBQUU7QUFDRixrREFBa0Q7QUFDbEQsRUFBRTtBQUNGLHNFQUFzRTtBQUN0RSxvRUFBb0U7QUFDcEUsMkVBQTJFO0FBQzNFLHNFQUFzRTtBQUN0RSxpQ0FBaUM7QUFDakNBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxxQkFBcUIsR0FBRyxLQUFLO0FBQzdCLE1BQU1HLGlCQUFpQkMsbUJBQU9BLENBQUMsMEdBQWdCO0FBQy9DLE1BQU1GLHNCQUFzQkMsZUFBZUUsWUFBWTtJQUNuRDs7Ozs7S0FLQyxHQUNEQyxZQUFZQyxPQUFPLENBQUU7UUFDakIsS0FBSyxDQUFDQTtRQUNOLElBQUksQ0FBQ0MsY0FBYyxHQUFHRCxRQUFRQyxjQUFjO1FBQzVDLElBQUksQ0FBQ0MsZUFBZSxHQUFHRixRQUFRRSxlQUFlO0lBQ2xEO0lBQ0EsTUFBTUMsd0JBQ04sNkRBQTZEO0lBQzdEQyxHQUFHLEVBQUU7UUFDRCxJQUFJLENBQUMsSUFBSSxDQUFDQyxXQUFXLENBQUNDLFFBQVEsSUFDMUIsQ0FBQyxJQUFJLENBQUNELFdBQVcsQ0FBQ0UsV0FBVyxJQUM3QixJQUFJLENBQUNDLGVBQWUsSUFBSTtZQUN4QixNQUFNQyxVQUFVLE1BQU0sSUFBSSxDQUFDUCxlQUFlLENBQUNRLFlBQVksQ0FBQyxJQUFJLENBQUNULGNBQWM7WUFDM0UsSUFBSSxDQUFDSSxXQUFXLEdBQUc7Z0JBQ2ZDLFVBQVVHO2dCQUNWRixhQUFhLElBQUksQ0FBQ0ksb0JBQW9CLENBQUNGO1lBQzNDO1FBQ0o7UUFDQSxNQUFNRyxVQUFVO1lBQ1pDLGVBQWUsWUFBWSxJQUFJLENBQUNSLFdBQVcsQ0FBQ0MsUUFBUTtRQUN4RDtRQUNBLE9BQU87WUFBRU07UUFBUTtJQUNyQjtJQUNBRCxxQkFBcUJGLE9BQU8sRUFBRTtRQUMxQixNQUFNSyxhQUFhTCxRQUFRTSxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUU7UUFDeEMsSUFBSUQsWUFBWTtZQUNaLE1BQU1FLFVBQVVDLEtBQUtDLEtBQUssQ0FBQ0MsT0FBT0MsSUFBSSxDQUFDTixZQUFZLFVBQVVPLFFBQVEsQ0FBQztZQUN0RSxPQUFPTCxRQUFRTSxHQUFHLEdBQUc7UUFDekI7SUFDSjtBQUNKO0FBQ0E3QixxQkFBcUIsR0FBR0UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zcG90aWZ5LXRvLXlvdXR1YmUvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWF1dGgtbGlicmFyeS9idWlsZC9zcmMvYXV0aC9pZHRva2VuY2xpZW50LmpzPzJiMzgiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuSWRUb2tlbkNsaWVudCA9IHZvaWQgMDtcbmNvbnN0IG9hdXRoMmNsaWVudF8xID0gcmVxdWlyZShcIi4vb2F1dGgyY2xpZW50XCIpO1xuY2xhc3MgSWRUb2tlbkNsaWVudCBleHRlbmRzIG9hdXRoMmNsaWVudF8xLk9BdXRoMkNsaWVudCB7XG4gICAgLyoqXG4gICAgICogR29vZ2xlIElEIFRva2VuIGNsaWVudFxuICAgICAqXG4gICAgICogUmV0cmlldmUgSUQgdG9rZW4gZnJvbSB0aGUgbWV0YWRhdGEgc2VydmVyLlxuICAgICAqIFNlZTogaHR0cHM6Ly9jbG91ZC5nb29nbGUuY29tL2RvY3MvYXV0aGVudGljYXRpb24vZ2V0LWlkLXRva2VuI21ldGFkYXRhLXNlcnZlclxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIob3B0aW9ucyk7XG4gICAgICAgIHRoaXMudGFyZ2V0QXVkaWVuY2UgPSBvcHRpb25zLnRhcmdldEF1ZGllbmNlO1xuICAgICAgICB0aGlzLmlkVG9rZW5Qcm92aWRlciA9IG9wdGlvbnMuaWRUb2tlblByb3ZpZGVyO1xuICAgIH1cbiAgICBhc3luYyBnZXRSZXF1ZXN0TWV0YWRhdGFBc3luYyhcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzXG4gICAgdXJsKSB7XG4gICAgICAgIGlmICghdGhpcy5jcmVkZW50aWFscy5pZF90b2tlbiB8fFxuICAgICAgICAgICAgIXRoaXMuY3JlZGVudGlhbHMuZXhwaXJ5X2RhdGUgfHxcbiAgICAgICAgICAgIHRoaXMuaXNUb2tlbkV4cGlyaW5nKCkpIHtcbiAgICAgICAgICAgIGNvbnN0IGlkVG9rZW4gPSBhd2FpdCB0aGlzLmlkVG9rZW5Qcm92aWRlci5mZXRjaElkVG9rZW4odGhpcy50YXJnZXRBdWRpZW5jZSk7XG4gICAgICAgICAgICB0aGlzLmNyZWRlbnRpYWxzID0ge1xuICAgICAgICAgICAgICAgIGlkX3Rva2VuOiBpZFRva2VuLFxuICAgICAgICAgICAgICAgIGV4cGlyeV9kYXRlOiB0aGlzLmdldElkVG9rZW5FeHBpcnlEYXRlKGlkVG9rZW4pLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBoZWFkZXJzID0ge1xuICAgICAgICAgICAgQXV0aG9yaXphdGlvbjogJ0JlYXJlciAnICsgdGhpcy5jcmVkZW50aWFscy5pZF90b2tlbixcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHsgaGVhZGVycyB9O1xuICAgIH1cbiAgICBnZXRJZFRva2VuRXhwaXJ5RGF0ZShpZFRva2VuKSB7XG4gICAgICAgIGNvbnN0IHBheWxvYWRCNjQgPSBpZFRva2VuLnNwbGl0KCcuJylbMV07XG4gICAgICAgIGlmIChwYXlsb2FkQjY0KSB7XG4gICAgICAgICAgICBjb25zdCBwYXlsb2FkID0gSlNPTi5wYXJzZShCdWZmZXIuZnJvbShwYXlsb2FkQjY0LCAnYmFzZTY0JykudG9TdHJpbmcoJ2FzY2lpJykpO1xuICAgICAgICAgICAgcmV0dXJuIHBheWxvYWQuZXhwICogMTAwMDtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuSWRUb2tlbkNsaWVudCA9IElkVG9rZW5DbGllbnQ7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJJZFRva2VuQ2xpZW50Iiwib2F1dGgyY2xpZW50XzEiLCJyZXF1aXJlIiwiT0F1dGgyQ2xpZW50IiwiY29uc3RydWN0b3IiLCJvcHRpb25zIiwidGFyZ2V0QXVkaWVuY2UiLCJpZFRva2VuUHJvdmlkZXIiLCJnZXRSZXF1ZXN0TWV0YWRhdGFBc3luYyIsInVybCIsImNyZWRlbnRpYWxzIiwiaWRfdG9rZW4iLCJleHBpcnlfZGF0ZSIsImlzVG9rZW5FeHBpcmluZyIsImlkVG9rZW4iLCJmZXRjaElkVG9rZW4iLCJnZXRJZFRva2VuRXhwaXJ5RGF0ZSIsImhlYWRlcnMiLCJBdXRob3JpemF0aW9uIiwicGF5bG9hZEI2NCIsInNwbGl0IiwicGF5bG9hZCIsIkpTT04iLCJwYXJzZSIsIkJ1ZmZlciIsImZyb20iLCJ0b1N0cmluZyIsImV4cCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/google-auth-library/build/src/auth/idtokenclient.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/google-auth-library/build/src/auth/impersonated.js":
/*!*************************************************************************!*\
  !*** ./node_modules/google-auth-library/build/src/auth/impersonated.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Impersonated = exports.IMPERSONATED_ACCOUNT_TYPE = void 0;\nconst oauth2client_1 = __webpack_require__(/*! ./oauth2client */ \"(action-browser)/./node_modules/google-auth-library/build/src/auth/oauth2client.js\");\nconst gaxios_1 = __webpack_require__(/*! gaxios */ \"(action-browser)/./node_modules/gaxios/build/src/index.js\");\nexports.IMPERSONATED_ACCOUNT_TYPE = \"impersonated_service_account\";\nclass Impersonated extends oauth2client_1.OAuth2Client {\n    /**\n     * Impersonated service account credentials.\n     *\n     * Create a new access token by impersonating another service account.\n     *\n     * Impersonated Credentials allowing credentials issued to a user or\n     * service account to impersonate another. The source project using\n     * Impersonated Credentials must enable the \"IAMCredentials\" API.\n     * Also, the target service account must grant the orginating principal\n     * the \"Service Account Token Creator\" IAM role.\n     *\n     * @param {object} options - The configuration object.\n     * @param {object} [options.sourceClient] the source credential used as to\n     * acquire the impersonated credentials.\n     * @param {string} [options.targetPrincipal] the service account to\n     * impersonate.\n     * @param {string[]} [options.delegates] the chained list of delegates\n     * required to grant the final access_token. If set, the sequence of\n     * identities must have \"Service Account Token Creator\" capability granted to\n     * the preceding identity. For example, if set to [serviceAccountB,\n     * serviceAccountC], the sourceCredential must have the Token Creator role on\n     * serviceAccountB. serviceAccountB must have the Token Creator on\n     * serviceAccountC. Finally, C must have Token Creator on target_principal.\n     * If left unset, sourceCredential must have that role on targetPrincipal.\n     * @param {string[]} [options.targetScopes] scopes to request during the\n     * authorization grant.\n     * @param {number} [options.lifetime] number of seconds the delegated\n     * credential should be valid for up to 3600 seconds by default, or 43,200\n     * seconds by extending the token's lifetime, see:\n     * https://cloud.google.com/iam/docs/creating-short-lived-service-account-credentials#sa-credentials-oauth\n     * @param {string} [options.endpoint] api endpoint override.\n     */ constructor(options = {}){\n        var _a, _b, _c, _d, _e, _f;\n        super(options);\n        // Start with an expired refresh token, which will automatically be\n        // refreshed before the first API call is made.\n        this.credentials = {\n            expiry_date: 1,\n            refresh_token: \"impersonated-placeholder\"\n        };\n        this.sourceClient = (_a = options.sourceClient) !== null && _a !== void 0 ? _a : new oauth2client_1.OAuth2Client();\n        this.targetPrincipal = (_b = options.targetPrincipal) !== null && _b !== void 0 ? _b : \"\";\n        this.delegates = (_c = options.delegates) !== null && _c !== void 0 ? _c : [];\n        this.targetScopes = (_d = options.targetScopes) !== null && _d !== void 0 ? _d : [];\n        this.lifetime = (_e = options.lifetime) !== null && _e !== void 0 ? _e : 3600;\n        this.endpoint = (_f = options.endpoint) !== null && _f !== void 0 ? _f : \"https://iamcredentials.googleapis.com\";\n    }\n    /**\n     * Signs some bytes.\n     *\n     * {@link https://cloud.google.com/iam/docs/reference/credentials/rest/v1/projects.serviceAccounts/signBlob Reference Documentation}\n     * @param blobToSign String to sign.\n     * @return <SignBlobResponse> denoting the keyyID and signedBlob in base64 string\n     */ async sign(blobToSign) {\n        await this.sourceClient.getAccessToken();\n        const name = `projects/-/serviceAccounts/${this.targetPrincipal}`;\n        const u = `${this.endpoint}/v1/${name}:signBlob`;\n        const body = {\n            delegates: this.delegates,\n            payload: Buffer.from(blobToSign).toString(\"base64\")\n        };\n        const res = await this.sourceClient.request({\n            url: u,\n            data: body,\n            method: \"POST\"\n        });\n        return res.data;\n    }\n    /** The service account email to be impersonated. */ getTargetPrincipal() {\n        return this.targetPrincipal;\n    }\n    /**\n     * Refreshes the access token.\n     * @param refreshToken Unused parameter\n     */ async refreshToken(refreshToken) {\n        var _a, _b, _c, _d, _e, _f;\n        try {\n            await this.sourceClient.getAccessToken();\n            const name = \"projects/-/serviceAccounts/\" + this.targetPrincipal;\n            const u = `${this.endpoint}/v1/${name}:generateAccessToken`;\n            const body = {\n                delegates: this.delegates,\n                scope: this.targetScopes,\n                lifetime: this.lifetime + \"s\"\n            };\n            const res = await this.sourceClient.request({\n                url: u,\n                data: body,\n                method: \"POST\"\n            });\n            const tokenResponse = res.data;\n            this.credentials.access_token = tokenResponse.accessToken;\n            this.credentials.expiry_date = Date.parse(tokenResponse.expireTime);\n            return {\n                tokens: this.credentials,\n                res\n            };\n        } catch (error) {\n            if (!(error instanceof Error)) throw error;\n            let status = 0;\n            let message = \"\";\n            if (error instanceof gaxios_1.GaxiosError) {\n                status = (_c = (_b = (_a = error === null || error === void 0 ? void 0 : error.response) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.error) === null || _c === void 0 ? void 0 : _c.status;\n                message = (_f = (_e = (_d = error === null || error === void 0 ? void 0 : error.response) === null || _d === void 0 ? void 0 : _d.data) === null || _e === void 0 ? void 0 : _e.error) === null || _f === void 0 ? void 0 : _f.message;\n            }\n            if (status && message) {\n                error.message = `${status}: unable to impersonate: ${message}`;\n                throw error;\n            } else {\n                error.message = `unable to impersonate: ${error}`;\n                throw error;\n            }\n        }\n    }\n    /**\n     * Generates an OpenID Connect ID token for a service account.\n     *\n     * {@link https://cloud.google.com/iam/docs/reference/credentials/rest/v1/projects.serviceAccounts/generateIdToken Reference Documentation}\n     *\n     * @param targetAudience the audience for the fetched ID token.\n     * @param options the for the request\n     * @return an OpenID Connect ID token\n     */ async fetchIdToken(targetAudience, options) {\n        var _a;\n        await this.sourceClient.getAccessToken();\n        const name = `projects/-/serviceAccounts/${this.targetPrincipal}`;\n        const u = `${this.endpoint}/v1/${name}:generateIdToken`;\n        const body = {\n            delegates: this.delegates,\n            audience: targetAudience,\n            includeEmail: (_a = options === null || options === void 0 ? void 0 : options.includeEmail) !== null && _a !== void 0 ? _a : true\n        };\n        const res = await this.sourceClient.request({\n            url: u,\n            data: body,\n            method: \"POST\"\n        });\n        return res.data.token;\n    }\n}\nexports.Impersonated = Impersonated;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/google-auth-library/build/src/auth/impersonated.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/google-auth-library/build/src/auth/jwtaccess.js":
/*!**********************************************************************!*\
  !*** ./node_modules/google-auth-library/build/src/auth/jwtaccess.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright 2015 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.JWTAccess = void 0;\nconst jws = __webpack_require__(/*! jws */ \"(action-browser)/./node_modules/jws/index.js\");\nconst util_1 = __webpack_require__(/*! ../util */ \"(action-browser)/./node_modules/google-auth-library/build/src/util.js\");\nconst DEFAULT_HEADER = {\n    alg: \"RS256\",\n    typ: \"JWT\"\n};\nclass JWTAccess {\n    /**\n     * JWTAccess service account credentials.\n     *\n     * Create a new access token by using the credential to create a new JWT token\n     * that's recognized as the access token.\n     *\n     * @param email the service account email address.\n     * @param key the private key that will be used to sign the token.\n     * @param keyId the ID of the private key used to sign the token.\n     */ constructor(email, key, keyId, eagerRefreshThresholdMillis){\n        this.cache = new util_1.LRUCache({\n            capacity: 500,\n            maxAge: 60 * 60 * 1000\n        });\n        this.email = email;\n        this.key = key;\n        this.keyId = keyId;\n        this.eagerRefreshThresholdMillis = eagerRefreshThresholdMillis !== null && eagerRefreshThresholdMillis !== void 0 ? eagerRefreshThresholdMillis : 5 * 60 * 1000;\n    }\n    /**\n     * Ensures that we're caching a key appropriately, giving precedence to scopes vs. url\n     *\n     * @param url The URI being authorized.\n     * @param scopes The scope or scopes being authorized\n     * @returns A string that returns the cached key.\n     */ getCachedKey(url, scopes) {\n        let cacheKey = url;\n        if (scopes && Array.isArray(scopes) && scopes.length) {\n            cacheKey = url ? `${url}_${scopes.join(\"_\")}` : `${scopes.join(\"_\")}`;\n        } else if (typeof scopes === \"string\") {\n            cacheKey = url ? `${url}_${scopes}` : scopes;\n        }\n        if (!cacheKey) {\n            throw Error(\"Scopes or url must be provided\");\n        }\n        return cacheKey;\n    }\n    /**\n     * Get a non-expired access token, after refreshing if necessary.\n     *\n     * @param url The URI being authorized.\n     * @param additionalClaims An object with a set of additional claims to\n     * include in the payload.\n     * @returns An object that includes the authorization header.\n     */ getRequestHeaders(url, additionalClaims, scopes) {\n        // Return cached authorization headers, unless we are within\n        // eagerRefreshThresholdMillis ms of them expiring:\n        const key = this.getCachedKey(url, scopes);\n        const cachedToken = this.cache.get(key);\n        const now = Date.now();\n        if (cachedToken && cachedToken.expiration - now > this.eagerRefreshThresholdMillis) {\n            return cachedToken.headers;\n        }\n        const iat = Math.floor(Date.now() / 1000);\n        const exp = JWTAccess.getExpirationTime(iat);\n        let defaultClaims;\n        // Turn scopes into space-separated string\n        if (Array.isArray(scopes)) {\n            scopes = scopes.join(\" \");\n        }\n        // If scopes are specified, sign with scopes\n        if (scopes) {\n            defaultClaims = {\n                iss: this.email,\n                sub: this.email,\n                scope: scopes,\n                exp,\n                iat\n            };\n        } else {\n            defaultClaims = {\n                iss: this.email,\n                sub: this.email,\n                aud: url,\n                exp,\n                iat\n            };\n        }\n        // if additionalClaims are provided, ensure they do not collide with\n        // other required claims.\n        if (additionalClaims) {\n            for(const claim in defaultClaims){\n                if (additionalClaims[claim]) {\n                    throw new Error(`The '${claim}' property is not allowed when passing additionalClaims. This claim is included in the JWT by default.`);\n                }\n            }\n        }\n        const header = this.keyId ? {\n            ...DEFAULT_HEADER,\n            kid: this.keyId\n        } : DEFAULT_HEADER;\n        const payload = Object.assign(defaultClaims, additionalClaims);\n        // Sign the jwt and add it to the cache\n        const signedJWT = jws.sign({\n            header,\n            payload,\n            secret: this.key\n        });\n        const headers = {\n            Authorization: `Bearer ${signedJWT}`\n        };\n        this.cache.set(key, {\n            expiration: exp * 1000,\n            headers\n        });\n        return headers;\n    }\n    /**\n     * Returns an expiration time for the JWT token.\n     *\n     * @param iat The issued at time for the JWT.\n     * @returns An expiration time for the JWT.\n     */ static getExpirationTime(iat) {\n        const exp = iat + 3600; // 3600 seconds = 1 hour\n        return exp;\n    }\n    /**\n     * Create a JWTAccess credentials instance using the given input options.\n     * @param json The input object.\n     */ fromJSON(json) {\n        if (!json) {\n            throw new Error(\"Must pass in a JSON object containing the service account auth settings.\");\n        }\n        if (!json.client_email) {\n            throw new Error(\"The incoming JSON object does not contain a client_email field\");\n        }\n        if (!json.private_key) {\n            throw new Error(\"The incoming JSON object does not contain a private_key field\");\n        }\n        // Extract the relevant information from the json key file.\n        this.email = json.client_email;\n        this.key = json.private_key;\n        this.keyId = json.private_key_id;\n        this.projectId = json.project_id;\n    }\n    fromStream(inputStream, callback) {\n        if (callback) {\n            this.fromStreamAsync(inputStream).then(()=>callback(), callback);\n        } else {\n            return this.fromStreamAsync(inputStream);\n        }\n    }\n    fromStreamAsync(inputStream) {\n        return new Promise((resolve, reject)=>{\n            if (!inputStream) {\n                reject(new Error(\"Must pass in a stream containing the service account auth settings.\"));\n            }\n            let s = \"\";\n            inputStream.setEncoding(\"utf8\").on(\"data\", (chunk)=>s += chunk).on(\"error\", reject).on(\"end\", ()=>{\n                try {\n                    const data = JSON.parse(s);\n                    this.fromJSON(data);\n                    resolve();\n                } catch (err) {\n                    reject(err);\n                }\n            });\n        });\n    }\n}\nexports.JWTAccess = JWTAccess;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/google-auth-library/build/src/auth/jwtaccess.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/google-auth-library/build/src/auth/jwtclient.js":
/*!**********************************************************************!*\
  !*** ./node_modules/google-auth-library/build/src/auth/jwtclient.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright 2013 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.JWT = void 0;\nconst gtoken_1 = __webpack_require__(/*! gtoken */ \"(action-browser)/./node_modules/gtoken/build/src/index.js\");\nconst jwtaccess_1 = __webpack_require__(/*! ./jwtaccess */ \"(action-browser)/./node_modules/google-auth-library/build/src/auth/jwtaccess.js\");\nconst oauth2client_1 = __webpack_require__(/*! ./oauth2client */ \"(action-browser)/./node_modules/google-auth-library/build/src/auth/oauth2client.js\");\nconst authclient_1 = __webpack_require__(/*! ./authclient */ \"(action-browser)/./node_modules/google-auth-library/build/src/auth/authclient.js\");\nclass JWT extends oauth2client_1.OAuth2Client {\n    constructor(optionsOrEmail, keyFile, key, scopes, subject, keyId){\n        const opts = optionsOrEmail && typeof optionsOrEmail === \"object\" ? optionsOrEmail : {\n            email: optionsOrEmail,\n            keyFile,\n            key,\n            keyId,\n            scopes,\n            subject\n        };\n        super(opts);\n        this.email = opts.email;\n        this.keyFile = opts.keyFile;\n        this.key = opts.key;\n        this.keyId = opts.keyId;\n        this.scopes = opts.scopes;\n        this.subject = opts.subject;\n        this.additionalClaims = opts.additionalClaims;\n        // Start with an expired refresh token, which will automatically be\n        // refreshed before the first API call is made.\n        this.credentials = {\n            refresh_token: \"jwt-placeholder\",\n            expiry_date: 1\n        };\n    }\n    /**\n     * Creates a copy of the credential with the specified scopes.\n     * @param scopes List of requested scopes or a single scope.\n     * @return The cloned instance.\n     */ createScoped(scopes) {\n        const jwt = new JWT(this);\n        jwt.scopes = scopes;\n        return jwt;\n    }\n    /**\n     * Obtains the metadata to be sent with the request.\n     *\n     * @param url the URI being authorized.\n     */ async getRequestMetadataAsync(url) {\n        url = this.defaultServicePath ? `https://${this.defaultServicePath}/` : url;\n        const useSelfSignedJWT = !this.hasUserScopes() && url || this.useJWTAccessWithScope && this.hasAnyScopes() || this.universeDomain !== authclient_1.DEFAULT_UNIVERSE;\n        if (this.subject && this.universeDomain !== authclient_1.DEFAULT_UNIVERSE) {\n            throw new RangeError(`Service Account user is configured for the credential. Domain-wide delegation is not supported in universes other than ${authclient_1.DEFAULT_UNIVERSE}`);\n        }\n        if (!this.apiKey && useSelfSignedJWT) {\n            if (this.additionalClaims && this.additionalClaims.target_audience) {\n                const { tokens } = await this.refreshToken();\n                return {\n                    headers: this.addSharedMetadataHeaders({\n                        Authorization: `Bearer ${tokens.id_token}`\n                    })\n                };\n            } else {\n                // no scopes have been set, but a uri has been provided. Use JWTAccess\n                // credentials.\n                if (!this.access) {\n                    this.access = new jwtaccess_1.JWTAccess(this.email, this.key, this.keyId, this.eagerRefreshThresholdMillis);\n                }\n                let scopes;\n                if (this.hasUserScopes()) {\n                    scopes = this.scopes;\n                } else if (!url) {\n                    scopes = this.defaultScopes;\n                }\n                const useScopes = this.useJWTAccessWithScope || this.universeDomain !== authclient_1.DEFAULT_UNIVERSE;\n                const headers = await this.access.getRequestHeaders(url !== null && url !== void 0 ? url : undefined, this.additionalClaims, // Scopes take precedent over audience for signing,\n                // so we only provide them if `useJWTAccessWithScope` is on or\n                // if we are in a non-default universe\n                useScopes ? scopes : undefined);\n                return {\n                    headers: this.addSharedMetadataHeaders(headers)\n                };\n            }\n        } else if (this.hasAnyScopes() || this.apiKey) {\n            return super.getRequestMetadataAsync(url);\n        } else {\n            // If no audience, apiKey, or scopes are provided, we should not attempt\n            // to populate any headers:\n            return {\n                headers: {}\n            };\n        }\n    }\n    /**\n     * Fetches an ID token.\n     * @param targetAudience the audience for the fetched ID token.\n     */ async fetchIdToken(targetAudience) {\n        // Create a new gToken for fetching an ID token\n        const gtoken = new gtoken_1.GoogleToken({\n            iss: this.email,\n            sub: this.subject,\n            scope: this.scopes || this.defaultScopes,\n            keyFile: this.keyFile,\n            key: this.key,\n            additionalClaims: {\n                target_audience: targetAudience\n            },\n            transporter: this.transporter\n        });\n        await gtoken.getToken({\n            forceRefresh: true\n        });\n        if (!gtoken.idToken) {\n            throw new Error(\"Unknown error: Failed to fetch ID token\");\n        }\n        return gtoken.idToken;\n    }\n    /**\n     * Determine if there are currently scopes available.\n     */ hasUserScopes() {\n        if (!this.scopes) {\n            return false;\n        }\n        return this.scopes.length > 0;\n    }\n    /**\n     * Are there any default or user scopes defined.\n     */ hasAnyScopes() {\n        if (this.scopes && this.scopes.length > 0) return true;\n        if (this.defaultScopes && this.defaultScopes.length > 0) return true;\n        return false;\n    }\n    authorize(callback) {\n        if (callback) {\n            this.authorizeAsync().then((r)=>callback(null, r), callback);\n        } else {\n            return this.authorizeAsync();\n        }\n    }\n    async authorizeAsync() {\n        const result = await this.refreshToken();\n        if (!result) {\n            throw new Error(\"No result returned\");\n        }\n        this.credentials = result.tokens;\n        this.credentials.refresh_token = \"jwt-placeholder\";\n        this.key = this.gtoken.key;\n        this.email = this.gtoken.iss;\n        return result.tokens;\n    }\n    /**\n     * Refreshes the access token.\n     * @param refreshToken ignored\n     * @private\n     */ async refreshTokenNoCache(// eslint-disable-next-line @typescript-eslint/no-unused-vars\n    refreshToken) {\n        const gtoken = this.createGToken();\n        const token = await gtoken.getToken({\n            forceRefresh: this.isTokenExpiring()\n        });\n        const tokens = {\n            access_token: token.access_token,\n            token_type: \"Bearer\",\n            expiry_date: gtoken.expiresAt,\n            id_token: gtoken.idToken\n        };\n        this.emit(\"tokens\", tokens);\n        return {\n            res: null,\n            tokens\n        };\n    }\n    /**\n     * Create a gToken if it doesn't already exist.\n     */ createGToken() {\n        if (!this.gtoken) {\n            this.gtoken = new gtoken_1.GoogleToken({\n                iss: this.email,\n                sub: this.subject,\n                scope: this.scopes || this.defaultScopes,\n                keyFile: this.keyFile,\n                key: this.key,\n                additionalClaims: this.additionalClaims,\n                transporter: this.transporter\n            });\n        }\n        return this.gtoken;\n    }\n    /**\n     * Create a JWT credentials instance using the given input options.\n     * @param json The input object.\n     */ fromJSON(json) {\n        if (!json) {\n            throw new Error(\"Must pass in a JSON object containing the service account auth settings.\");\n        }\n        if (!json.client_email) {\n            throw new Error(\"The incoming JSON object does not contain a client_email field\");\n        }\n        if (!json.private_key) {\n            throw new Error(\"The incoming JSON object does not contain a private_key field\");\n        }\n        // Extract the relevant information from the json key file.\n        this.email = json.client_email;\n        this.key = json.private_key;\n        this.keyId = json.private_key_id;\n        this.projectId = json.project_id;\n        this.quotaProjectId = json.quota_project_id;\n        this.universeDomain = json.universe_domain || this.universeDomain;\n    }\n    fromStream(inputStream, callback) {\n        if (callback) {\n            this.fromStreamAsync(inputStream).then(()=>callback(), callback);\n        } else {\n            return this.fromStreamAsync(inputStream);\n        }\n    }\n    fromStreamAsync(inputStream) {\n        return new Promise((resolve, reject)=>{\n            if (!inputStream) {\n                throw new Error(\"Must pass in a stream containing the service account auth settings.\");\n            }\n            let s = \"\";\n            inputStream.setEncoding(\"utf8\").on(\"error\", reject).on(\"data\", (chunk)=>s += chunk).on(\"end\", ()=>{\n                try {\n                    const data = JSON.parse(s);\n                    this.fromJSON(data);\n                    resolve();\n                } catch (e) {\n                    reject(e);\n                }\n            });\n        });\n    }\n    /**\n     * Creates a JWT credentials instance using an API Key for authentication.\n     * @param apiKey The API Key in string form.\n     */ fromAPIKey(apiKey) {\n        if (typeof apiKey !== \"string\") {\n            throw new Error(\"Must provide an API Key string.\");\n        }\n        this.apiKey = apiKey;\n    }\n    /**\n     * Using the key or keyFile on the JWT client, obtain an object that contains\n     * the key and the client email.\n     */ async getCredentials() {\n        if (this.key) {\n            return {\n                private_key: this.key,\n                client_email: this.email\n            };\n        } else if (this.keyFile) {\n            const gtoken = this.createGToken();\n            const creds = await gtoken.getCredentials(this.keyFile);\n            return {\n                private_key: creds.privateKey,\n                client_email: creds.clientEmail\n            };\n        }\n        throw new Error(\"A key or a keyFile must be provided to getCredentials.\");\n    }\n}\nexports.JWT = JWT;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/google-auth-library/build/src/auth/jwtclient.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/google-auth-library/build/src/auth/loginticket.js":
/*!************************************************************************!*\
  !*** ./node_modules/google-auth-library/build/src/auth/loginticket.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n// Copyright 2014 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.LoginTicket = void 0;\nclass LoginTicket {\n    /**\n     * Create a simple class to extract user ID from an ID Token\n     *\n     * @param {string} env Envelope of the jwt\n     * @param {TokenPayload} pay Payload of the jwt\n     * @constructor\n     */ constructor(env, pay){\n        this.envelope = env;\n        this.payload = pay;\n    }\n    getEnvelope() {\n        return this.envelope;\n    }\n    getPayload() {\n        return this.payload;\n    }\n    /**\n     * Create a simple class to extract user ID from an ID Token\n     *\n     * @return The user ID\n     */ getUserId() {\n        const payload = this.getPayload();\n        if (payload && payload.sub) {\n            return payload.sub;\n        }\n        return null;\n    }\n    /**\n     * Returns attributes from the login ticket.  This can contain\n     * various information about the user session.\n     *\n     * @return The envelope and payload\n     */ getAttributes() {\n        return {\n            envelope: this.getEnvelope(),\n            payload: this.getPayload()\n        };\n    }\n}\nexports.LoginTicket = LoginTicket;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9nb29nbGUtYXV0aC1saWJyYXJ5L2J1aWxkL3NyYy9hdXRoL2xvZ2ludGlja2V0LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsNEJBQTRCO0FBQzVCLEVBQUU7QUFDRixrRUFBa0U7QUFDbEUsbUVBQW1FO0FBQ25FLDBDQUEwQztBQUMxQyxFQUFFO0FBQ0Ysa0RBQWtEO0FBQ2xELEVBQUU7QUFDRixzRUFBc0U7QUFDdEUsb0VBQW9FO0FBQ3BFLDJFQUEyRTtBQUMzRSxzRUFBc0U7QUFDdEUsaUNBQWlDO0FBQ2pDQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsbUJBQW1CLEdBQUcsS0FBSztBQUMzQixNQUFNRTtJQUNGOzs7Ozs7S0FNQyxHQUNEQyxZQUFZQyxHQUFHLEVBQUVDLEdBQUcsQ0FBRTtRQUNsQixJQUFJLENBQUNDLFFBQVEsR0FBR0Y7UUFDaEIsSUFBSSxDQUFDRyxPQUFPLEdBQUdGO0lBQ25CO0lBQ0FHLGNBQWM7UUFDVixPQUFPLElBQUksQ0FBQ0YsUUFBUTtJQUN4QjtJQUNBRyxhQUFhO1FBQ1QsT0FBTyxJQUFJLENBQUNGLE9BQU87SUFDdkI7SUFDQTs7OztLQUlDLEdBQ0RHLFlBQVk7UUFDUixNQUFNSCxVQUFVLElBQUksQ0FBQ0UsVUFBVTtRQUMvQixJQUFJRixXQUFXQSxRQUFRSSxHQUFHLEVBQUU7WUFDeEIsT0FBT0osUUFBUUksR0FBRztRQUN0QjtRQUNBLE9BQU87SUFDWDtJQUNBOzs7OztLQUtDLEdBQ0RDLGdCQUFnQjtRQUNaLE9BQU87WUFBRU4sVUFBVSxJQUFJLENBQUNFLFdBQVc7WUFBSUQsU0FBUyxJQUFJLENBQUNFLFVBQVU7UUFBRztJQUN0RTtBQUNKO0FBQ0FULG1CQUFtQixHQUFHRSIsInNvdXJjZXMiOlsid2VicGFjazovL3Nwb3RpZnktdG8teW91dHViZS8uL25vZGVfbW9kdWxlcy9nb29nbGUtYXV0aC1saWJyYXJ5L2J1aWxkL3NyYy9hdXRoL2xvZ2ludGlja2V0LmpzP2Y3OWMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgMjAxNCBHb29nbGUgTExDXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuTG9naW5UaWNrZXQgPSB2b2lkIDA7XG5jbGFzcyBMb2dpblRpY2tldCB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgc2ltcGxlIGNsYXNzIHRvIGV4dHJhY3QgdXNlciBJRCBmcm9tIGFuIElEIFRva2VuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZW52IEVudmVsb3BlIG9mIHRoZSBqd3RcbiAgICAgKiBAcGFyYW0ge1Rva2VuUGF5bG9hZH0gcGF5IFBheWxvYWQgb2YgdGhlIGp3dFxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGVudiwgcGF5KSB7XG4gICAgICAgIHRoaXMuZW52ZWxvcGUgPSBlbnY7XG4gICAgICAgIHRoaXMucGF5bG9hZCA9IHBheTtcbiAgICB9XG4gICAgZ2V0RW52ZWxvcGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVudmVsb3BlO1xuICAgIH1cbiAgICBnZXRQYXlsb2FkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wYXlsb2FkO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBzaW1wbGUgY2xhc3MgdG8gZXh0cmFjdCB1c2VyIElEIGZyb20gYW4gSUQgVG9rZW5cbiAgICAgKlxuICAgICAqIEByZXR1cm4gVGhlIHVzZXIgSURcbiAgICAgKi9cbiAgICBnZXRVc2VySWQoKSB7XG4gICAgICAgIGNvbnN0IHBheWxvYWQgPSB0aGlzLmdldFBheWxvYWQoKTtcbiAgICAgICAgaWYgKHBheWxvYWQgJiYgcGF5bG9hZC5zdWIpIHtcbiAgICAgICAgICAgIHJldHVybiBwYXlsb2FkLnN1YjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhdHRyaWJ1dGVzIGZyb20gdGhlIGxvZ2luIHRpY2tldC4gIFRoaXMgY2FuIGNvbnRhaW5cbiAgICAgKiB2YXJpb3VzIGluZm9ybWF0aW9uIGFib3V0IHRoZSB1c2VyIHNlc3Npb24uXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIFRoZSBlbnZlbG9wZSBhbmQgcGF5bG9hZFxuICAgICAqL1xuICAgIGdldEF0dHJpYnV0ZXMoKSB7XG4gICAgICAgIHJldHVybiB7IGVudmVsb3BlOiB0aGlzLmdldEVudmVsb3BlKCksIHBheWxvYWQ6IHRoaXMuZ2V0UGF5bG9hZCgpIH07XG4gICAgfVxufVxuZXhwb3J0cy5Mb2dpblRpY2tldCA9IExvZ2luVGlja2V0O1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiTG9naW5UaWNrZXQiLCJjb25zdHJ1Y3RvciIsImVudiIsInBheSIsImVudmVsb3BlIiwicGF5bG9hZCIsImdldEVudmVsb3BlIiwiZ2V0UGF5bG9hZCIsImdldFVzZXJJZCIsInN1YiIsImdldEF0dHJpYnV0ZXMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/google-auth-library/build/src/auth/loginticket.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/google-auth-library/build/src/auth/oauth2client.js":
/*!*************************************************************************!*\
  !*** ./node_modules/google-auth-library/build/src/auth/oauth2client.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.OAuth2Client = exports.CertificateFormat = exports.CodeChallengeMethod = void 0;\nconst gaxios_1 = __webpack_require__(/*! gaxios */ \"(action-browser)/./node_modules/gaxios/build/src/index.js\");\nconst querystring = __webpack_require__(/*! querystring */ \"querystring\");\nconst stream = __webpack_require__(/*! stream */ \"stream\");\nconst formatEcdsa = __webpack_require__(/*! ecdsa-sig-formatter */ \"(action-browser)/./node_modules/ecdsa-sig-formatter/src/ecdsa-sig-formatter.js\");\nconst crypto_1 = __webpack_require__(/*! ../crypto/crypto */ \"(action-browser)/./node_modules/google-auth-library/build/src/crypto/crypto.js\");\nconst authclient_1 = __webpack_require__(/*! ./authclient */ \"(action-browser)/./node_modules/google-auth-library/build/src/auth/authclient.js\");\nconst loginticket_1 = __webpack_require__(/*! ./loginticket */ \"(action-browser)/./node_modules/google-auth-library/build/src/auth/loginticket.js\");\nvar CodeChallengeMethod;\n(function(CodeChallengeMethod) {\n    CodeChallengeMethod[\"Plain\"] = \"plain\";\n    CodeChallengeMethod[\"S256\"] = \"S256\";\n})(CodeChallengeMethod || (exports.CodeChallengeMethod = CodeChallengeMethod = {}));\nvar CertificateFormat;\n(function(CertificateFormat) {\n    CertificateFormat[\"PEM\"] = \"PEM\";\n    CertificateFormat[\"JWK\"] = \"JWK\";\n})(CertificateFormat || (exports.CertificateFormat = CertificateFormat = {}));\nclass OAuth2Client extends authclient_1.AuthClient {\n    constructor(optionsOrClientId, clientSecret, redirectUri){\n        const opts = optionsOrClientId && typeof optionsOrClientId === \"object\" ? optionsOrClientId : {\n            clientId: optionsOrClientId,\n            clientSecret,\n            redirectUri\n        };\n        super(opts);\n        this.certificateCache = {};\n        this.certificateExpiry = null;\n        this.certificateCacheFormat = CertificateFormat.PEM;\n        this.refreshTokenPromises = new Map();\n        this._clientId = opts.clientId;\n        this._clientSecret = opts.clientSecret;\n        this.redirectUri = opts.redirectUri;\n        this.endpoints = {\n            tokenInfoUrl: \"https://oauth2.googleapis.com/tokeninfo\",\n            oauth2AuthBaseUrl: \"https://accounts.google.com/o/oauth2/v2/auth\",\n            oauth2TokenUrl: \"https://oauth2.googleapis.com/token\",\n            oauth2RevokeUrl: \"https://oauth2.googleapis.com/revoke\",\n            oauth2FederatedSignonPemCertsUrl: \"https://www.googleapis.com/oauth2/v1/certs\",\n            oauth2FederatedSignonJwkCertsUrl: \"https://www.googleapis.com/oauth2/v3/certs\",\n            oauth2IapPublicKeyUrl: \"https://www.gstatic.com/iap/verify/public_key\",\n            ...opts.endpoints\n        };\n        this.issuers = opts.issuers || [\n            \"accounts.google.com\",\n            \"https://accounts.google.com\",\n            this.universeDomain\n        ];\n    }\n    /**\n     * Generates URL for consent page landing.\n     * @param opts Options.\n     * @return URL to consent page.\n     */ generateAuthUrl(opts = {}) {\n        if (opts.code_challenge_method && !opts.code_challenge) {\n            throw new Error(\"If a code_challenge_method is provided, code_challenge must be included.\");\n        }\n        opts.response_type = opts.response_type || \"code\";\n        opts.client_id = opts.client_id || this._clientId;\n        opts.redirect_uri = opts.redirect_uri || this.redirectUri;\n        // Allow scopes to be passed either as array or a string\n        if (Array.isArray(opts.scope)) {\n            opts.scope = opts.scope.join(\" \");\n        }\n        const rootUrl = this.endpoints.oauth2AuthBaseUrl.toString();\n        return rootUrl + \"?\" + querystring.stringify(opts);\n    }\n    generateCodeVerifier() {\n        // To make the code compatible with browser SubtleCrypto we need to make\n        // this method async.\n        throw new Error(\"generateCodeVerifier is removed, please use generateCodeVerifierAsync instead.\");\n    }\n    /**\n     * Convenience method to automatically generate a code_verifier, and its\n     * resulting SHA256. If used, this must be paired with a S256\n     * code_challenge_method.\n     *\n     * For a full example see:\n     * https://github.com/googleapis/google-auth-library-nodejs/blob/main/samples/oauth2-codeVerifier.js\n     */ async generateCodeVerifierAsync() {\n        // base64 encoding uses 6 bits per character, and we want to generate128\n        // characters. 6*128/8 = 96.\n        const crypto = (0, crypto_1.createCrypto)();\n        const randomString = crypto.randomBytesBase64(96);\n        // The valid characters in the code_verifier are [A-Z]/[a-z]/[0-9]/\n        // \"-\"/\".\"/\"_\"/\"~\". Base64 encoded strings are pretty close, so we're just\n        // swapping out a few chars.\n        const codeVerifier = randomString.replace(/\\+/g, \"~\").replace(/=/g, \"_\").replace(/\\//g, \"-\");\n        // Generate the base64 encoded SHA256\n        const unencodedCodeChallenge = await crypto.sha256DigestBase64(codeVerifier);\n        // We need to use base64UrlEncoding instead of standard base64\n        const codeChallenge = unencodedCodeChallenge.split(\"=\")[0].replace(/\\+/g, \"-\").replace(/\\//g, \"_\");\n        return {\n            codeVerifier,\n            codeChallenge\n        };\n    }\n    getToken(codeOrOptions, callback) {\n        const options = typeof codeOrOptions === \"string\" ? {\n            code: codeOrOptions\n        } : codeOrOptions;\n        if (callback) {\n            this.getTokenAsync(options).then((r)=>callback(null, r.tokens, r.res), (e)=>callback(e, null, e.response));\n        } else {\n            return this.getTokenAsync(options);\n        }\n    }\n    async getTokenAsync(options) {\n        const url = this.endpoints.oauth2TokenUrl.toString();\n        const values = {\n            code: options.code,\n            client_id: options.client_id || this._clientId,\n            client_secret: this._clientSecret,\n            redirect_uri: options.redirect_uri || this.redirectUri,\n            grant_type: \"authorization_code\",\n            code_verifier: options.codeVerifier\n        };\n        const res = await this.transporter.request({\n            method: \"POST\",\n            url,\n            data: querystring.stringify(values),\n            headers: {\n                \"Content-Type\": \"application/x-www-form-urlencoded\"\n            }\n        });\n        const tokens = res.data;\n        if (res.data && res.data.expires_in) {\n            tokens.expiry_date = new Date().getTime() + res.data.expires_in * 1000;\n            delete tokens.expires_in;\n        }\n        this.emit(\"tokens\", tokens);\n        return {\n            tokens,\n            res\n        };\n    }\n    /**\n     * Refreshes the access token.\n     * @param refresh_token Existing refresh token.\n     * @private\n     */ async refreshToken(refreshToken) {\n        if (!refreshToken) {\n            return this.refreshTokenNoCache(refreshToken);\n        }\n        // If a request to refresh using the same token has started,\n        // return the same promise.\n        if (this.refreshTokenPromises.has(refreshToken)) {\n            return this.refreshTokenPromises.get(refreshToken);\n        }\n        const p = this.refreshTokenNoCache(refreshToken).then((r)=>{\n            this.refreshTokenPromises.delete(refreshToken);\n            return r;\n        }, (e)=>{\n            this.refreshTokenPromises.delete(refreshToken);\n            throw e;\n        });\n        this.refreshTokenPromises.set(refreshToken, p);\n        return p;\n    }\n    async refreshTokenNoCache(refreshToken) {\n        var _a;\n        if (!refreshToken) {\n            throw new Error(\"No refresh token is set.\");\n        }\n        const url = this.endpoints.oauth2TokenUrl.toString();\n        const data = {\n            refresh_token: refreshToken,\n            client_id: this._clientId,\n            client_secret: this._clientSecret,\n            grant_type: \"refresh_token\"\n        };\n        let res;\n        try {\n            // request for new token\n            res = await this.transporter.request({\n                method: \"POST\",\n                url,\n                data: querystring.stringify(data),\n                headers: {\n                    \"Content-Type\": \"application/x-www-form-urlencoded\"\n                }\n            });\n        } catch (e) {\n            if (e instanceof gaxios_1.GaxiosError && e.message === \"invalid_grant\" && ((_a = e.response) === null || _a === void 0 ? void 0 : _a.data) && /ReAuth/i.test(e.response.data.error_description)) {\n                e.message = JSON.stringify(e.response.data);\n            }\n            throw e;\n        }\n        const tokens = res.data;\n        // TODO: de-duplicate this code from a few spots\n        if (res.data && res.data.expires_in) {\n            tokens.expiry_date = new Date().getTime() + res.data.expires_in * 1000;\n            delete tokens.expires_in;\n        }\n        this.emit(\"tokens\", tokens);\n        return {\n            tokens,\n            res\n        };\n    }\n    refreshAccessToken(callback) {\n        if (callback) {\n            this.refreshAccessTokenAsync().then((r)=>callback(null, r.credentials, r.res), callback);\n        } else {\n            return this.refreshAccessTokenAsync();\n        }\n    }\n    async refreshAccessTokenAsync() {\n        const r = await this.refreshToken(this.credentials.refresh_token);\n        const tokens = r.tokens;\n        tokens.refresh_token = this.credentials.refresh_token;\n        this.credentials = tokens;\n        return {\n            credentials: this.credentials,\n            res: r.res\n        };\n    }\n    getAccessToken(callback) {\n        if (callback) {\n            this.getAccessTokenAsync().then((r)=>callback(null, r.token, r.res), callback);\n        } else {\n            return this.getAccessTokenAsync();\n        }\n    }\n    async getAccessTokenAsync() {\n        const shouldRefresh = !this.credentials.access_token || this.isTokenExpiring();\n        if (shouldRefresh) {\n            if (!this.credentials.refresh_token) {\n                if (this.refreshHandler) {\n                    const refreshedAccessToken = await this.processAndValidateRefreshHandler();\n                    if (refreshedAccessToken === null || refreshedAccessToken === void 0 ? void 0 : refreshedAccessToken.access_token) {\n                        this.setCredentials(refreshedAccessToken);\n                        return {\n                            token: this.credentials.access_token\n                        };\n                    }\n                } else {\n                    throw new Error(\"No refresh token or refresh handler callback is set.\");\n                }\n            }\n            const r = await this.refreshAccessTokenAsync();\n            if (!r.credentials || r.credentials && !r.credentials.access_token) {\n                throw new Error(\"Could not refresh access token.\");\n            }\n            return {\n                token: r.credentials.access_token,\n                res: r.res\n            };\n        } else {\n            return {\n                token: this.credentials.access_token\n            };\n        }\n    }\n    /**\n     * The main authentication interface.  It takes an optional url which when\n     * present is the endpoint being accessed, and returns a Promise which\n     * resolves with authorization header fields.\n     *\n     * In OAuth2Client, the result has the form:\n     * { Authorization: 'Bearer <access_token_value>' }\n     * @param url The optional url being authorized\n     */ async getRequestHeaders(url) {\n        const headers = (await this.getRequestMetadataAsync(url)).headers;\n        return headers;\n    }\n    async getRequestMetadataAsync(// eslint-disable-next-line @typescript-eslint/no-unused-vars\n    url) {\n        const thisCreds = this.credentials;\n        if (!thisCreds.access_token && !thisCreds.refresh_token && !this.apiKey && !this.refreshHandler) {\n            throw new Error(\"No access, refresh token, API key or refresh handler callback is set.\");\n        }\n        if (thisCreds.access_token && !this.isTokenExpiring()) {\n            thisCreds.token_type = thisCreds.token_type || \"Bearer\";\n            const headers = {\n                Authorization: thisCreds.token_type + \" \" + thisCreds.access_token\n            };\n            return {\n                headers: this.addSharedMetadataHeaders(headers)\n            };\n        }\n        // If refreshHandler exists, call processAndValidateRefreshHandler().\n        if (this.refreshHandler) {\n            const refreshedAccessToken = await this.processAndValidateRefreshHandler();\n            if (refreshedAccessToken === null || refreshedAccessToken === void 0 ? void 0 : refreshedAccessToken.access_token) {\n                this.setCredentials(refreshedAccessToken);\n                const headers = {\n                    Authorization: \"Bearer \" + this.credentials.access_token\n                };\n                return {\n                    headers: this.addSharedMetadataHeaders(headers)\n                };\n            }\n        }\n        if (this.apiKey) {\n            return {\n                headers: {\n                    \"X-Goog-Api-Key\": this.apiKey\n                }\n            };\n        }\n        let r = null;\n        let tokens = null;\n        try {\n            r = await this.refreshToken(thisCreds.refresh_token);\n            tokens = r.tokens;\n        } catch (err) {\n            const e = err;\n            if (e.response && (e.response.status === 403 || e.response.status === 404)) {\n                e.message = `Could not refresh access token: ${e.message}`;\n            }\n            throw e;\n        }\n        const credentials = this.credentials;\n        credentials.token_type = credentials.token_type || \"Bearer\";\n        tokens.refresh_token = credentials.refresh_token;\n        this.credentials = tokens;\n        const headers = {\n            Authorization: credentials.token_type + \" \" + tokens.access_token\n        };\n        return {\n            headers: this.addSharedMetadataHeaders(headers),\n            res: r.res\n        };\n    }\n    /**\n     * Generates an URL to revoke the given token.\n     * @param token The existing token to be revoked.\n     *\n     * @deprecated use instance method {@link OAuth2Client.getRevokeTokenURL}\n     */ static getRevokeTokenUrl(token) {\n        return new OAuth2Client().getRevokeTokenURL(token).toString();\n    }\n    /**\n     * Generates a URL to revoke the given token.\n     *\n     * @param token The existing token to be revoked.\n     */ getRevokeTokenURL(token) {\n        const url = new URL(this.endpoints.oauth2RevokeUrl);\n        url.searchParams.append(\"token\", token);\n        return url;\n    }\n    revokeToken(token, callback) {\n        const opts = {\n            url: this.getRevokeTokenURL(token).toString(),\n            method: \"POST\"\n        };\n        if (callback) {\n            this.transporter.request(opts).then((r)=>callback(null, r), callback);\n        } else {\n            return this.transporter.request(opts);\n        }\n    }\n    revokeCredentials(callback) {\n        if (callback) {\n            this.revokeCredentialsAsync().then((res)=>callback(null, res), callback);\n        } else {\n            return this.revokeCredentialsAsync();\n        }\n    }\n    async revokeCredentialsAsync() {\n        const token = this.credentials.access_token;\n        this.credentials = {};\n        if (token) {\n            return this.revokeToken(token);\n        } else {\n            throw new Error(\"No access token to revoke.\");\n        }\n    }\n    request(opts, callback) {\n        if (callback) {\n            this.requestAsync(opts).then((r)=>callback(null, r), (e)=>{\n                return callback(e, e.response);\n            });\n        } else {\n            return this.requestAsync(opts);\n        }\n    }\n    async requestAsync(opts, retry = false) {\n        let r2;\n        try {\n            const r = await this.getRequestMetadataAsync(opts.url);\n            opts.headers = opts.headers || {};\n            if (r.headers && r.headers[\"x-goog-user-project\"]) {\n                opts.headers[\"x-goog-user-project\"] = r.headers[\"x-goog-user-project\"];\n            }\n            if (r.headers && r.headers.Authorization) {\n                opts.headers.Authorization = r.headers.Authorization;\n            }\n            if (this.apiKey) {\n                opts.headers[\"X-Goog-Api-Key\"] = this.apiKey;\n            }\n            r2 = await this.transporter.request(opts);\n        } catch (e) {\n            const res = e.response;\n            if (res) {\n                const statusCode = res.status;\n                // Retry the request for metadata if the following criteria are true:\n                // - We haven't already retried.  It only makes sense to retry once.\n                // - The response was a 401 or a 403\n                // - The request didn't send a readableStream\n                // - An access_token and refresh_token were available, but either no\n                //   expiry_date was available or the forceRefreshOnFailure flag is set.\n                //   The absent expiry_date case can happen when developers stash the\n                //   access_token and refresh_token for later use, but the access_token\n                //   fails on the first try because it's expired. Some developers may\n                //   choose to enable forceRefreshOnFailure to mitigate time-related\n                //   errors.\n                // Or the following criteria are true:\n                // - We haven't already retried.  It only makes sense to retry once.\n                // - The response was a 401 or a 403\n                // - The request didn't send a readableStream\n                // - No refresh_token was available\n                // - An access_token and a refreshHandler callback were available, but\n                //   either no expiry_date was available or the forceRefreshOnFailure\n                //   flag is set. The access_token fails on the first try because it's\n                //   expired. Some developers may choose to enable forceRefreshOnFailure\n                //   to mitigate time-related errors.\n                const mayRequireRefresh = this.credentials && this.credentials.access_token && this.credentials.refresh_token && (!this.credentials.expiry_date || this.forceRefreshOnFailure);\n                const mayRequireRefreshWithNoRefreshToken = this.credentials && this.credentials.access_token && !this.credentials.refresh_token && (!this.credentials.expiry_date || this.forceRefreshOnFailure) && this.refreshHandler;\n                const isReadableStream = res.config.data instanceof stream.Readable;\n                const isAuthErr = statusCode === 401 || statusCode === 403;\n                if (!retry && isAuthErr && !isReadableStream && mayRequireRefresh) {\n                    await this.refreshAccessTokenAsync();\n                    return this.requestAsync(opts, true);\n                } else if (!retry && isAuthErr && !isReadableStream && mayRequireRefreshWithNoRefreshToken) {\n                    const refreshedAccessToken = await this.processAndValidateRefreshHandler();\n                    if (refreshedAccessToken === null || refreshedAccessToken === void 0 ? void 0 : refreshedAccessToken.access_token) {\n                        this.setCredentials(refreshedAccessToken);\n                    }\n                    return this.requestAsync(opts, true);\n                }\n            }\n            throw e;\n        }\n        return r2;\n    }\n    verifyIdToken(options, callback) {\n        // This function used to accept two arguments instead of an options object.\n        // Check the types to help users upgrade with less pain.\n        // This check can be removed after a 2.0 release.\n        if (callback && typeof callback !== \"function\") {\n            throw new Error(\"This method accepts an options object as the first parameter, which includes the idToken, audience, and maxExpiry.\");\n        }\n        if (callback) {\n            this.verifyIdTokenAsync(options).then((r)=>callback(null, r), callback);\n        } else {\n            return this.verifyIdTokenAsync(options);\n        }\n    }\n    async verifyIdTokenAsync(options) {\n        if (!options.idToken) {\n            throw new Error(\"The verifyIdToken method requires an ID Token\");\n        }\n        const response = await this.getFederatedSignonCertsAsync();\n        const login = await this.verifySignedJwtWithCertsAsync(options.idToken, response.certs, options.audience, this.issuers, options.maxExpiry);\n        return login;\n    }\n    /**\n     * Obtains information about the provisioned access token.  Especially useful\n     * if you want to check the scopes that were provisioned to a given token.\n     *\n     * @param accessToken Required.  The Access Token for which you want to get\n     * user info.\n     */ async getTokenInfo(accessToken) {\n        const { data } = await this.transporter.request({\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/x-www-form-urlencoded\",\n                Authorization: `Bearer ${accessToken}`\n            },\n            url: this.endpoints.tokenInfoUrl.toString()\n        });\n        const info = Object.assign({\n            expiry_date: new Date().getTime() + data.expires_in * 1000,\n            scopes: data.scope.split(\" \")\n        }, data);\n        delete info.expires_in;\n        delete info.scope;\n        return info;\n    }\n    getFederatedSignonCerts(callback) {\n        if (callback) {\n            this.getFederatedSignonCertsAsync().then((r)=>callback(null, r.certs, r.res), callback);\n        } else {\n            return this.getFederatedSignonCertsAsync();\n        }\n    }\n    async getFederatedSignonCertsAsync() {\n        const nowTime = new Date().getTime();\n        const format = (0, crypto_1.hasBrowserCrypto)() ? CertificateFormat.JWK : CertificateFormat.PEM;\n        if (this.certificateExpiry && nowTime < this.certificateExpiry.getTime() && this.certificateCacheFormat === format) {\n            return {\n                certs: this.certificateCache,\n                format\n            };\n        }\n        let res;\n        let url;\n        switch(format){\n            case CertificateFormat.PEM:\n                url = this.endpoints.oauth2FederatedSignonPemCertsUrl.toString();\n                break;\n            case CertificateFormat.JWK:\n                url = this.endpoints.oauth2FederatedSignonJwkCertsUrl.toString();\n                break;\n            default:\n                throw new Error(`Unsupported certificate format ${format}`);\n        }\n        try {\n            res = await this.transporter.request({\n                url\n            });\n        } catch (e) {\n            if (e instanceof Error) {\n                e.message = `Failed to retrieve verification certificates: ${e.message}`;\n            }\n            throw e;\n        }\n        const cacheControl = res ? res.headers[\"cache-control\"] : undefined;\n        let cacheAge = -1;\n        if (cacheControl) {\n            const pattern = new RegExp(\"max-age=([0-9]*)\");\n            const regexResult = pattern.exec(cacheControl);\n            if (regexResult && regexResult.length === 2) {\n                // Cache results with max-age (in seconds)\n                cacheAge = Number(regexResult[1]) * 1000; // milliseconds\n            }\n        }\n        let certificates = {};\n        switch(format){\n            case CertificateFormat.PEM:\n                certificates = res.data;\n                break;\n            case CertificateFormat.JWK:\n                for (const key of res.data.keys){\n                    certificates[key.kid] = key;\n                }\n                break;\n            default:\n                throw new Error(`Unsupported certificate format ${format}`);\n        }\n        const now = new Date();\n        this.certificateExpiry = cacheAge === -1 ? null : new Date(now.getTime() + cacheAge);\n        this.certificateCache = certificates;\n        this.certificateCacheFormat = format;\n        return {\n            certs: certificates,\n            format,\n            res\n        };\n    }\n    getIapPublicKeys(callback) {\n        if (callback) {\n            this.getIapPublicKeysAsync().then((r)=>callback(null, r.pubkeys, r.res), callback);\n        } else {\n            return this.getIapPublicKeysAsync();\n        }\n    }\n    async getIapPublicKeysAsync() {\n        let res;\n        const url = this.endpoints.oauth2IapPublicKeyUrl.toString();\n        try {\n            res = await this.transporter.request({\n                url\n            });\n        } catch (e) {\n            if (e instanceof Error) {\n                e.message = `Failed to retrieve verification certificates: ${e.message}`;\n            }\n            throw e;\n        }\n        return {\n            pubkeys: res.data,\n            res\n        };\n    }\n    verifySignedJwtWithCerts() {\n        // To make the code compatible with browser SubtleCrypto we need to make\n        // this method async.\n        throw new Error(\"verifySignedJwtWithCerts is removed, please use verifySignedJwtWithCertsAsync instead.\");\n    }\n    /**\n     * Verify the id token is signed with the correct certificate\n     * and is from the correct audience.\n     * @param jwt The jwt to verify (The ID Token in this case).\n     * @param certs The array of certs to test the jwt against.\n     * @param requiredAudience The audience to test the jwt against.\n     * @param issuers The allowed issuers of the jwt (Optional).\n     * @param maxExpiry The max expiry the certificate can be (Optional).\n     * @return Returns a promise resolving to LoginTicket on verification.\n     */ async verifySignedJwtWithCertsAsync(jwt, certs, requiredAudience, issuers, maxExpiry) {\n        const crypto = (0, crypto_1.createCrypto)();\n        if (!maxExpiry) {\n            maxExpiry = OAuth2Client.DEFAULT_MAX_TOKEN_LIFETIME_SECS_;\n        }\n        const segments = jwt.split(\".\");\n        if (segments.length !== 3) {\n            throw new Error(\"Wrong number of segments in token: \" + jwt);\n        }\n        const signed = segments[0] + \".\" + segments[1];\n        let signature = segments[2];\n        let envelope;\n        let payload;\n        try {\n            envelope = JSON.parse(crypto.decodeBase64StringUtf8(segments[0]));\n        } catch (err) {\n            if (err instanceof Error) {\n                err.message = `Can't parse token envelope: ${segments[0]}': ${err.message}`;\n            }\n            throw err;\n        }\n        if (!envelope) {\n            throw new Error(\"Can't parse token envelope: \" + segments[0]);\n        }\n        try {\n            payload = JSON.parse(crypto.decodeBase64StringUtf8(segments[1]));\n        } catch (err) {\n            if (err instanceof Error) {\n                err.message = `Can't parse token payload '${segments[0]}`;\n            }\n            throw err;\n        }\n        if (!payload) {\n            throw new Error(\"Can't parse token payload: \" + segments[1]);\n        }\n        if (!Object.prototype.hasOwnProperty.call(certs, envelope.kid)) {\n            // If this is not present, then there's no reason to attempt verification\n            throw new Error(\"No pem found for envelope: \" + JSON.stringify(envelope));\n        }\n        const cert = certs[envelope.kid];\n        if (envelope.alg === \"ES256\") {\n            signature = formatEcdsa.joseToDer(signature, \"ES256\").toString(\"base64\");\n        }\n        const verified = await crypto.verify(cert, signed, signature);\n        if (!verified) {\n            throw new Error(\"Invalid token signature: \" + jwt);\n        }\n        if (!payload.iat) {\n            throw new Error(\"No issue time in token: \" + JSON.stringify(payload));\n        }\n        if (!payload.exp) {\n            throw new Error(\"No expiration time in token: \" + JSON.stringify(payload));\n        }\n        const iat = Number(payload.iat);\n        if (isNaN(iat)) throw new Error(\"iat field using invalid format\");\n        const exp = Number(payload.exp);\n        if (isNaN(exp)) throw new Error(\"exp field using invalid format\");\n        const now = new Date().getTime() / 1000;\n        if (exp >= now + maxExpiry) {\n            throw new Error(\"Expiration time too far in future: \" + JSON.stringify(payload));\n        }\n        const earliest = iat - OAuth2Client.CLOCK_SKEW_SECS_;\n        const latest = exp + OAuth2Client.CLOCK_SKEW_SECS_;\n        if (now < earliest) {\n            throw new Error(\"Token used too early, \" + now + \" < \" + earliest + \": \" + JSON.stringify(payload));\n        }\n        if (now > latest) {\n            throw new Error(\"Token used too late, \" + now + \" > \" + latest + \": \" + JSON.stringify(payload));\n        }\n        if (issuers && issuers.indexOf(payload.iss) < 0) {\n            throw new Error(\"Invalid issuer, expected one of [\" + issuers + \"], but got \" + payload.iss);\n        }\n        // Check the audience matches if we have one\n        if (typeof requiredAudience !== \"undefined\" && requiredAudience !== null) {\n            const aud = payload.aud;\n            let audVerified = false;\n            // If the requiredAudience is an array, check if it contains token\n            // audience\n            if (requiredAudience.constructor === Array) {\n                audVerified = requiredAudience.indexOf(aud) > -1;\n            } else {\n                audVerified = aud === requiredAudience;\n            }\n            if (!audVerified) {\n                throw new Error(\"Wrong recipient, payload audience != requiredAudience\");\n            }\n        }\n        return new loginticket_1.LoginTicket(envelope, payload);\n    }\n    /**\n     * Returns a promise that resolves with AccessTokenResponse type if\n     * refreshHandler is defined.\n     * If not, nothing is returned.\n     */ async processAndValidateRefreshHandler() {\n        if (this.refreshHandler) {\n            const accessTokenResponse = await this.refreshHandler();\n            if (!accessTokenResponse.access_token) {\n                throw new Error(\"No access token is returned by the refreshHandler callback.\");\n            }\n            return accessTokenResponse;\n        }\n        return;\n    }\n    /**\n     * Returns true if a token is expired or will expire within\n     * eagerRefreshThresholdMillismilliseconds.\n     * If there is no expiry time, assumes the token is not expired or expiring.\n     */ isTokenExpiring() {\n        const expiryDate = this.credentials.expiry_date;\n        return expiryDate ? expiryDate <= new Date().getTime() + this.eagerRefreshThresholdMillis : false;\n    }\n}\nexports.OAuth2Client = OAuth2Client;\n/**\n * @deprecated use instance's {@link OAuth2Client.endpoints}\n */ OAuth2Client.GOOGLE_TOKEN_INFO_URL = \"https://oauth2.googleapis.com/tokeninfo\";\n/**\n * Clock skew - five minutes in seconds\n */ OAuth2Client.CLOCK_SKEW_SECS_ = 300;\n/**\n * The default max Token Lifetime is one day in seconds\n */ OAuth2Client.DEFAULT_MAX_TOKEN_LIFETIME_SECS_ = 86400;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/google-auth-library/build/src/auth/oauth2client.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/google-auth-library/build/src/auth/oauth2common.js":
/*!*************************************************************************!*\
  !*** ./node_modules/google-auth-library/build/src/auth/oauth2common.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.getErrorFromOAuthErrorResponse = exports.OAuthClientAuthHandler = void 0;\nconst querystring = __webpack_require__(/*! querystring */ \"querystring\");\nconst crypto_1 = __webpack_require__(/*! ../crypto/crypto */ \"(action-browser)/./node_modules/google-auth-library/build/src/crypto/crypto.js\");\n/** List of HTTP methods that accept request bodies. */ const METHODS_SUPPORTING_REQUEST_BODY = [\n    \"PUT\",\n    \"POST\",\n    \"PATCH\"\n];\n/**\n * Abstract class for handling client authentication in OAuth-based\n * operations.\n * When request-body client authentication is used, only application/json and\n * application/x-www-form-urlencoded content types for HTTP methods that support\n * request bodies are supported.\n */ class OAuthClientAuthHandler {\n    /**\n     * Instantiates an OAuth client authentication handler.\n     * @param clientAuthentication The client auth credentials.\n     */ constructor(clientAuthentication){\n        this.clientAuthentication = clientAuthentication;\n        this.crypto = (0, crypto_1.createCrypto)();\n    }\n    /**\n     * Applies client authentication on the OAuth request's headers or POST\n     * body but does not process the request.\n     * @param opts The GaxiosOptions whose headers or data are to be modified\n     *   depending on the client authentication mechanism to be used.\n     * @param bearerToken The optional bearer token to use for authentication.\n     *   When this is used, no client authentication credentials are needed.\n     */ applyClientAuthenticationOptions(opts, bearerToken) {\n        // Inject authenticated header.\n        this.injectAuthenticatedHeaders(opts, bearerToken);\n        // Inject authenticated request body.\n        if (!bearerToken) {\n            this.injectAuthenticatedRequestBody(opts);\n        }\n    }\n    /**\n     * Applies client authentication on the request's header if either\n     * basic authentication or bearer token authentication is selected.\n     *\n     * @param opts The GaxiosOptions whose headers or data are to be modified\n     *   depending on the client authentication mechanism to be used.\n     * @param bearerToken The optional bearer token to use for authentication.\n     *   When this is used, no client authentication credentials are needed.\n     */ injectAuthenticatedHeaders(opts, bearerToken) {\n        var _a;\n        // Bearer token prioritized higher than basic Auth.\n        if (bearerToken) {\n            opts.headers = opts.headers || {};\n            Object.assign(opts.headers, {\n                Authorization: `Bearer ${bearerToken}}`\n            });\n        } else if (((_a = this.clientAuthentication) === null || _a === void 0 ? void 0 : _a.confidentialClientType) === \"basic\") {\n            opts.headers = opts.headers || {};\n            const clientId = this.clientAuthentication.clientId;\n            const clientSecret = this.clientAuthentication.clientSecret || \"\";\n            const base64EncodedCreds = this.crypto.encodeBase64StringUtf8(`${clientId}:${clientSecret}`);\n            Object.assign(opts.headers, {\n                Authorization: `Basic ${base64EncodedCreds}`\n            });\n        }\n    }\n    /**\n     * Applies client authentication on the request's body if request-body\n     * client authentication is selected.\n     *\n     * @param opts The GaxiosOptions whose headers or data are to be modified\n     *   depending on the client authentication mechanism to be used.\n     */ injectAuthenticatedRequestBody(opts) {\n        var _a;\n        if (((_a = this.clientAuthentication) === null || _a === void 0 ? void 0 : _a.confidentialClientType) === \"request-body\") {\n            const method = (opts.method || \"GET\").toUpperCase();\n            // Inject authenticated request body.\n            if (METHODS_SUPPORTING_REQUEST_BODY.indexOf(method) !== -1) {\n                // Get content-type.\n                let contentType;\n                const headers = opts.headers || {};\n                for(const key in headers){\n                    if (key.toLowerCase() === \"content-type\" && headers[key]) {\n                        contentType = headers[key].toLowerCase();\n                        break;\n                    }\n                }\n                if (contentType === \"application/x-www-form-urlencoded\") {\n                    opts.data = opts.data || \"\";\n                    const data = querystring.parse(opts.data);\n                    Object.assign(data, {\n                        client_id: this.clientAuthentication.clientId,\n                        client_secret: this.clientAuthentication.clientSecret || \"\"\n                    });\n                    opts.data = querystring.stringify(data);\n                } else if (contentType === \"application/json\") {\n                    opts.data = opts.data || {};\n                    Object.assign(opts.data, {\n                        client_id: this.clientAuthentication.clientId,\n                        client_secret: this.clientAuthentication.clientSecret || \"\"\n                    });\n                } else {\n                    throw new Error(`${contentType} content-types are not supported with ` + `${this.clientAuthentication.confidentialClientType} ` + \"client authentication\");\n                }\n            } else {\n                throw new Error(`${method} HTTP method does not support ` + `${this.clientAuthentication.confidentialClientType} ` + \"client authentication\");\n            }\n        }\n    }\n}\nexports.OAuthClientAuthHandler = OAuthClientAuthHandler;\n/**\n * Converts an OAuth error response to a native JavaScript Error.\n * @param resp The OAuth error response to convert to a native Error object.\n * @param err The optional original error. If provided, the error properties\n *   will be copied to the new error.\n * @return The converted native Error object.\n */ function getErrorFromOAuthErrorResponse(resp, err) {\n    // Error response.\n    const errorCode = resp.error;\n    const errorDescription = resp.error_description;\n    const errorUri = resp.error_uri;\n    let message = `Error code ${errorCode}`;\n    if (typeof errorDescription !== \"undefined\") {\n        message += `: ${errorDescription}`;\n    }\n    if (typeof errorUri !== \"undefined\") {\n        message += ` - ${errorUri}`;\n    }\n    const newError = new Error(message);\n    // Copy properties from original error to newly generated error.\n    if (err) {\n        const keys = Object.keys(err);\n        if (err.stack) {\n            // Copy error.stack if available.\n            keys.push(\"stack\");\n        }\n        keys.forEach((key)=>{\n            // Do not overwrite the message field.\n            if (key !== \"message\") {\n                Object.defineProperty(newError, key, {\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    value: err[key],\n                    writable: false,\n                    enumerable: true\n                });\n            }\n        });\n    }\n    return newError;\n}\nexports.getErrorFromOAuthErrorResponse = getErrorFromOAuthErrorResponse;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/google-auth-library/build/src/auth/oauth2common.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/google-auth-library/build/src/auth/pluggable-auth-client.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/google-auth-library/build/src/auth/pluggable-auth-client.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright 2022 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.PluggableAuthClient = exports.ExecutableError = void 0;\nconst baseexternalclient_1 = __webpack_require__(/*! ./baseexternalclient */ \"(action-browser)/./node_modules/google-auth-library/build/src/auth/baseexternalclient.js\");\nconst executable_response_1 = __webpack_require__(/*! ./executable-response */ \"(action-browser)/./node_modules/google-auth-library/build/src/auth/executable-response.js\");\nconst pluggable_auth_handler_1 = __webpack_require__(/*! ./pluggable-auth-handler */ \"(action-browser)/./node_modules/google-auth-library/build/src/auth/pluggable-auth-handler.js\");\n/**\n * Error thrown from the executable run by PluggableAuthClient.\n */ class ExecutableError extends Error {\n    constructor(message, code){\n        super(`The executable failed with exit code: ${code} and error message: ${message}.`);\n        this.code = code;\n        Object.setPrototypeOf(this, new.target.prototype);\n    }\n}\nexports.ExecutableError = ExecutableError;\n/**\n * The default executable timeout when none is provided, in milliseconds.\n */ const DEFAULT_EXECUTABLE_TIMEOUT_MILLIS = 30 * 1000;\n/**\n * The minimum allowed executable timeout in milliseconds.\n */ const MINIMUM_EXECUTABLE_TIMEOUT_MILLIS = 5 * 1000;\n/**\n * The maximum allowed executable timeout in milliseconds.\n */ const MAXIMUM_EXECUTABLE_TIMEOUT_MILLIS = 120 * 1000;\n/**\n * The environment variable to check to see if executable can be run.\n * Value must be set to '1' for the executable to run.\n */ const GOOGLE_EXTERNAL_ACCOUNT_ALLOW_EXECUTABLES = \"GOOGLE_EXTERNAL_ACCOUNT_ALLOW_EXECUTABLES\";\n/**\n * The maximum currently supported executable version.\n */ const MAXIMUM_EXECUTABLE_VERSION = 1;\n/**\n * PluggableAuthClient enables the exchange of workload identity pool external credentials for\n * Google access tokens by retrieving 3rd party tokens through a user supplied executable. These\n * scripts/executables are completely independent of the Google Cloud Auth libraries. These\n * credentials plug into ADC and will call the specified executable to retrieve the 3rd party token\n * to be exchanged for a Google access token.\n *\n * <p>To use these credentials, the GOOGLE_EXTERNAL_ACCOUNT_ALLOW_EXECUTABLES environment variable\n * must be set to '1'. This is for security reasons.\n *\n * <p>Both OIDC and SAML are supported. The executable must adhere to a specific response format\n * defined below.\n *\n * <p>The executable must print out the 3rd party token to STDOUT in JSON format. When an\n * output_file is specified in the credential configuration, the executable must also handle writing the\n * JSON response to this file.\n *\n * <pre>\n * OIDC response sample:\n * {\n *   \"version\": 1,\n *   \"success\": true,\n *   \"token_type\": \"urn:ietf:params:oauth:token-type:id_token\",\n *   \"id_token\": \"HEADER.PAYLOAD.SIGNATURE\",\n *   \"expiration_time\": 1620433341\n * }\n *\n * SAML2 response sample:\n * {\n *   \"version\": 1,\n *   \"success\": true,\n *   \"token_type\": \"urn:ietf:params:oauth:token-type:saml2\",\n *   \"saml_response\": \"...\",\n *   \"expiration_time\": 1620433341\n * }\n *\n * Error response sample:\n * {\n *   \"version\": 1,\n *   \"success\": false,\n *   \"code\": \"401\",\n *   \"message\": \"Error message.\"\n * }\n * </pre>\n *\n * <p>The \"expiration_time\" field in the JSON response is only required for successful\n * responses when an output file was specified in the credential configuration\n *\n * <p>The auth libraries will populate certain environment variables that will be accessible by the\n * executable, such as: GOOGLE_EXTERNAL_ACCOUNT_AUDIENCE, GOOGLE_EXTERNAL_ACCOUNT_TOKEN_TYPE,\n * GOOGLE_EXTERNAL_ACCOUNT_INTERACTIVE, GOOGLE_EXTERNAL_ACCOUNT_IMPERSONATED_EMAIL, and\n * GOOGLE_EXTERNAL_ACCOUNT_OUTPUT_FILE.\n *\n * <p>Please see this repositories README for a complete executable request/response specification.\n */ class PluggableAuthClient extends baseexternalclient_1.BaseExternalAccountClient {\n    /**\n     * Instantiates a PluggableAuthClient instance using the provided JSON\n     * object loaded from an external account credentials file.\n     * An error is thrown if the credential is not a valid pluggable auth credential.\n     * @param options The external account options object typically loaded from\n     *   the external account JSON credential file.\n     * @param additionalOptions **DEPRECATED, all options are available in the\n     *   `options` parameter.** Optional additional behavior customization options.\n     *   These currently customize expiration threshold time and whether to retry\n     *   on 401/403 API request errors.\n     */ constructor(options, additionalOptions){\n        super(options, additionalOptions);\n        if (!options.credential_source.executable) {\n            throw new Error('No valid Pluggable Auth \"credential_source\" provided.');\n        }\n        this.command = options.credential_source.executable.command;\n        if (!this.command) {\n            throw new Error('No valid Pluggable Auth \"credential_source\" provided.');\n        }\n        // Check if the provided timeout exists and if it is valid.\n        if (options.credential_source.executable.timeout_millis === undefined) {\n            this.timeoutMillis = DEFAULT_EXECUTABLE_TIMEOUT_MILLIS;\n        } else {\n            this.timeoutMillis = options.credential_source.executable.timeout_millis;\n            if (this.timeoutMillis < MINIMUM_EXECUTABLE_TIMEOUT_MILLIS || this.timeoutMillis > MAXIMUM_EXECUTABLE_TIMEOUT_MILLIS) {\n                throw new Error(`Timeout must be between ${MINIMUM_EXECUTABLE_TIMEOUT_MILLIS} and ` + `${MAXIMUM_EXECUTABLE_TIMEOUT_MILLIS} milliseconds.`);\n            }\n        }\n        this.outputFile = options.credential_source.executable.output_file;\n        this.handler = new pluggable_auth_handler_1.PluggableAuthHandler({\n            command: this.command,\n            timeoutMillis: this.timeoutMillis,\n            outputFile: this.outputFile\n        });\n        this.credentialSourceType = \"executable\";\n    }\n    /**\n     * Triggered when an external subject token is needed to be exchanged for a\n     * GCP access token via GCP STS endpoint.\n     * This uses the `options.credential_source` object to figure out how\n     * to retrieve the token using the current environment. In this case,\n     * this calls a user provided executable which returns the subject token.\n     * The logic is summarized as:\n     * 1. Validated that the executable is allowed to run. The\n     *    GOOGLE_EXTERNAL_ACCOUNT_ALLOW_EXECUTABLES environment must be set to\n     *    1 for security reasons.\n     * 2. If an output file is specified by the user, check the file location\n     *    for a response. If the file exists and contains a valid response,\n     *    return the subject token from the file.\n     * 3. Call the provided executable and return response.\n     * @return A promise that resolves with the external subject token.\n     */ async retrieveSubjectToken() {\n        // Check if the executable is allowed to run.\n        if (process.env[GOOGLE_EXTERNAL_ACCOUNT_ALLOW_EXECUTABLES] !== \"1\") {\n            throw new Error(\"Pluggable Auth executables need to be explicitly allowed to run by \" + \"setting the GOOGLE_EXTERNAL_ACCOUNT_ALLOW_EXECUTABLES environment \" + \"Variable to 1.\");\n        }\n        let executableResponse = undefined;\n        // Try to get cached executable response from output file.\n        if (this.outputFile) {\n            executableResponse = await this.handler.retrieveCachedResponse();\n        }\n        // If no response from output file, call the executable.\n        if (!executableResponse) {\n            // Set up environment map with required values for the executable.\n            const envMap = new Map();\n            envMap.set(\"GOOGLE_EXTERNAL_ACCOUNT_AUDIENCE\", this.audience);\n            envMap.set(\"GOOGLE_EXTERNAL_ACCOUNT_TOKEN_TYPE\", this.subjectTokenType);\n            // Always set to 0 because interactive mode is not supported.\n            envMap.set(\"GOOGLE_EXTERNAL_ACCOUNT_INTERACTIVE\", \"0\");\n            if (this.outputFile) {\n                envMap.set(\"GOOGLE_EXTERNAL_ACCOUNT_OUTPUT_FILE\", this.outputFile);\n            }\n            const serviceAccountEmail = this.getServiceAccountEmail();\n            if (serviceAccountEmail) {\n                envMap.set(\"GOOGLE_EXTERNAL_ACCOUNT_IMPERSONATED_EMAIL\", serviceAccountEmail);\n            }\n            executableResponse = await this.handler.retrieveResponseFromExecutable(envMap);\n        }\n        if (executableResponse.version > MAXIMUM_EXECUTABLE_VERSION) {\n            throw new Error(`Version of executable is not currently supported, maximum supported version is ${MAXIMUM_EXECUTABLE_VERSION}.`);\n        }\n        // Check that response was successful.\n        if (!executableResponse.success) {\n            throw new ExecutableError(executableResponse.errorMessage, executableResponse.errorCode);\n        }\n        // Check that response contains expiration time if output file was specified.\n        if (this.outputFile) {\n            if (!executableResponse.expirationTime) {\n                throw new executable_response_1.InvalidExpirationTimeFieldError(\"The executable response must contain the `expiration_time` field for successful responses when an output_file has been specified in the configuration.\");\n            }\n        }\n        // Check that response is not expired.\n        if (executableResponse.isExpired()) {\n            throw new Error(\"Executable response is expired.\");\n        }\n        // Return subject token from response.\n        return executableResponse.subjectToken;\n    }\n}\nexports.PluggableAuthClient = PluggableAuthClient;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/google-auth-library/build/src/auth/pluggable-auth-client.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/google-auth-library/build/src/auth/pluggable-auth-handler.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/google-auth-library/build/src/auth/pluggable-auth-handler.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright 2022 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.PluggableAuthHandler = void 0;\nconst pluggable_auth_client_1 = __webpack_require__(/*! ./pluggable-auth-client */ \"(action-browser)/./node_modules/google-auth-library/build/src/auth/pluggable-auth-client.js\");\nconst executable_response_1 = __webpack_require__(/*! ./executable-response */ \"(action-browser)/./node_modules/google-auth-library/build/src/auth/executable-response.js\");\nconst childProcess = __webpack_require__(/*! child_process */ \"child_process\");\nconst fs = __webpack_require__(/*! fs */ \"fs\");\n/**\n * A handler used to retrieve 3rd party token responses from user defined\n * executables and cached file output for the PluggableAuthClient class.\n */ class PluggableAuthHandler {\n    /**\n     * Instantiates a PluggableAuthHandler instance using the provided\n     * PluggableAuthHandlerOptions object.\n     */ constructor(options){\n        if (!options.command) {\n            throw new Error(\"No command provided.\");\n        }\n        this.commandComponents = PluggableAuthHandler.parseCommand(options.command);\n        this.timeoutMillis = options.timeoutMillis;\n        if (!this.timeoutMillis) {\n            throw new Error(\"No timeoutMillis provided.\");\n        }\n        this.outputFile = options.outputFile;\n    }\n    /**\n     * Calls user provided executable to get a 3rd party subject token and\n     * returns the response.\n     * @param envMap a Map of additional Environment Variables required for\n     *   the executable.\n     * @return A promise that resolves with the executable response.\n     */ retrieveResponseFromExecutable(envMap) {\n        return new Promise((resolve, reject)=>{\n            // Spawn process to run executable using added environment variables.\n            const child = childProcess.spawn(this.commandComponents[0], this.commandComponents.slice(1), {\n                env: {\n                    ...process.env,\n                    ...Object.fromEntries(envMap)\n                }\n            });\n            let output = \"\";\n            // Append stdout to output as executable runs.\n            child.stdout.on(\"data\", (data)=>{\n                output += data;\n            });\n            // Append stderr as executable runs.\n            child.stderr.on(\"data\", (err)=>{\n                output += err;\n            });\n            // Set up a timeout to end the child process and throw an error.\n            const timeout = setTimeout(()=>{\n                // Kill child process and remove listeners so 'close' event doesn't get\n                // read after child process is killed.\n                child.removeAllListeners();\n                child.kill();\n                return reject(new Error(\"The executable failed to finish within the timeout specified.\"));\n            }, this.timeoutMillis);\n            child.on(\"close\", (code)=>{\n                // Cancel timeout if executable closes before timeout is reached.\n                clearTimeout(timeout);\n                if (code === 0) {\n                    // If the executable completed successfully, try to return the parsed response.\n                    try {\n                        const responseJson = JSON.parse(output);\n                        const response = new executable_response_1.ExecutableResponse(responseJson);\n                        return resolve(response);\n                    } catch (error) {\n                        if (error instanceof executable_response_1.ExecutableResponseError) {\n                            return reject(error);\n                        }\n                        return reject(new executable_response_1.ExecutableResponseError(`The executable returned an invalid response: ${output}`));\n                    }\n                } else {\n                    return reject(new pluggable_auth_client_1.ExecutableError(output, code.toString()));\n                }\n            });\n        });\n    }\n    /**\n     * Checks user provided output file for response from previous run of\n     * executable and return the response if it exists, is formatted correctly, and is not expired.\n     */ async retrieveCachedResponse() {\n        if (!this.outputFile || this.outputFile.length === 0) {\n            return undefined;\n        }\n        let filePath;\n        try {\n            filePath = await fs.promises.realpath(this.outputFile);\n        } catch (_a) {\n            // If file path cannot be resolved, return undefined.\n            return undefined;\n        }\n        if (!(await fs.promises.lstat(filePath)).isFile()) {\n            // If path does not lead to file, return undefined.\n            return undefined;\n        }\n        const responseString = await fs.promises.readFile(filePath, {\n            encoding: \"utf8\"\n        });\n        if (responseString === \"\") {\n            return undefined;\n        }\n        try {\n            const responseJson = JSON.parse(responseString);\n            const response = new executable_response_1.ExecutableResponse(responseJson);\n            // Check if response is successful and unexpired.\n            if (response.isValid()) {\n                return new executable_response_1.ExecutableResponse(responseJson);\n            }\n            return undefined;\n        } catch (error) {\n            if (error instanceof executable_response_1.ExecutableResponseError) {\n                throw error;\n            }\n            throw new executable_response_1.ExecutableResponseError(`The output file contained an invalid response: ${responseString}`);\n        }\n    }\n    /**\n     * Parses given command string into component array, splitting on spaces unless\n     * spaces are between quotation marks.\n     */ static parseCommand(command) {\n        // Split the command into components by splitting on spaces,\n        // unless spaces are contained in quotation marks.\n        const components = command.match(/(?:[^\\s\"]+|\"[^\"]*\")+/g);\n        if (!components) {\n            throw new Error(`Provided command: \"${command}\" could not be parsed.`);\n        }\n        // Remove quotation marks from the beginning and end of each component if they are present.\n        for(let i = 0; i < components.length; i++){\n            if (components[i][0] === '\"' && components[i].slice(-1) === '\"') {\n                components[i] = components[i].slice(1, -1);\n            }\n        }\n        return components;\n    }\n}\nexports.PluggableAuthHandler = PluggableAuthHandler;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/google-auth-library/build/src/auth/pluggable-auth-handler.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/google-auth-library/build/src/auth/refreshclient.js":
/*!**************************************************************************!*\
  !*** ./node_modules/google-auth-library/build/src/auth/refreshclient.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright 2015 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.UserRefreshClient = exports.USER_REFRESH_ACCOUNT_TYPE = void 0;\nconst oauth2client_1 = __webpack_require__(/*! ./oauth2client */ \"(action-browser)/./node_modules/google-auth-library/build/src/auth/oauth2client.js\");\nexports.USER_REFRESH_ACCOUNT_TYPE = \"authorized_user\";\nclass UserRefreshClient extends oauth2client_1.OAuth2Client {\n    constructor(optionsOrClientId, clientSecret, refreshToken, eagerRefreshThresholdMillis, forceRefreshOnFailure){\n        const opts = optionsOrClientId && typeof optionsOrClientId === \"object\" ? optionsOrClientId : {\n            clientId: optionsOrClientId,\n            clientSecret,\n            refreshToken,\n            eagerRefreshThresholdMillis,\n            forceRefreshOnFailure\n        };\n        super(opts);\n        this._refreshToken = opts.refreshToken;\n        this.credentials.refresh_token = opts.refreshToken;\n    }\n    /**\n     * Refreshes the access token.\n     * @param refreshToken An ignored refreshToken..\n     * @param callback Optional callback.\n     */ async refreshTokenNoCache(// eslint-disable-next-line @typescript-eslint/no-unused-vars\n    refreshToken) {\n        return super.refreshTokenNoCache(this._refreshToken);\n    }\n    /**\n     * Create a UserRefreshClient credentials instance using the given input\n     * options.\n     * @param json The input object.\n     */ fromJSON(json) {\n        if (!json) {\n            throw new Error(\"Must pass in a JSON object containing the user refresh token\");\n        }\n        if (json.type !== \"authorized_user\") {\n            throw new Error('The incoming JSON object does not have the \"authorized_user\" type');\n        }\n        if (!json.client_id) {\n            throw new Error(\"The incoming JSON object does not contain a client_id field\");\n        }\n        if (!json.client_secret) {\n            throw new Error(\"The incoming JSON object does not contain a client_secret field\");\n        }\n        if (!json.refresh_token) {\n            throw new Error(\"The incoming JSON object does not contain a refresh_token field\");\n        }\n        this._clientId = json.client_id;\n        this._clientSecret = json.client_secret;\n        this._refreshToken = json.refresh_token;\n        this.credentials.refresh_token = json.refresh_token;\n        this.quotaProjectId = json.quota_project_id;\n        this.universeDomain = json.universe_domain || this.universeDomain;\n    }\n    fromStream(inputStream, callback) {\n        if (callback) {\n            this.fromStreamAsync(inputStream).then(()=>callback(), callback);\n        } else {\n            return this.fromStreamAsync(inputStream);\n        }\n    }\n    async fromStreamAsync(inputStream) {\n        return new Promise((resolve, reject)=>{\n            if (!inputStream) {\n                return reject(new Error(\"Must pass in a stream containing the user refresh token.\"));\n            }\n            let s = \"\";\n            inputStream.setEncoding(\"utf8\").on(\"error\", reject).on(\"data\", (chunk)=>s += chunk).on(\"end\", ()=>{\n                try {\n                    const data = JSON.parse(s);\n                    this.fromJSON(data);\n                    return resolve();\n                } catch (err) {\n                    return reject(err);\n                }\n            });\n        });\n    }\n}\nexports.UserRefreshClient = UserRefreshClient;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/google-auth-library/build/src/auth/refreshclient.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/google-auth-library/build/src/auth/stscredentials.js":
/*!***************************************************************************!*\
  !*** ./node_modules/google-auth-library/build/src/auth/stscredentials.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.StsCredentials = void 0;\nconst gaxios_1 = __webpack_require__(/*! gaxios */ \"(action-browser)/./node_modules/gaxios/build/src/index.js\");\nconst querystring = __webpack_require__(/*! querystring */ \"querystring\");\nconst transporters_1 = __webpack_require__(/*! ../transporters */ \"(action-browser)/./node_modules/google-auth-library/build/src/transporters.js\");\nconst oauth2common_1 = __webpack_require__(/*! ./oauth2common */ \"(action-browser)/./node_modules/google-auth-library/build/src/auth/oauth2common.js\");\n/**\n * Implements the OAuth 2.0 token exchange based on\n * https://tools.ietf.org/html/rfc8693\n */ class StsCredentials extends oauth2common_1.OAuthClientAuthHandler {\n    /**\n     * Initializes an STS credentials instance.\n     * @param tokenExchangeEndpoint The token exchange endpoint.\n     * @param clientAuthentication The client authentication credentials if\n     *   available.\n     */ constructor(tokenExchangeEndpoint, clientAuthentication){\n        super(clientAuthentication);\n        this.tokenExchangeEndpoint = tokenExchangeEndpoint;\n        this.transporter = new transporters_1.DefaultTransporter();\n    }\n    /**\n     * Exchanges the provided token for another type of token based on the\n     * rfc8693 spec.\n     * @param stsCredentialsOptions The token exchange options used to populate\n     *   the token exchange request.\n     * @param additionalHeaders Optional additional headers to pass along the\n     *   request.\n     * @param options Optional additional GCP-specific non-spec defined options\n     *   to send with the request.\n     *   Example: `&options=${encodeUriComponent(JSON.stringified(options))}`\n     * @return A promise that resolves with the token exchange response containing\n     *   the requested token and its expiration time.\n     */ async exchangeToken(stsCredentialsOptions, additionalHeaders, // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    options) {\n        var _a, _b, _c;\n        const values = {\n            grant_type: stsCredentialsOptions.grantType,\n            resource: stsCredentialsOptions.resource,\n            audience: stsCredentialsOptions.audience,\n            scope: (_a = stsCredentialsOptions.scope) === null || _a === void 0 ? void 0 : _a.join(\" \"),\n            requested_token_type: stsCredentialsOptions.requestedTokenType,\n            subject_token: stsCredentialsOptions.subjectToken,\n            subject_token_type: stsCredentialsOptions.subjectTokenType,\n            actor_token: (_b = stsCredentialsOptions.actingParty) === null || _b === void 0 ? void 0 : _b.actorToken,\n            actor_token_type: (_c = stsCredentialsOptions.actingParty) === null || _c === void 0 ? void 0 : _c.actorTokenType,\n            // Non-standard GCP-specific options.\n            options: options && JSON.stringify(options)\n        };\n        // Remove undefined fields.\n        Object.keys(values).forEach((key)=>{\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            if (typeof values[key] === \"undefined\") {\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                delete values[key];\n            }\n        });\n        const headers = {\n            \"Content-Type\": \"application/x-www-form-urlencoded\"\n        };\n        // Inject additional STS headers if available.\n        Object.assign(headers, additionalHeaders || {});\n        const opts = {\n            url: this.tokenExchangeEndpoint.toString(),\n            method: \"POST\",\n            headers,\n            data: querystring.stringify(values),\n            responseType: \"json\"\n        };\n        // Apply OAuth client authentication.\n        this.applyClientAuthenticationOptions(opts);\n        try {\n            const response = await this.transporter.request(opts);\n            // Successful response.\n            const stsSuccessfulResponse = response.data;\n            stsSuccessfulResponse.res = response;\n            return stsSuccessfulResponse;\n        } catch (error) {\n            // Translate error to OAuthError.\n            if (error instanceof gaxios_1.GaxiosError && error.response) {\n                throw (0, oauth2common_1.getErrorFromOAuthErrorResponse)(error.response.data, // Preserve other fields from the original error.\n                error);\n            }\n            // Request could fail before the server responds.\n            throw error;\n        }\n    }\n}\nexports.StsCredentials = StsCredentials;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/google-auth-library/build/src/auth/stscredentials.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/google-auth-library/build/src/crypto/browser/crypto.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/google-auth-library/build/src/crypto/browser/crypto.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/* global window */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.BrowserCrypto = void 0;\n// This file implements crypto functions we need using in-browser\n// SubtleCrypto interface `window.crypto.subtle`.\nconst base64js = __webpack_require__(/*! base64-js */ \"(action-browser)/./node_modules/base64-js/index.js\");\nconst crypto_1 = __webpack_require__(/*! ../crypto */ \"(action-browser)/./node_modules/google-auth-library/build/src/crypto/crypto.js\");\nclass BrowserCrypto {\n    constructor(){\n        if (true) {\n            throw new Error(\"SubtleCrypto not found. Make sure it's an https:// website.\");\n        }\n    }\n    async sha256DigestBase64(str) {\n        // SubtleCrypto digest() method is async, so we must make\n        // this method async as well.\n        // To calculate SHA256 digest using SubtleCrypto, we first\n        // need to convert an input string to an ArrayBuffer:\n        // eslint-disable-next-line node/no-unsupported-features/node-builtins\n        const inputBuffer = new TextEncoder().encode(str);\n        // Result is ArrayBuffer as well.\n        const outputBuffer = await window.crypto.subtle.digest(\"SHA-256\", inputBuffer);\n        return base64js.fromByteArray(new Uint8Array(outputBuffer));\n    }\n    randomBytesBase64(count) {\n        const array = new Uint8Array(count);\n        window.crypto.getRandomValues(array);\n        return base64js.fromByteArray(array);\n    }\n    static padBase64(base64) {\n        // base64js requires padding, so let's add some '='\n        while(base64.length % 4 !== 0){\n            base64 += \"=\";\n        }\n        return base64;\n    }\n    async verify(pubkey, data, signature) {\n        const algo = {\n            name: \"RSASSA-PKCS1-v1_5\",\n            hash: {\n                name: \"SHA-256\"\n            }\n        };\n        // eslint-disable-next-line node/no-unsupported-features/node-builtins\n        const dataArray = new TextEncoder().encode(data);\n        const signatureArray = base64js.toByteArray(BrowserCrypto.padBase64(signature));\n        const cryptoKey = await window.crypto.subtle.importKey(\"jwk\", pubkey, algo, true, [\n            \"verify\"\n        ]);\n        // SubtleCrypto's verify method is async so we must make\n        // this method async as well.\n        const result = await window.crypto.subtle.verify(algo, cryptoKey, signatureArray, dataArray);\n        return result;\n    }\n    async sign(privateKey, data) {\n        const algo = {\n            name: \"RSASSA-PKCS1-v1_5\",\n            hash: {\n                name: \"SHA-256\"\n            }\n        };\n        // eslint-disable-next-line node/no-unsupported-features/node-builtins\n        const dataArray = new TextEncoder().encode(data);\n        const cryptoKey = await window.crypto.subtle.importKey(\"jwk\", privateKey, algo, true, [\n            \"sign\"\n        ]);\n        // SubtleCrypto's sign method is async so we must make\n        // this method async as well.\n        const result = await window.crypto.subtle.sign(algo, cryptoKey, dataArray);\n        return base64js.fromByteArray(new Uint8Array(result));\n    }\n    decodeBase64StringUtf8(base64) {\n        const uint8array = base64js.toByteArray(BrowserCrypto.padBase64(base64));\n        // eslint-disable-next-line node/no-unsupported-features/node-builtins\n        const result = new TextDecoder().decode(uint8array);\n        return result;\n    }\n    encodeBase64StringUtf8(text) {\n        // eslint-disable-next-line node/no-unsupported-features/node-builtins\n        const uint8array = new TextEncoder().encode(text);\n        const result = base64js.fromByteArray(uint8array);\n        return result;\n    }\n    /**\n     * Computes the SHA-256 hash of the provided string.\n     * @param str The plain text string to hash.\n     * @return A promise that resolves with the SHA-256 hash of the provided\n     *   string in hexadecimal encoding.\n     */ async sha256DigestHex(str) {\n        // SubtleCrypto digest() method is async, so we must make\n        // this method async as well.\n        // To calculate SHA256 digest using SubtleCrypto, we first\n        // need to convert an input string to an ArrayBuffer:\n        // eslint-disable-next-line node/no-unsupported-features/node-builtins\n        const inputBuffer = new TextEncoder().encode(str);\n        // Result is ArrayBuffer as well.\n        const outputBuffer = await window.crypto.subtle.digest(\"SHA-256\", inputBuffer);\n        return (0, crypto_1.fromArrayBufferToHex)(outputBuffer);\n    }\n    /**\n     * Computes the HMAC hash of a message using the provided crypto key and the\n     * SHA-256 algorithm.\n     * @param key The secret crypto key in utf-8 or ArrayBuffer format.\n     * @param msg The plain text message.\n     * @return A promise that resolves with the HMAC-SHA256 hash in ArrayBuffer\n     *   format.\n     */ async signWithHmacSha256(key, msg) {\n        // Convert key, if provided in ArrayBuffer format, to string.\n        const rawKey = typeof key === \"string\" ? key : String.fromCharCode(...new Uint16Array(key));\n        // eslint-disable-next-line node/no-unsupported-features/node-builtins\n        const enc = new TextEncoder();\n        const cryptoKey = await window.crypto.subtle.importKey(\"raw\", enc.encode(rawKey), {\n            name: \"HMAC\",\n            hash: {\n                name: \"SHA-256\"\n            }\n        }, false, [\n            \"sign\"\n        ]);\n        return window.crypto.subtle.sign(\"HMAC\", cryptoKey, enc.encode(msg));\n    }\n}\nexports.BrowserCrypto = BrowserCrypto;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9nb29nbGUtYXV0aC1saWJyYXJ5L2J1aWxkL3NyYy9jcnlwdG8vYnJvd3Nlci9jcnlwdG8uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw0QkFBNEI7QUFDNUIsRUFBRTtBQUNGLGtFQUFrRTtBQUNsRSxtRUFBbUU7QUFDbkUsMENBQTBDO0FBQzFDLEVBQUU7QUFDRixrREFBa0Q7QUFDbEQsRUFBRTtBQUNGLHNFQUFzRTtBQUN0RSxvRUFBb0U7QUFDcEUsMkVBQTJFO0FBQzNFLHNFQUFzRTtBQUN0RSxpQ0FBaUM7QUFDakMsaUJBQWlCLEdBQ2pCQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQscUJBQXFCLEdBQUcsS0FBSztBQUM3QixpRUFBaUU7QUFDakUsaURBQWlEO0FBQ2pELE1BQU1HLFdBQVdDLG1CQUFPQSxDQUFDLHFFQUFXO0FBQ3BDLE1BQU1DLFdBQVdELG1CQUFPQSxDQUFDLGlHQUFXO0FBQ3BDLE1BQU1GO0lBQ0ZJLGFBQWM7UUFDVixJQUFJLElBRWtDRyxFQUFFO1lBQ3BDLE1BQU0sSUFBSUUsTUFBTTtRQUNwQjtJQUNKO0lBQ0EsTUFBTUMsbUJBQW1CQyxHQUFHLEVBQUU7UUFDMUIseURBQXlEO1FBQ3pELDZCQUE2QjtRQUM3QiwwREFBMEQ7UUFDMUQscURBQXFEO1FBQ3JELHNFQUFzRTtRQUN0RSxNQUFNQyxjQUFjLElBQUlDLGNBQWNDLE1BQU0sQ0FBQ0g7UUFDN0MsaUNBQWlDO1FBQ2pDLE1BQU1JLGVBQWUsTUFBTVYsT0FBT0MsTUFBTSxDQUFDRSxNQUFNLENBQUNRLE1BQU0sQ0FBQyxXQUFXSjtRQUNsRSxPQUFPWCxTQUFTZ0IsYUFBYSxDQUFDLElBQUlDLFdBQVdIO0lBQ2pEO0lBQ0FJLGtCQUFrQkMsS0FBSyxFQUFFO1FBQ3JCLE1BQU1DLFFBQVEsSUFBSUgsV0FBV0U7UUFDN0JmLE9BQU9DLE1BQU0sQ0FBQ2dCLGVBQWUsQ0FBQ0Q7UUFDOUIsT0FBT3BC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TSxDQUFDc0MsU0FBUztZQUM5RXJCLE1BQU07WUFDTkMsTUFBTTtnQkFDRkQsTUFBTTtZQUNWO1FBQ0osR0FBRyxPQUFPO1lBQUM7U0FBTztRQUNsQixPQUFPMUIsT0FBT0MsTUFBTSxDQUFDRSxNQUFNLENBQUMrQixJQUFJLENBQUMsUUFBUUgsV0FBV29CLElBQUkxQyxNQUFNLENBQUNxQztJQUNuRTtBQUNKO0FBQ0FyRCxxQkFBcUIsR0FBR0UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zcG90aWZ5LXRvLXlvdXR1YmUvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWF1dGgtbGlicmFyeS9idWlsZC9zcmMvY3J5cHRvL2Jyb3dzZXIvY3J5cHRvLmpzP2ZkNjIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbi8qIGdsb2JhbCB3aW5kb3cgKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQnJvd3NlckNyeXB0byA9IHZvaWQgMDtcbi8vIFRoaXMgZmlsZSBpbXBsZW1lbnRzIGNyeXB0byBmdW5jdGlvbnMgd2UgbmVlZCB1c2luZyBpbi1icm93c2VyXG4vLyBTdWJ0bGVDcnlwdG8gaW50ZXJmYWNlIGB3aW5kb3cuY3J5cHRvLnN1YnRsZWAuXG5jb25zdCBiYXNlNjRqcyA9IHJlcXVpcmUoXCJiYXNlNjQtanNcIik7XG5jb25zdCBjcnlwdG9fMSA9IHJlcXVpcmUoXCIuLi9jcnlwdG9cIik7XG5jbGFzcyBCcm93c2VyQ3J5cHRvIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnIHx8XG4gICAgICAgICAgICB3aW5kb3cuY3J5cHRvID09PSB1bmRlZmluZWQgfHxcbiAgICAgICAgICAgIHdpbmRvdy5jcnlwdG8uc3VidGxlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlN1YnRsZUNyeXB0byBub3QgZm91bmQuIE1ha2Ugc3VyZSBpdCdzIGFuIGh0dHBzOi8vIHdlYnNpdGUuXCIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGFzeW5jIHNoYTI1NkRpZ2VzdEJhc2U2NChzdHIpIHtcbiAgICAgICAgLy8gU3VidGxlQ3J5cHRvIGRpZ2VzdCgpIG1ldGhvZCBpcyBhc3luYywgc28gd2UgbXVzdCBtYWtlXG4gICAgICAgIC8vIHRoaXMgbWV0aG9kIGFzeW5jIGFzIHdlbGwuXG4gICAgICAgIC8vIFRvIGNhbGN1bGF0ZSBTSEEyNTYgZGlnZXN0IHVzaW5nIFN1YnRsZUNyeXB0bywgd2UgZmlyc3RcbiAgICAgICAgLy8gbmVlZCB0byBjb252ZXJ0IGFuIGlucHV0IHN0cmluZyB0byBhbiBBcnJheUJ1ZmZlcjpcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vZGUvbm8tdW5zdXBwb3J0ZWQtZmVhdHVyZXMvbm9kZS1idWlsdGluc1xuICAgICAgICBjb25zdCBpbnB1dEJ1ZmZlciA9IG5ldyBUZXh0RW5jb2RlcigpLmVuY29kZShzdHIpO1xuICAgICAgICAvLyBSZXN1bHQgaXMgQXJyYXlCdWZmZXIgYXMgd2VsbC5cbiAgICAgICAgY29uc3Qgb3V0cHV0QnVmZmVyID0gYXdhaXQgd2luZG93LmNyeXB0by5zdWJ0bGUuZGlnZXN0KCdTSEEtMjU2JywgaW5wdXRCdWZmZXIpO1xuICAgICAgICByZXR1cm4gYmFzZTY0anMuZnJvbUJ5dGVBcnJheShuZXcgVWludDhBcnJheShvdXRwdXRCdWZmZXIpKTtcbiAgICB9XG4gICAgcmFuZG9tQnl0ZXNCYXNlNjQoY291bnQpIHtcbiAgICAgICAgY29uc3QgYXJyYXkgPSBuZXcgVWludDhBcnJheShjb3VudCk7XG4gICAgICAgIHdpbmRvdy5jcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKGFycmF5KTtcbiAgICAgICAgcmV0dXJuIGJhc2U2NGpzLmZyb21CeXRlQXJyYXkoYXJyYXkpO1xuICAgIH1cbiAgICBzdGF0aWMgcGFkQmFzZTY0KGJhc2U2NCkge1xuICAgICAgICAvLyBiYXNlNjRqcyByZXF1aXJlcyBwYWRkaW5nLCBzbyBsZXQncyBhZGQgc29tZSAnPSdcbiAgICAgICAgd2hpbGUgKGJhc2U2NC5sZW5ndGggJSA0ICE9PSAwKSB7XG4gICAgICAgICAgICBiYXNlNjQgKz0gJz0nO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBiYXNlNjQ7XG4gICAgfVxuICAgIGFzeW5jIHZlcmlmeShwdWJrZXksIGRhdGEsIHNpZ25hdHVyZSkge1xuICAgICAgICBjb25zdCBhbGdvID0ge1xuICAgICAgICAgICAgbmFtZTogJ1JTQVNTQS1QS0NTMS12MV81JyxcbiAgICAgICAgICAgIGhhc2g6IHsgbmFtZTogJ1NIQS0yNTYnIH0sXG4gICAgICAgIH07XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBub2RlL25vLXVuc3VwcG9ydGVkLWZlYXR1cmVzL25vZGUtYnVpbHRpbnNcbiAgICAgICAgY29uc3QgZGF0YUFycmF5ID0gbmV3IFRleHRFbmNvZGVyKCkuZW5jb2RlKGRhdGEpO1xuICAgICAgICBjb25zdCBzaWduYXR1cmVBcnJheSA9IGJhc2U2NGpzLnRvQnl0ZUFycmF5KEJyb3dzZXJDcnlwdG8ucGFkQmFzZTY0KHNpZ25hdHVyZSkpO1xuICAgICAgICBjb25zdCBjcnlwdG9LZXkgPSBhd2FpdCB3aW5kb3cuY3J5cHRvLnN1YnRsZS5pbXBvcnRLZXkoJ2p3aycsIHB1YmtleSwgYWxnbywgdHJ1ZSwgWyd2ZXJpZnknXSk7XG4gICAgICAgIC8vIFN1YnRsZUNyeXB0bydzIHZlcmlmeSBtZXRob2QgaXMgYXN5bmMgc28gd2UgbXVzdCBtYWtlXG4gICAgICAgIC8vIHRoaXMgbWV0aG9kIGFzeW5jIGFzIHdlbGwuXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHdpbmRvdy5jcnlwdG8uc3VidGxlLnZlcmlmeShhbGdvLCBjcnlwdG9LZXksIHNpZ25hdHVyZUFycmF5LCBkYXRhQXJyYXkpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBhc3luYyBzaWduKHByaXZhdGVLZXksIGRhdGEpIHtcbiAgICAgICAgY29uc3QgYWxnbyA9IHtcbiAgICAgICAgICAgIG5hbWU6ICdSU0FTU0EtUEtDUzEtdjFfNScsXG4gICAgICAgICAgICBoYXNoOiB7IG5hbWU6ICdTSEEtMjU2JyB9LFxuICAgICAgICB9O1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm9kZS9uby11bnN1cHBvcnRlZC1mZWF0dXJlcy9ub2RlLWJ1aWx0aW5zXG4gICAgICAgIGNvbnN0IGRhdGFBcnJheSA9IG5ldyBUZXh0RW5jb2RlcigpLmVuY29kZShkYXRhKTtcbiAgICAgICAgY29uc3QgY3J5cHRvS2V5ID0gYXdhaXQgd2luZG93LmNyeXB0by5zdWJ0bGUuaW1wb3J0S2V5KCdqd2snLCBwcml2YXRlS2V5LCBhbGdvLCB0cnVlLCBbJ3NpZ24nXSk7XG4gICAgICAgIC8vIFN1YnRsZUNyeXB0bydzIHNpZ24gbWV0aG9kIGlzIGFzeW5jIHNvIHdlIG11c3QgbWFrZVxuICAgICAgICAvLyB0aGlzIG1ldGhvZCBhc3luYyBhcyB3ZWxsLlxuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB3aW5kb3cuY3J5cHRvLnN1YnRsZS5zaWduKGFsZ28sIGNyeXB0b0tleSwgZGF0YUFycmF5KTtcbiAgICAgICAgcmV0dXJuIGJhc2U2NGpzLmZyb21CeXRlQXJyYXkobmV3IFVpbnQ4QXJyYXkocmVzdWx0KSk7XG4gICAgfVxuICAgIGRlY29kZUJhc2U2NFN0cmluZ1V0ZjgoYmFzZTY0KSB7XG4gICAgICAgIGNvbnN0IHVpbnQ4YXJyYXkgPSBiYXNlNjRqcy50b0J5dGVBcnJheShCcm93c2VyQ3J5cHRvLnBhZEJhc2U2NChiYXNlNjQpKTtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vZGUvbm8tdW5zdXBwb3J0ZWQtZmVhdHVyZXMvbm9kZS1idWlsdGluc1xuICAgICAgICBjb25zdCByZXN1bHQgPSBuZXcgVGV4dERlY29kZXIoKS5kZWNvZGUodWludDhhcnJheSk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIGVuY29kZUJhc2U2NFN0cmluZ1V0ZjgodGV4dCkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm9kZS9uby11bnN1cHBvcnRlZC1mZWF0dXJlcy9ub2RlLWJ1aWx0aW5zXG4gICAgICAgIGNvbnN0IHVpbnQ4YXJyYXkgPSBuZXcgVGV4dEVuY29kZXIoKS5lbmNvZGUodGV4dCk7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGJhc2U2NGpzLmZyb21CeXRlQXJyYXkodWludDhhcnJheSk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENvbXB1dGVzIHRoZSBTSEEtMjU2IGhhc2ggb2YgdGhlIHByb3ZpZGVkIHN0cmluZy5cbiAgICAgKiBAcGFyYW0gc3RyIFRoZSBwbGFpbiB0ZXh0IHN0cmluZyB0byBoYXNoLlxuICAgICAqIEByZXR1cm4gQSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCB0aGUgU0hBLTI1NiBoYXNoIG9mIHRoZSBwcm92aWRlZFxuICAgICAqICAgc3RyaW5nIGluIGhleGFkZWNpbWFsIGVuY29kaW5nLlxuICAgICAqL1xuICAgIGFzeW5jIHNoYTI1NkRpZ2VzdEhleChzdHIpIHtcbiAgICAgICAgLy8gU3VidGxlQ3J5cHRvIGRpZ2VzdCgpIG1ldGhvZCBpcyBhc3luYywgc28gd2UgbXVzdCBtYWtlXG4gICAgICAgIC8vIHRoaXMgbWV0aG9kIGFzeW5jIGFzIHdlbGwuXG4gICAgICAgIC8vIFRvIGNhbGN1bGF0ZSBTSEEyNTYgZGlnZXN0IHVzaW5nIFN1YnRsZUNyeXB0bywgd2UgZmlyc3RcbiAgICAgICAgLy8gbmVlZCB0byBjb252ZXJ0IGFuIGlucHV0IHN0cmluZyB0byBhbiBBcnJheUJ1ZmZlcjpcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vZGUvbm8tdW5zdXBwb3J0ZWQtZmVhdHVyZXMvbm9kZS1idWlsdGluc1xuICAgICAgICBjb25zdCBpbnB1dEJ1ZmZlciA9IG5ldyBUZXh0RW5jb2RlcigpLmVuY29kZShzdHIpO1xuICAgICAgICAvLyBSZXN1bHQgaXMgQXJyYXlCdWZmZXIgYXMgd2VsbC5cbiAgICAgICAgY29uc3Qgb3V0cHV0QnVmZmVyID0gYXdhaXQgd2luZG93LmNyeXB0by5zdWJ0bGUuZGlnZXN0KCdTSEEtMjU2JywgaW5wdXRCdWZmZXIpO1xuICAgICAgICByZXR1cm4gKDAsIGNyeXB0b18xLmZyb21BcnJheUJ1ZmZlclRvSGV4KShvdXRwdXRCdWZmZXIpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb21wdXRlcyB0aGUgSE1BQyBoYXNoIG9mIGEgbWVzc2FnZSB1c2luZyB0aGUgcHJvdmlkZWQgY3J5cHRvIGtleSBhbmQgdGhlXG4gICAgICogU0hBLTI1NiBhbGdvcml0aG0uXG4gICAgICogQHBhcmFtIGtleSBUaGUgc2VjcmV0IGNyeXB0byBrZXkgaW4gdXRmLTggb3IgQXJyYXlCdWZmZXIgZm9ybWF0LlxuICAgICAqIEBwYXJhbSBtc2cgVGhlIHBsYWluIHRleHQgbWVzc2FnZS5cbiAgICAgKiBAcmV0dXJuIEEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggdGhlIEhNQUMtU0hBMjU2IGhhc2ggaW4gQXJyYXlCdWZmZXJcbiAgICAgKiAgIGZvcm1hdC5cbiAgICAgKi9cbiAgICBhc3luYyBzaWduV2l0aEhtYWNTaGEyNTYoa2V5LCBtc2cpIHtcbiAgICAgICAgLy8gQ29udmVydCBrZXksIGlmIHByb3ZpZGVkIGluIEFycmF5QnVmZmVyIGZvcm1hdCwgdG8gc3RyaW5nLlxuICAgICAgICBjb25zdCByYXdLZXkgPSB0eXBlb2Yga2V5ID09PSAnc3RyaW5nJ1xuICAgICAgICAgICAgPyBrZXlcbiAgICAgICAgICAgIDogU3RyaW5nLmZyb21DaGFyQ29kZSguLi5uZXcgVWludDE2QXJyYXkoa2V5KSk7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBub2RlL25vLXVuc3VwcG9ydGVkLWZlYXR1cmVzL25vZGUtYnVpbHRpbnNcbiAgICAgICAgY29uc3QgZW5jID0gbmV3IFRleHRFbmNvZGVyKCk7XG4gICAgICAgIGNvbnN0IGNyeXB0b0tleSA9IGF3YWl0IHdpbmRvdy5jcnlwdG8uc3VidGxlLmltcG9ydEtleSgncmF3JywgZW5jLmVuY29kZShyYXdLZXkpLCB7XG4gICAgICAgICAgICBuYW1lOiAnSE1BQycsXG4gICAgICAgICAgICBoYXNoOiB7XG4gICAgICAgICAgICAgICAgbmFtZTogJ1NIQS0yNTYnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSwgZmFsc2UsIFsnc2lnbiddKTtcbiAgICAgICAgcmV0dXJuIHdpbmRvdy5jcnlwdG8uc3VidGxlLnNpZ24oJ0hNQUMnLCBjcnlwdG9LZXksIGVuYy5lbmNvZGUobXNnKSk7XG4gICAgfVxufVxuZXhwb3J0cy5Ccm93c2VyQ3J5cHRvID0gQnJvd3NlckNyeXB0bztcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIkJyb3dzZXJDcnlwdG8iLCJiYXNlNjRqcyIsInJlcXVpcmUiLCJjcnlwdG9fMSIsImNvbnN0cnVjdG9yIiwid2luZG93IiwiY3J5cHRvIiwidW5kZWZpbmVkIiwic3VidGxlIiwiRXJyb3IiLCJzaGEyNTZEaWdlc3RCYXNlNjQiLCJzdHIiLCJpbnB1dEJ1ZmZlciIsIlRleHRFbmNvZGVyIiwiZW5jb2RlIiwib3V0cHV0QnVmZmVyIiwiZGlnZXN0IiwiZnJvbUJ5dGVBcnJheSIsIlVpbnQ4QXJyYXkiLCJyYW5kb21CeXRlc0Jhc2U2NCIsImNvdW50IiwiYXJyYXkiLCJnZXRSYW5kb21WYWx1ZXMiLCJwYWRCYXNlNjQiLCJiYXNlNjQiLCJsZW5ndGgiLCJ2ZXJpZnkiLCJwdWJrZXkiLCJkYXRhIiwic2lnbmF0dXJlIiwiYWxnbyIsIm5hbWUiLCJoYXNoIiwiZGF0YUFycmF5Iiwic2lnbmF0dXJlQXJyYXkiLCJ0b0J5dGVBcnJheSIsImNyeXB0b0tleSIsImltcG9ydEtleSIsInJlc3VsdCIsInNpZ24iLCJwcml2YXRlS2V5IiwiZGVjb2RlQmFzZTY0U3RyaW5nVXRmOCIsInVpbnQ4YXJyYXkiLCJUZXh0RGVjb2RlciIsImRlY29kZSIsImVuY29kZUJhc2U2NFN0cmluZ1V0ZjgiLCJ0ZXh0Iiwic2hhMjU2RGlnZXN0SGV4IiwiZnJvbUFycmF5QnVmZmVyVG9IZXgiLCJzaWduV2l0aEhtYWNTaGEyNTYiLCJrZXkiLCJtc2ciLCJyYXdLZXkiLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJVaW50MTZBcnJheSIsImVuYyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/google-auth-library/build/src/crypto/browser/crypto.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/google-auth-library/build/src/crypto/crypto.js":
/*!*********************************************************************!*\
  !*** ./node_modules/google-auth-library/build/src/crypto/crypto.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/* global window */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.fromArrayBufferToHex = exports.hasBrowserCrypto = exports.createCrypto = void 0;\nconst crypto_1 = __webpack_require__(/*! ./browser/crypto */ \"(action-browser)/./node_modules/google-auth-library/build/src/crypto/browser/crypto.js\");\nconst crypto_2 = __webpack_require__(/*! ./node/crypto */ \"(action-browser)/./node_modules/google-auth-library/build/src/crypto/node/crypto.js\");\nfunction createCrypto() {\n    if (hasBrowserCrypto()) {\n        return new crypto_1.BrowserCrypto();\n    }\n    return new crypto_2.NodeCrypto();\n}\nexports.createCrypto = createCrypto;\nfunction hasBrowserCrypto() {\n    return  false && 0;\n}\nexports.hasBrowserCrypto = hasBrowserCrypto;\n/**\n * Converts an ArrayBuffer to a hexadecimal string.\n * @param arrayBuffer The ArrayBuffer to convert to hexadecimal string.\n * @return The hexadecimal encoding of the ArrayBuffer.\n */ function fromArrayBufferToHex(arrayBuffer) {\n    // Convert buffer to byte array.\n    const byteArray = Array.from(new Uint8Array(arrayBuffer));\n    // Convert bytes to hex string.\n    return byteArray.map((byte)=>{\n        return byte.toString(16).padStart(2, \"0\");\n    }).join(\"\");\n}\nexports.fromArrayBufferToHex = fromArrayBufferToHex;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9nb29nbGUtYXV0aC1saWJyYXJ5L2J1aWxkL3NyYy9jcnlwdG8vY3J5cHRvLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsNEJBQTRCO0FBQzVCLEVBQUU7QUFDRixrRUFBa0U7QUFDbEUsbUVBQW1FO0FBQ25FLDBDQUEwQztBQUMxQyxFQUFFO0FBQ0Ysa0RBQWtEO0FBQ2xELEVBQUU7QUFDRixzRUFBc0U7QUFDdEUsb0VBQW9FO0FBQ3BFLDJFQUEyRTtBQUMzRSxzRUFBc0U7QUFDdEUsaUNBQWlDO0FBQ2pDLGlCQUFpQixHQUNqQkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELDRCQUE0QixHQUFHQSx3QkFBd0IsR0FBR0Esb0JBQW9CLEdBQUcsS0FBSztBQUN0RixNQUFNSyxXQUFXQyxtQkFBT0EsQ0FBQyxnSEFBa0I7QUFDM0MsTUFBTUMsV0FBV0QsbUJBQU9BLENBQUMsMEdBQWU7QUFDeEMsU0FBU0Y7SUFDTCxJQUFJRCxvQkFBb0I7UUFDcEIsT0FBTyxJQUFJRSxTQUFTRyxhQUFhO0lBQ3JDO0lBQ0EsT0FBTyxJQUFJRCxTQUFTRSxVQUFVO0FBQ2xDO0FBQ0FULG9CQUFvQixHQUFHSTtBQUN2QixTQUFTRDtJQUNMLE9BQVEsTUFDcUIsSUFDekIsQ0FBZ0M7QUFDeEM7QUFDQUgsd0JBQXdCLEdBQUdHO0FBQzNCOzs7O0NBSUMsR0FDRCxTQUFTRCxxQkFBcUJXLFdBQVc7SUFDckMsZ0NBQWdDO0lBQ2hDLE1BQU1DLFlBQVlDLE1BQU1DLElBQUksQ0FBQyxJQUFJQyxXQUFXSjtJQUM1QywrQkFBK0I7SUFDL0IsT0FBT0MsVUFDRkksR0FBRyxDQUFDQyxDQUFBQTtRQUNMLE9BQU9BLEtBQUtDLFFBQVEsQ0FBQyxJQUFJQyxRQUFRLENBQUMsR0FBRztJQUN6QyxHQUNLQyxJQUFJLENBQUM7QUFDZDtBQUNBdEIsNEJBQTRCLEdBQUdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3BvdGlmeS10by15b3V0dWJlLy4vbm9kZV9tb2R1bGVzL2dvb2dsZS1hdXRoLWxpYnJhcnkvYnVpbGQvc3JjL2NyeXB0by9jcnlwdG8uanM/NDA4ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuLyogZ2xvYmFsIHdpbmRvdyAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5mcm9tQXJyYXlCdWZmZXJUb0hleCA9IGV4cG9ydHMuaGFzQnJvd3NlckNyeXB0byA9IGV4cG9ydHMuY3JlYXRlQ3J5cHRvID0gdm9pZCAwO1xuY29uc3QgY3J5cHRvXzEgPSByZXF1aXJlKFwiLi9icm93c2VyL2NyeXB0b1wiKTtcbmNvbnN0IGNyeXB0b18yID0gcmVxdWlyZShcIi4vbm9kZS9jcnlwdG9cIik7XG5mdW5jdGlvbiBjcmVhdGVDcnlwdG8oKSB7XG4gICAgaWYgKGhhc0Jyb3dzZXJDcnlwdG8oKSkge1xuICAgICAgICByZXR1cm4gbmV3IGNyeXB0b18xLkJyb3dzZXJDcnlwdG8oKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBjcnlwdG9fMi5Ob2RlQ3J5cHRvKCk7XG59XG5leHBvcnRzLmNyZWF0ZUNyeXB0byA9IGNyZWF0ZUNyeXB0bztcbmZ1bmN0aW9uIGhhc0Jyb3dzZXJDcnlwdG8oKSB7XG4gICAgcmV0dXJuICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICB0eXBlb2Ygd2luZG93LmNyeXB0byAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgdHlwZW9mIHdpbmRvdy5jcnlwdG8uc3VidGxlICE9PSAndW5kZWZpbmVkJyk7XG59XG5leHBvcnRzLmhhc0Jyb3dzZXJDcnlwdG8gPSBoYXNCcm93c2VyQ3J5cHRvO1xuLyoqXG4gKiBDb252ZXJ0cyBhbiBBcnJheUJ1ZmZlciB0byBhIGhleGFkZWNpbWFsIHN0cmluZy5cbiAqIEBwYXJhbSBhcnJheUJ1ZmZlciBUaGUgQXJyYXlCdWZmZXIgdG8gY29udmVydCB0byBoZXhhZGVjaW1hbCBzdHJpbmcuXG4gKiBAcmV0dXJuIFRoZSBoZXhhZGVjaW1hbCBlbmNvZGluZyBvZiB0aGUgQXJyYXlCdWZmZXIuXG4gKi9cbmZ1bmN0aW9uIGZyb21BcnJheUJ1ZmZlclRvSGV4KGFycmF5QnVmZmVyKSB7XG4gICAgLy8gQ29udmVydCBidWZmZXIgdG8gYnl0ZSBhcnJheS5cbiAgICBjb25zdCBieXRlQXJyYXkgPSBBcnJheS5mcm9tKG5ldyBVaW50OEFycmF5KGFycmF5QnVmZmVyKSk7XG4gICAgLy8gQ29udmVydCBieXRlcyB0byBoZXggc3RyaW5nLlxuICAgIHJldHVybiBieXRlQXJyYXlcbiAgICAgICAgLm1hcChieXRlID0+IHtcbiAgICAgICAgcmV0dXJuIGJ5dGUudG9TdHJpbmcoMTYpLnBhZFN0YXJ0KDIsICcwJyk7XG4gICAgfSlcbiAgICAgICAgLmpvaW4oJycpO1xufVxuZXhwb3J0cy5mcm9tQXJyYXlCdWZmZXJUb0hleCA9IGZyb21BcnJheUJ1ZmZlclRvSGV4O1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZnJvbUFycmF5QnVmZmVyVG9IZXgiLCJoYXNCcm93c2VyQ3J5cHRvIiwiY3JlYXRlQ3J5cHRvIiwiY3J5cHRvXzEiLCJyZXF1aXJlIiwiY3J5cHRvXzIiLCJCcm93c2VyQ3J5cHRvIiwiTm9kZUNyeXB0byIsIndpbmRvdyIsImNyeXB0byIsInN1YnRsZSIsImFycmF5QnVmZmVyIiwiYnl0ZUFycmF5IiwiQXJyYXkiLCJmcm9tIiwiVWludDhBcnJheSIsIm1hcCIsImJ5dGUiLCJ0b1N0cmluZyIsInBhZFN0YXJ0Iiwiam9pbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/google-auth-library/build/src/crypto/crypto.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/google-auth-library/build/src/crypto/node/crypto.js":
/*!**************************************************************************!*\
  !*** ./node_modules/google-auth-library/build/src/crypto/node/crypto.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.NodeCrypto = void 0;\nconst crypto = __webpack_require__(/*! crypto */ \"crypto\");\nclass NodeCrypto {\n    async sha256DigestBase64(str) {\n        return crypto.createHash(\"sha256\").update(str).digest(\"base64\");\n    }\n    randomBytesBase64(count) {\n        return crypto.randomBytes(count).toString(\"base64\");\n    }\n    async verify(pubkey, data, signature) {\n        const verifier = crypto.createVerify(\"RSA-SHA256\");\n        verifier.update(data);\n        verifier.end();\n        return verifier.verify(pubkey, signature, \"base64\");\n    }\n    async sign(privateKey, data) {\n        const signer = crypto.createSign(\"RSA-SHA256\");\n        signer.update(data);\n        signer.end();\n        return signer.sign(privateKey, \"base64\");\n    }\n    decodeBase64StringUtf8(base64) {\n        return Buffer.from(base64, \"base64\").toString(\"utf-8\");\n    }\n    encodeBase64StringUtf8(text) {\n        return Buffer.from(text, \"utf-8\").toString(\"base64\");\n    }\n    /**\n     * Computes the SHA-256 hash of the provided string.\n     * @param str The plain text string to hash.\n     * @return A promise that resolves with the SHA-256 hash of the provided\n     *   string in hexadecimal encoding.\n     */ async sha256DigestHex(str) {\n        return crypto.createHash(\"sha256\").update(str).digest(\"hex\");\n    }\n    /**\n     * Computes the HMAC hash of a message using the provided crypto key and the\n     * SHA-256 algorithm.\n     * @param key The secret crypto key in utf-8 or ArrayBuffer format.\n     * @param msg The plain text message.\n     * @return A promise that resolves with the HMAC-SHA256 hash in ArrayBuffer\n     *   format.\n     */ async signWithHmacSha256(key, msg) {\n        const cryptoKey = typeof key === \"string\" ? key : toBuffer(key);\n        return toArrayBuffer(crypto.createHmac(\"sha256\", cryptoKey).update(msg).digest());\n    }\n}\nexports.NodeCrypto = NodeCrypto;\n/**\n * Converts a Node.js Buffer to an ArrayBuffer.\n * https://stackoverflow.com/questions/8609289/convert-a-binary-nodejs-buffer-to-javascript-arraybuffer\n * @param buffer The Buffer input to covert.\n * @return The ArrayBuffer representation of the input.\n */ function toArrayBuffer(buffer) {\n    return buffer.buffer.slice(buffer.byteOffset, buffer.byteOffset + buffer.byteLength);\n}\n/**\n * Converts an ArrayBuffer to a Node.js Buffer.\n * @param arrayBuffer The ArrayBuffer input to covert.\n * @return The Buffer representation of the input.\n */ function toBuffer(arrayBuffer) {\n    return Buffer.from(arrayBuffer);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9nb29nbGUtYXV0aC1saWJyYXJ5L2J1aWxkL3NyYy9jcnlwdG8vbm9kZS9jcnlwdG8uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw0QkFBNEI7QUFDNUIsRUFBRTtBQUNGLGtFQUFrRTtBQUNsRSxtRUFBbUU7QUFDbkUsMENBQTBDO0FBQzFDLEVBQUU7QUFDRixrREFBa0Q7QUFDbEQsRUFBRTtBQUNGLHNFQUFzRTtBQUN0RSxvRUFBb0U7QUFDcEUsMkVBQTJFO0FBQzNFLHNFQUFzRTtBQUN0RSxpQ0FBaUM7QUFDakNBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxrQkFBa0IsR0FBRyxLQUFLO0FBQzFCLE1BQU1HLFNBQVNDLG1CQUFPQSxDQUFDLHNCQUFRO0FBQy9CLE1BQU1GO0lBQ0YsTUFBTUcsbUJBQW1CQyxHQUFHLEVBQUU7UUFDMUIsT0FBT0gsT0FBT0ksVUFBVSxDQUFDLFVBQVVDLE1BQU0sQ0FBQ0YsS0FBS0csTUFBTSxDQUFDO0lBQzFEO0lBQ0FDLGtCQUFrQkMsS0FBSyxFQUFFO1FBQ3JCLE9BQU9SLE9BQU9TLFdBQVcsQ0FBQ0QsT0FBT0UsUUFBUSxDQUFDO0lBQzlDO0lBQ0EsTUFBTUMsT0FBT0MsTUFBTSxFQUFFQyxJQUFJLEVBQUVDLFNBQVMsRUFBRTtRQUNsQyxNQUFNQyxXQUFXZixPQUFPZ0IsWUFBWSxDQUFDO1FBQ3JDRCxTQUFTVixNQUFNLENBQUNRO1FBQ2hCRSxTQUFTRSxHQUFHO1FBQ1osT0FBT0YsU0FBU0osTUFBTSxDQUFDQyxRQUFRRSxXQUFXO0lBQzlDO0lBQ0EsTUFBTUksS0FBS0MsVUFBVSxFQUFFTixJQUFJLEVBQUU7UUFDekIsTUFBTU8sU0FBU3BCLE9BQU9xQixVQUFVLENBQUM7UUFDakNELE9BQU9mLE1BQU0sQ0FBQ1E7UUFDZE8sT0FBT0gsR0FBRztRQUNWLE9BQU9HLE9BQU9GLElBQUksQ0FBQ0MsWUFBWTtJQUNuQztJQUNBRyx1QkFBdUJDLE1BQU0sRUFBRTtRQUMzQixPQUFPQyxPQUFPQyxJQUFJLENBQUNGLFFBQVEsVUFBVWIsUUFBUSxDQUFDO0lBQ2xEO0lBQ0FnQix1QkFBdUJDLElBQUksRUFBRTtRQUN6QixPQUFPSCxPQUFPQyxJQUFJLENBQUNFLE1BQU0sU0FBU2pCLFFBQVEsQ0FBQztJQUMvQztJQUNBOzs7OztLQUtDLEdBQ0QsTUFBTWtCLGdCQUFnQnpCLEdBQUcsRUFBRTtRQUN2QixPQUFPSCxPQUFPSSxVQUFVLENBQUMsVUFBVUMsTUFBTSxDQUFDRixLQUFLRyxNQUFNLENBQUM7SUFDMUQ7SUFDQTs7Ozs7OztLQU9DLEdBQ0QsTUFBTXVCLG1CQUFtQkMsR0FBRyxFQUFFQyxHQUFHLEVBQUU7UUFDL0IsTUFBTUMsWUFBWSxPQUFPRixRQUFRLFdBQVdBLE1BQU1HLFNBQVNIO1FBQzNELE9BQU9JLGNBQWNsQyxPQUFPbUMsVUFBVSxDQUFDLFVBQVVILFdBQVczQixNQUFNLENBQUMwQixLQUFLekIsTUFBTTtJQUNsRjtBQUNKO0FBQ0FULGtCQUFrQixHQUFHRTtBQUNyQjs7Ozs7Q0FLQyxHQUNELFNBQVNtQyxjQUFjRSxNQUFNO0lBQ3pCLE9BQU9BLE9BQU9BLE1BQU0sQ0FBQ0MsS0FBSyxDQUFDRCxPQUFPRSxVQUFVLEVBQUVGLE9BQU9FLFVBQVUsR0FBR0YsT0FBT0csVUFBVTtBQUN2RjtBQUNBOzs7O0NBSUMsR0FDRCxTQUFTTixTQUFTTyxXQUFXO0lBQ3pCLE9BQU9oQixPQUFPQyxJQUFJLENBQUNlO0FBQ3ZCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3BvdGlmeS10by15b3V0dWJlLy4vbm9kZV9tb2R1bGVzL2dvb2dsZS1hdXRoLWxpYnJhcnkvYnVpbGQvc3JjL2NyeXB0by9ub2RlL2NyeXB0by5qcz9lMmUyIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLk5vZGVDcnlwdG8gPSB2b2lkIDA7XG5jb25zdCBjcnlwdG8gPSByZXF1aXJlKFwiY3J5cHRvXCIpO1xuY2xhc3MgTm9kZUNyeXB0byB7XG4gICAgYXN5bmMgc2hhMjU2RGlnZXN0QmFzZTY0KHN0cikge1xuICAgICAgICByZXR1cm4gY3J5cHRvLmNyZWF0ZUhhc2goJ3NoYTI1NicpLnVwZGF0ZShzdHIpLmRpZ2VzdCgnYmFzZTY0Jyk7XG4gICAgfVxuICAgIHJhbmRvbUJ5dGVzQmFzZTY0KGNvdW50KSB7XG4gICAgICAgIHJldHVybiBjcnlwdG8ucmFuZG9tQnl0ZXMoY291bnQpLnRvU3RyaW5nKCdiYXNlNjQnKTtcbiAgICB9XG4gICAgYXN5bmMgdmVyaWZ5KHB1YmtleSwgZGF0YSwgc2lnbmF0dXJlKSB7XG4gICAgICAgIGNvbnN0IHZlcmlmaWVyID0gY3J5cHRvLmNyZWF0ZVZlcmlmeSgnUlNBLVNIQTI1NicpO1xuICAgICAgICB2ZXJpZmllci51cGRhdGUoZGF0YSk7XG4gICAgICAgIHZlcmlmaWVyLmVuZCgpO1xuICAgICAgICByZXR1cm4gdmVyaWZpZXIudmVyaWZ5KHB1YmtleSwgc2lnbmF0dXJlLCAnYmFzZTY0Jyk7XG4gICAgfVxuICAgIGFzeW5jIHNpZ24ocHJpdmF0ZUtleSwgZGF0YSkge1xuICAgICAgICBjb25zdCBzaWduZXIgPSBjcnlwdG8uY3JlYXRlU2lnbignUlNBLVNIQTI1NicpO1xuICAgICAgICBzaWduZXIudXBkYXRlKGRhdGEpO1xuICAgICAgICBzaWduZXIuZW5kKCk7XG4gICAgICAgIHJldHVybiBzaWduZXIuc2lnbihwcml2YXRlS2V5LCAnYmFzZTY0Jyk7XG4gICAgfVxuICAgIGRlY29kZUJhc2U2NFN0cmluZ1V0ZjgoYmFzZTY0KSB7XG4gICAgICAgIHJldHVybiBCdWZmZXIuZnJvbShiYXNlNjQsICdiYXNlNjQnKS50b1N0cmluZygndXRmLTgnKTtcbiAgICB9XG4gICAgZW5jb2RlQmFzZTY0U3RyaW5nVXRmOCh0ZXh0KSB7XG4gICAgICAgIHJldHVybiBCdWZmZXIuZnJvbSh0ZXh0LCAndXRmLTgnKS50b1N0cmluZygnYmFzZTY0Jyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENvbXB1dGVzIHRoZSBTSEEtMjU2IGhhc2ggb2YgdGhlIHByb3ZpZGVkIHN0cmluZy5cbiAgICAgKiBAcGFyYW0gc3RyIFRoZSBwbGFpbiB0ZXh0IHN0cmluZyB0byBoYXNoLlxuICAgICAqIEByZXR1cm4gQSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCB0aGUgU0hBLTI1NiBoYXNoIG9mIHRoZSBwcm92aWRlZFxuICAgICAqICAgc3RyaW5nIGluIGhleGFkZWNpbWFsIGVuY29kaW5nLlxuICAgICAqL1xuICAgIGFzeW5jIHNoYTI1NkRpZ2VzdEhleChzdHIpIHtcbiAgICAgICAgcmV0dXJuIGNyeXB0by5jcmVhdGVIYXNoKCdzaGEyNTYnKS51cGRhdGUoc3RyKS5kaWdlc3QoJ2hleCcpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb21wdXRlcyB0aGUgSE1BQyBoYXNoIG9mIGEgbWVzc2FnZSB1c2luZyB0aGUgcHJvdmlkZWQgY3J5cHRvIGtleSBhbmQgdGhlXG4gICAgICogU0hBLTI1NiBhbGdvcml0aG0uXG4gICAgICogQHBhcmFtIGtleSBUaGUgc2VjcmV0IGNyeXB0byBrZXkgaW4gdXRmLTggb3IgQXJyYXlCdWZmZXIgZm9ybWF0LlxuICAgICAqIEBwYXJhbSBtc2cgVGhlIHBsYWluIHRleHQgbWVzc2FnZS5cbiAgICAgKiBAcmV0dXJuIEEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggdGhlIEhNQUMtU0hBMjU2IGhhc2ggaW4gQXJyYXlCdWZmZXJcbiAgICAgKiAgIGZvcm1hdC5cbiAgICAgKi9cbiAgICBhc3luYyBzaWduV2l0aEhtYWNTaGEyNTYoa2V5LCBtc2cpIHtcbiAgICAgICAgY29uc3QgY3J5cHRvS2V5ID0gdHlwZW9mIGtleSA9PT0gJ3N0cmluZycgPyBrZXkgOiB0b0J1ZmZlcihrZXkpO1xuICAgICAgICByZXR1cm4gdG9BcnJheUJ1ZmZlcihjcnlwdG8uY3JlYXRlSG1hYygnc2hhMjU2JywgY3J5cHRvS2V5KS51cGRhdGUobXNnKS5kaWdlc3QoKSk7XG4gICAgfVxufVxuZXhwb3J0cy5Ob2RlQ3J5cHRvID0gTm9kZUNyeXB0bztcbi8qKlxuICogQ29udmVydHMgYSBOb2RlLmpzIEJ1ZmZlciB0byBhbiBBcnJheUJ1ZmZlci5cbiAqIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzg2MDkyODkvY29udmVydC1hLWJpbmFyeS1ub2RlanMtYnVmZmVyLXRvLWphdmFzY3JpcHQtYXJyYXlidWZmZXJcbiAqIEBwYXJhbSBidWZmZXIgVGhlIEJ1ZmZlciBpbnB1dCB0byBjb3ZlcnQuXG4gKiBAcmV0dXJuIFRoZSBBcnJheUJ1ZmZlciByZXByZXNlbnRhdGlvbiBvZiB0aGUgaW5wdXQuXG4gKi9cbmZ1bmN0aW9uIHRvQXJyYXlCdWZmZXIoYnVmZmVyKSB7XG4gICAgcmV0dXJuIGJ1ZmZlci5idWZmZXIuc2xpY2UoYnVmZmVyLmJ5dGVPZmZzZXQsIGJ1ZmZlci5ieXRlT2Zmc2V0ICsgYnVmZmVyLmJ5dGVMZW5ndGgpO1xufVxuLyoqXG4gKiBDb252ZXJ0cyBhbiBBcnJheUJ1ZmZlciB0byBhIE5vZGUuanMgQnVmZmVyLlxuICogQHBhcmFtIGFycmF5QnVmZmVyIFRoZSBBcnJheUJ1ZmZlciBpbnB1dCB0byBjb3ZlcnQuXG4gKiBAcmV0dXJuIFRoZSBCdWZmZXIgcmVwcmVzZW50YXRpb24gb2YgdGhlIGlucHV0LlxuICovXG5mdW5jdGlvbiB0b0J1ZmZlcihhcnJheUJ1ZmZlcikge1xuICAgIHJldHVybiBCdWZmZXIuZnJvbShhcnJheUJ1ZmZlcik7XG59XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJOb2RlQ3J5cHRvIiwiY3J5cHRvIiwicmVxdWlyZSIsInNoYTI1NkRpZ2VzdEJhc2U2NCIsInN0ciIsImNyZWF0ZUhhc2giLCJ1cGRhdGUiLCJkaWdlc3QiLCJyYW5kb21CeXRlc0Jhc2U2NCIsImNvdW50IiwicmFuZG9tQnl0ZXMiLCJ0b1N0cmluZyIsInZlcmlmeSIsInB1YmtleSIsImRhdGEiLCJzaWduYXR1cmUiLCJ2ZXJpZmllciIsImNyZWF0ZVZlcmlmeSIsImVuZCIsInNpZ24iLCJwcml2YXRlS2V5Iiwic2lnbmVyIiwiY3JlYXRlU2lnbiIsImRlY29kZUJhc2U2NFN0cmluZ1V0ZjgiLCJiYXNlNjQiLCJCdWZmZXIiLCJmcm9tIiwiZW5jb2RlQmFzZTY0U3RyaW5nVXRmOCIsInRleHQiLCJzaGEyNTZEaWdlc3RIZXgiLCJzaWduV2l0aEhtYWNTaGEyNTYiLCJrZXkiLCJtc2ciLCJjcnlwdG9LZXkiLCJ0b0J1ZmZlciIsInRvQXJyYXlCdWZmZXIiLCJjcmVhdGVIbWFjIiwiYnVmZmVyIiwic2xpY2UiLCJieXRlT2Zmc2V0IiwiYnl0ZUxlbmd0aCIsImFycmF5QnVmZmVyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/google-auth-library/build/src/crypto/node/crypto.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/google-auth-library/build/src/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/google-auth-library/build/src/index.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.GoogleAuth = exports.auth = exports.DefaultTransporter = exports.PluggableAuthClient = exports.DownscopedClient = exports.BaseExternalAccountClient = exports.ExternalAccountClient = exports.IdentityPoolClient = exports.AwsClient = exports.UserRefreshClient = exports.LoginTicket = exports.OAuth2Client = exports.CodeChallengeMethod = exports.Impersonated = exports.JWT = exports.JWTAccess = exports.IdTokenClient = exports.IAMAuth = exports.GCPEnv = exports.Compute = exports.DEFAULT_UNIVERSE = exports.AuthClient = exports.gcpMetadata = void 0;\n// Copyright 2017 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nconst googleauth_1 = __webpack_require__(/*! ./auth/googleauth */ \"(action-browser)/./node_modules/google-auth-library/build/src/auth/googleauth.js\");\nObject.defineProperty(exports, \"GoogleAuth\", ({\n    enumerable: true,\n    get: function() {\n        return googleauth_1.GoogleAuth;\n    }\n}));\nexports.gcpMetadata = __webpack_require__(/*! gcp-metadata */ \"(action-browser)/./node_modules/google-auth-library/node_modules/gcp-metadata/build/src/index.js\");\nvar authclient_1 = __webpack_require__(/*! ./auth/authclient */ \"(action-browser)/./node_modules/google-auth-library/build/src/auth/authclient.js\");\nObject.defineProperty(exports, \"AuthClient\", ({\n    enumerable: true,\n    get: function() {\n        return authclient_1.AuthClient;\n    }\n}));\nObject.defineProperty(exports, \"DEFAULT_UNIVERSE\", ({\n    enumerable: true,\n    get: function() {\n        return authclient_1.DEFAULT_UNIVERSE;\n    }\n}));\nvar computeclient_1 = __webpack_require__(/*! ./auth/computeclient */ \"(action-browser)/./node_modules/google-auth-library/build/src/auth/computeclient.js\");\nObject.defineProperty(exports, \"Compute\", ({\n    enumerable: true,\n    get: function() {\n        return computeclient_1.Compute;\n    }\n}));\nvar envDetect_1 = __webpack_require__(/*! ./auth/envDetect */ \"(action-browser)/./node_modules/google-auth-library/build/src/auth/envDetect.js\");\nObject.defineProperty(exports, \"GCPEnv\", ({\n    enumerable: true,\n    get: function() {\n        return envDetect_1.GCPEnv;\n    }\n}));\nvar iam_1 = __webpack_require__(/*! ./auth/iam */ \"(action-browser)/./node_modules/google-auth-library/build/src/auth/iam.js\");\nObject.defineProperty(exports, \"IAMAuth\", ({\n    enumerable: true,\n    get: function() {\n        return iam_1.IAMAuth;\n    }\n}));\nvar idtokenclient_1 = __webpack_require__(/*! ./auth/idtokenclient */ \"(action-browser)/./node_modules/google-auth-library/build/src/auth/idtokenclient.js\");\nObject.defineProperty(exports, \"IdTokenClient\", ({\n    enumerable: true,\n    get: function() {\n        return idtokenclient_1.IdTokenClient;\n    }\n}));\nvar jwtaccess_1 = __webpack_require__(/*! ./auth/jwtaccess */ \"(action-browser)/./node_modules/google-auth-library/build/src/auth/jwtaccess.js\");\nObject.defineProperty(exports, \"JWTAccess\", ({\n    enumerable: true,\n    get: function() {\n        return jwtaccess_1.JWTAccess;\n    }\n}));\nvar jwtclient_1 = __webpack_require__(/*! ./auth/jwtclient */ \"(action-browser)/./node_modules/google-auth-library/build/src/auth/jwtclient.js\");\nObject.defineProperty(exports, \"JWT\", ({\n    enumerable: true,\n    get: function() {\n        return jwtclient_1.JWT;\n    }\n}));\nvar impersonated_1 = __webpack_require__(/*! ./auth/impersonated */ \"(action-browser)/./node_modules/google-auth-library/build/src/auth/impersonated.js\");\nObject.defineProperty(exports, \"Impersonated\", ({\n    enumerable: true,\n    get: function() {\n        return impersonated_1.Impersonated;\n    }\n}));\nvar oauth2client_1 = __webpack_require__(/*! ./auth/oauth2client */ \"(action-browser)/./node_modules/google-auth-library/build/src/auth/oauth2client.js\");\nObject.defineProperty(exports, \"CodeChallengeMethod\", ({\n    enumerable: true,\n    get: function() {\n        return oauth2client_1.CodeChallengeMethod;\n    }\n}));\nObject.defineProperty(exports, \"OAuth2Client\", ({\n    enumerable: true,\n    get: function() {\n        return oauth2client_1.OAuth2Client;\n    }\n}));\nvar loginticket_1 = __webpack_require__(/*! ./auth/loginticket */ \"(action-browser)/./node_modules/google-auth-library/build/src/auth/loginticket.js\");\nObject.defineProperty(exports, \"LoginTicket\", ({\n    enumerable: true,\n    get: function() {\n        return loginticket_1.LoginTicket;\n    }\n}));\nvar refreshclient_1 = __webpack_require__(/*! ./auth/refreshclient */ \"(action-browser)/./node_modules/google-auth-library/build/src/auth/refreshclient.js\");\nObject.defineProperty(exports, \"UserRefreshClient\", ({\n    enumerable: true,\n    get: function() {\n        return refreshclient_1.UserRefreshClient;\n    }\n}));\nvar awsclient_1 = __webpack_require__(/*! ./auth/awsclient */ \"(action-browser)/./node_modules/google-auth-library/build/src/auth/awsclient.js\");\nObject.defineProperty(exports, \"AwsClient\", ({\n    enumerable: true,\n    get: function() {\n        return awsclient_1.AwsClient;\n    }\n}));\nvar identitypoolclient_1 = __webpack_require__(/*! ./auth/identitypoolclient */ \"(action-browser)/./node_modules/google-auth-library/build/src/auth/identitypoolclient.js\");\nObject.defineProperty(exports, \"IdentityPoolClient\", ({\n    enumerable: true,\n    get: function() {\n        return identitypoolclient_1.IdentityPoolClient;\n    }\n}));\nvar externalclient_1 = __webpack_require__(/*! ./auth/externalclient */ \"(action-browser)/./node_modules/google-auth-library/build/src/auth/externalclient.js\");\nObject.defineProperty(exports, \"ExternalAccountClient\", ({\n    enumerable: true,\n    get: function() {\n        return externalclient_1.ExternalAccountClient;\n    }\n}));\nvar baseexternalclient_1 = __webpack_require__(/*! ./auth/baseexternalclient */ \"(action-browser)/./node_modules/google-auth-library/build/src/auth/baseexternalclient.js\");\nObject.defineProperty(exports, \"BaseExternalAccountClient\", ({\n    enumerable: true,\n    get: function() {\n        return baseexternalclient_1.BaseExternalAccountClient;\n    }\n}));\nvar downscopedclient_1 = __webpack_require__(/*! ./auth/downscopedclient */ \"(action-browser)/./node_modules/google-auth-library/build/src/auth/downscopedclient.js\");\nObject.defineProperty(exports, \"DownscopedClient\", ({\n    enumerable: true,\n    get: function() {\n        return downscopedclient_1.DownscopedClient;\n    }\n}));\nvar pluggable_auth_client_1 = __webpack_require__(/*! ./auth/pluggable-auth-client */ \"(action-browser)/./node_modules/google-auth-library/build/src/auth/pluggable-auth-client.js\");\nObject.defineProperty(exports, \"PluggableAuthClient\", ({\n    enumerable: true,\n    get: function() {\n        return pluggable_auth_client_1.PluggableAuthClient;\n    }\n}));\nvar transporters_1 = __webpack_require__(/*! ./transporters */ \"(action-browser)/./node_modules/google-auth-library/build/src/transporters.js\");\nObject.defineProperty(exports, \"DefaultTransporter\", ({\n    enumerable: true,\n    get: function() {\n        return transporters_1.DefaultTransporter;\n    }\n}));\nconst auth = new googleauth_1.GoogleAuth();\nexports.auth = auth;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/google-auth-library/build/src/index.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/google-auth-library/build/src/options.js":
/*!***************************************************************!*\
  !*** ./node_modules/google-auth-library/build/src/options.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n// Copyright 2017 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.validate = void 0;\n// Accepts an options object passed from the user to the API.  In the\n// previous version of the API, it referred to a `Request` options object.\n// Now it refers to an Axiox Request Config object.  This is here to help\n// ensure users don't pass invalid options when they upgrade from 0.x to 1.x.\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction validate(options) {\n    const vpairs = [\n        {\n            invalid: \"uri\",\n            expected: \"url\"\n        },\n        {\n            invalid: \"json\",\n            expected: \"data\"\n        },\n        {\n            invalid: \"qs\",\n            expected: \"params\"\n        }\n    ];\n    for (const pair of vpairs){\n        if (options[pair.invalid]) {\n            const e = `'${pair.invalid}' is not a valid configuration option. Please use '${pair.expected}' instead. This library is using Axios for requests. Please see https://github.com/axios/axios to learn more about the valid request options.`;\n            throw new Error(e);\n        }\n    }\n}\nexports.validate = validate;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9nb29nbGUtYXV0aC1saWJyYXJ5L2J1aWxkL3NyYy9vcHRpb25zLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsNEJBQTRCO0FBQzVCLEVBQUU7QUFDRixrRUFBa0U7QUFDbEUsbUVBQW1FO0FBQ25FLDBDQUEwQztBQUMxQyxFQUFFO0FBQ0Ysa0RBQWtEO0FBQ2xELEVBQUU7QUFDRixzRUFBc0U7QUFDdEUsb0VBQW9FO0FBQ3BFLDJFQUEyRTtBQUMzRSxzRUFBc0U7QUFDdEUsaUNBQWlDO0FBQ2pDQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsZ0JBQWdCLEdBQUcsS0FBSztBQUN4QixxRUFBcUU7QUFDckUsMEVBQTBFO0FBQzFFLHlFQUF5RTtBQUN6RSw2RUFBNkU7QUFDN0UsOERBQThEO0FBQzlELFNBQVNFLFNBQVNDLE9BQU87SUFDckIsTUFBTUMsU0FBUztRQUNYO1lBQUVDLFNBQVM7WUFBT0MsVUFBVTtRQUFNO1FBQ2xDO1lBQUVELFNBQVM7WUFBUUMsVUFBVTtRQUFPO1FBQ3BDO1lBQUVELFNBQVM7WUFBTUMsVUFBVTtRQUFTO0tBQ3ZDO0lBQ0QsS0FBSyxNQUFNQyxRQUFRSCxPQUFRO1FBQ3ZCLElBQUlELE9BQU8sQ0FBQ0ksS0FBS0YsT0FBTyxDQUFDLEVBQUU7WUFDdkIsTUFBTUcsSUFBSSxDQUFDLENBQUMsRUFBRUQsS0FBS0YsT0FBTyxDQUFDLG1EQUFtRCxFQUFFRSxLQUFLRCxRQUFRLENBQUMsNklBQTZJLENBQUM7WUFDNU8sTUFBTSxJQUFJRyxNQUFNRDtRQUNwQjtJQUNKO0FBQ0o7QUFDQVIsZ0JBQWdCLEdBQUdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3BvdGlmeS10by15b3V0dWJlLy4vbm9kZV9tb2R1bGVzL2dvb2dsZS1hdXRoLWxpYnJhcnkvYnVpbGQvc3JjL29wdGlvbnMuanM/NTM3MyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy52YWxpZGF0ZSA9IHZvaWQgMDtcbi8vIEFjY2VwdHMgYW4gb3B0aW9ucyBvYmplY3QgcGFzc2VkIGZyb20gdGhlIHVzZXIgdG8gdGhlIEFQSS4gIEluIHRoZVxuLy8gcHJldmlvdXMgdmVyc2lvbiBvZiB0aGUgQVBJLCBpdCByZWZlcnJlZCB0byBhIGBSZXF1ZXN0YCBvcHRpb25zIG9iamVjdC5cbi8vIE5vdyBpdCByZWZlcnMgdG8gYW4gQXhpb3ggUmVxdWVzdCBDb25maWcgb2JqZWN0LiAgVGhpcyBpcyBoZXJlIHRvIGhlbHBcbi8vIGVuc3VyZSB1c2VycyBkb24ndCBwYXNzIGludmFsaWQgb3B0aW9ucyB3aGVuIHRoZXkgdXBncmFkZSBmcm9tIDAueCB0byAxLnguXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuZnVuY3Rpb24gdmFsaWRhdGUob3B0aW9ucykge1xuICAgIGNvbnN0IHZwYWlycyA9IFtcbiAgICAgICAgeyBpbnZhbGlkOiAndXJpJywgZXhwZWN0ZWQ6ICd1cmwnIH0sXG4gICAgICAgIHsgaW52YWxpZDogJ2pzb24nLCBleHBlY3RlZDogJ2RhdGEnIH0sXG4gICAgICAgIHsgaW52YWxpZDogJ3FzJywgZXhwZWN0ZWQ6ICdwYXJhbXMnIH0sXG4gICAgXTtcbiAgICBmb3IgKGNvbnN0IHBhaXIgb2YgdnBhaXJzKSB7XG4gICAgICAgIGlmIChvcHRpb25zW3BhaXIuaW52YWxpZF0pIHtcbiAgICAgICAgICAgIGNvbnN0IGUgPSBgJyR7cGFpci5pbnZhbGlkfScgaXMgbm90IGEgdmFsaWQgY29uZmlndXJhdGlvbiBvcHRpb24uIFBsZWFzZSB1c2UgJyR7cGFpci5leHBlY3RlZH0nIGluc3RlYWQuIFRoaXMgbGlicmFyeSBpcyB1c2luZyBBeGlvcyBmb3IgcmVxdWVzdHMuIFBsZWFzZSBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2F4aW9zL2F4aW9zIHRvIGxlYXJuIG1vcmUgYWJvdXQgdGhlIHZhbGlkIHJlcXVlc3Qgb3B0aW9ucy5gO1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGUpO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy52YWxpZGF0ZSA9IHZhbGlkYXRlO1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwidmFsaWRhdGUiLCJvcHRpb25zIiwidnBhaXJzIiwiaW52YWxpZCIsImV4cGVjdGVkIiwicGFpciIsImUiLCJFcnJvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/google-auth-library/build/src/options.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/google-auth-library/build/src/transporters.js":
/*!********************************************************************!*\
  !*** ./node_modules/google-auth-library/build/src/transporters.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.DefaultTransporter = void 0;\nconst gaxios_1 = __webpack_require__(/*! gaxios */ \"(action-browser)/./node_modules/gaxios/build/src/index.js\");\nconst options_1 = __webpack_require__(/*! ./options */ \"(action-browser)/./node_modules/google-auth-library/build/src/options.js\");\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst pkg = __webpack_require__(/*! ../../package.json */ \"(action-browser)/./node_modules/google-auth-library/package.json\");\nconst PRODUCT_NAME = \"google-api-nodejs-client\";\nclass DefaultTransporter {\n    constructor(){\n        /**\n         * A configurable, replacable `Gaxios` instance.\n         */ this.instance = new gaxios_1.Gaxios();\n    }\n    /**\n     * Configures request options before making a request.\n     * @param opts GaxiosOptions options.\n     * @return Configured options.\n     */ configure(opts = {}) {\n        opts.headers = opts.headers || {};\n        if (true) {\n            // set transporter user agent if not in browser\n            const uaValue = opts.headers[\"User-Agent\"];\n            if (!uaValue) {\n                opts.headers[\"User-Agent\"] = DefaultTransporter.USER_AGENT;\n            } else if (!uaValue.includes(`${PRODUCT_NAME}/`)) {\n                opts.headers[\"User-Agent\"] = `${uaValue} ${DefaultTransporter.USER_AGENT}`;\n            }\n            // track google-auth-library-nodejs version:\n            if (!opts.headers[\"x-goog-api-client\"]) {\n                const nodeVersion = process.version.replace(/^v/, \"\");\n                opts.headers[\"x-goog-api-client\"] = `gl-node/${nodeVersion}`;\n            }\n        }\n        return opts;\n    }\n    /**\n     * Makes a request using Gaxios with given options.\n     * @param opts GaxiosOptions options.\n     * @param callback optional callback that contains GaxiosResponse object.\n     * @return GaxiosPromise, assuming no callback is passed.\n     */ request(opts) {\n        // ensure the user isn't passing in request-style options\n        opts = this.configure(opts);\n        (0, options_1.validate)(opts);\n        return this.instance.request(opts).catch((e)=>{\n            throw this.processError(e);\n        });\n    }\n    get defaults() {\n        return this.instance.defaults;\n    }\n    set defaults(opts) {\n        this.instance.defaults = opts;\n    }\n    /**\n     * Changes the error to include details from the body.\n     */ processError(e) {\n        const res = e.response;\n        const err = e;\n        const body = res ? res.data : null;\n        if (res && body && body.error && res.status !== 200) {\n            if (typeof body.error === \"string\") {\n                err.message = body.error;\n                err.status = res.status;\n            } else if (Array.isArray(body.error.errors)) {\n                err.message = body.error.errors.map((err2)=>err2.message).join(\"\\n\");\n                err.code = body.error.code;\n                err.errors = body.error.errors;\n            } else {\n                err.message = body.error.message;\n                err.code = body.error.code;\n            }\n        } else if (res && res.status >= 400) {\n            // Consider all 4xx and 5xx responses errors.\n            err.message = body;\n            err.status = res.status;\n        }\n        return err;\n    }\n}\nexports.DefaultTransporter = DefaultTransporter;\n/**\n * Default user agent.\n */ DefaultTransporter.USER_AGENT = `${PRODUCT_NAME}/${pkg.version}`;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/google-auth-library/build/src/transporters.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/google-auth-library/build/src/util.js":
/*!************************************************************!*\
  !*** ./node_modules/google-auth-library/build/src/util.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n// Copyright 2023 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nvar __classPrivateFieldGet = (void 0) && (void 0).__classPrivateFieldGet || function(receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _LRUCache_instances, _LRUCache_cache, _LRUCache_moveToEnd, _LRUCache_evict;\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.LRUCache = exports.originalOrCamelOptions = exports.snakeToCamel = void 0;\n/**\n * Returns the camel case of a provided string.\n *\n * @remarks\n *\n * Match any `_` and not `_` pair, then return the uppercase of the not `_`\n * character.\n *\n * @internal\n *\n * @param str the string to convert\n * @returns the camelCase'd string\n */ function snakeToCamel(str) {\n    return str.replace(/([_][^_])/g, (match)=>match.slice(1).toUpperCase());\n}\nexports.snakeToCamel = snakeToCamel;\n/**\n * Get the value of `obj[key]` or `obj[camelCaseKey]`, with a preference\n * for original, non-camelCase key.\n *\n * @param obj object to lookup a value in\n * @returns a `get` function for getting `obj[key || snakeKey]`, if available\n */ function originalOrCamelOptions(obj) {\n    /**\n     *\n     * @param key an index of object, preferably snake_case\n     * @returns the value `obj[key || snakeKey]`, if available\n     */ function get(key) {\n        var _a;\n        const o = obj || {};\n        return (_a = o[key]) !== null && _a !== void 0 ? _a : o[snakeToCamel(key)];\n    }\n    return {\n        get\n    };\n}\nexports.originalOrCamelOptions = originalOrCamelOptions;\n/**\n * A simple LRU cache utility.\n * Not meant for external usage.\n *\n * @experimental\n * @internal\n */ class LRUCache {\n    constructor(options){\n        _LRUCache_instances.add(this);\n        /**\n         * Maps are in order. Thus, the older item is the first item.\n         *\n         * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map}\n         */ _LRUCache_cache.set(this, new Map());\n        this.capacity = options.capacity;\n        this.maxAge = options.maxAge;\n    }\n    /**\n     * Add an item to the cache.\n     *\n     * @param key the key to upsert\n     * @param value the value of the key\n     */ set(key, value) {\n        __classPrivateFieldGet(this, _LRUCache_instances, \"m\", _LRUCache_moveToEnd).call(this, key, value);\n        __classPrivateFieldGet(this, _LRUCache_instances, \"m\", _LRUCache_evict).call(this);\n    }\n    /**\n     * Get an item from the cache.\n     *\n     * @param key the key to retrieve\n     */ get(key) {\n        const item = __classPrivateFieldGet(this, _LRUCache_cache, \"f\").get(key);\n        if (!item) return;\n        __classPrivateFieldGet(this, _LRUCache_instances, \"m\", _LRUCache_moveToEnd).call(this, key, item.value);\n        __classPrivateFieldGet(this, _LRUCache_instances, \"m\", _LRUCache_evict).call(this);\n        return item.value;\n    }\n}\nexports.LRUCache = LRUCache;\n_LRUCache_cache = new WeakMap(), _LRUCache_instances = new WeakSet(), _LRUCache_moveToEnd = function _LRUCache_moveToEnd(key, value) {\n    __classPrivateFieldGet(this, _LRUCache_cache, \"f\").delete(key);\n    __classPrivateFieldGet(this, _LRUCache_cache, \"f\").set(key, {\n        value,\n        lastAccessed: Date.now()\n    });\n}, _LRUCache_evict = function _LRUCache_evict() {\n    const cutoffDate = this.maxAge ? Date.now() - this.maxAge : 0;\n    /**\n     * Because we know Maps are in order, this item is both the\n     * last item in the list (capacity) and oldest (maxAge).\n     */ let oldestItem = __classPrivateFieldGet(this, _LRUCache_cache, \"f\").entries().next();\n    while(!oldestItem.done && (__classPrivateFieldGet(this, _LRUCache_cache, \"f\").size > this.capacity || // too many\n    oldestItem.value[1].lastAccessed < cutoffDate // too old\n    )){\n        __classPrivateFieldGet(this, _LRUCache_cache, \"f\").delete(oldestItem.value[0]);\n        oldestItem = __classPrivateFieldGet(this, _LRUCache_cache, \"f\").entries().next();\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/google-auth-library/build/src/util.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/google-auth-library/node_modules/gcp-metadata/build/src/gcp-residency.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/google-auth-library/node_modules/gcp-metadata/build/src/gcp-residency.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.detectGCPResidency = exports.isGoogleComputeEngine = exports.isGoogleComputeEngineMACAddress = exports.isGoogleComputeEngineLinux = exports.isGoogleCloudServerless = exports.GCE_LINUX_BIOS_PATHS = void 0;\nconst fs_1 = __webpack_require__(/*! fs */ \"fs\");\nconst os_1 = __webpack_require__(/*! os */ \"os\");\n/**\n * Known paths unique to Google Compute Engine Linux instances\n */ exports.GCE_LINUX_BIOS_PATHS = {\n    BIOS_DATE: \"/sys/class/dmi/id/bios_date\",\n    BIOS_VENDOR: \"/sys/class/dmi/id/bios_vendor\"\n};\nconst GCE_MAC_ADDRESS_REGEX = /^42:01/;\n/**\n * Determines if the process is running on a Google Cloud Serverless environment (Cloud Run or Cloud Functions instance).\n *\n * Uses the:\n * - {@link https://cloud.google.com/run/docs/container-contract#env-vars Cloud Run environment variables}.\n * - {@link https://cloud.google.com/functions/docs/env-var Cloud Functions environment variables}.\n *\n * @returns {boolean} `true` if the process is running on GCP serverless, `false` otherwise.\n */ function isGoogleCloudServerless() {\n    /**\n     * `CLOUD_RUN_JOB` is used for Cloud Run Jobs\n     * - See {@link https://cloud.google.com/run/docs/container-contract#env-vars Cloud Run environment variables}.\n     *\n     * `FUNCTION_NAME` is used in older Cloud Functions environments:\n     * - See {@link https://cloud.google.com/functions/docs/env-var Python 3.7 and Go 1.11}.\n     *\n     * `K_SERVICE` is used in Cloud Run and newer Cloud Functions environments:\n     * - See {@link https://cloud.google.com/run/docs/container-contract#env-vars Cloud Run environment variables}.\n     * - See {@link https://cloud.google.com/functions/docs/env-var Cloud Functions newer runtimes}.\n     */ const isGFEnvironment = process.env.CLOUD_RUN_JOB || process.env.FUNCTION_NAME || process.env.K_SERVICE;\n    return !!isGFEnvironment;\n}\nexports.isGoogleCloudServerless = isGoogleCloudServerless;\n/**\n * Determines if the process is running on a Linux Google Compute Engine instance.\n *\n * @returns {boolean} `true` if the process is running on Linux GCE, `false` otherwise.\n */ function isGoogleComputeEngineLinux() {\n    if ((0, os_1.platform)() !== \"linux\") return false;\n    try {\n        // ensure this file exist\n        (0, fs_1.statSync)(exports.GCE_LINUX_BIOS_PATHS.BIOS_DATE);\n        // ensure this file exist and matches\n        const biosVendor = (0, fs_1.readFileSync)(exports.GCE_LINUX_BIOS_PATHS.BIOS_VENDOR, \"utf8\");\n        return /Google/.test(biosVendor);\n    } catch (_a) {\n        return false;\n    }\n}\nexports.isGoogleComputeEngineLinux = isGoogleComputeEngineLinux;\n/**\n * Determines if the process is running on a Google Compute Engine instance with a known\n * MAC address.\n *\n * @returns {boolean} `true` if the process is running on GCE (as determined by MAC address), `false` otherwise.\n */ function isGoogleComputeEngineMACAddress() {\n    const interfaces = (0, os_1.networkInterfaces)();\n    for (const item of Object.values(interfaces)){\n        if (!item) continue;\n        for (const { mac } of item){\n            if (GCE_MAC_ADDRESS_REGEX.test(mac)) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\nexports.isGoogleComputeEngineMACAddress = isGoogleComputeEngineMACAddress;\n/**\n * Determines if the process is running on a Google Compute Engine instance.\n *\n * @returns {boolean} `true` if the process is running on GCE, `false` otherwise.\n */ function isGoogleComputeEngine() {\n    return isGoogleComputeEngineLinux() || isGoogleComputeEngineMACAddress();\n}\nexports.isGoogleComputeEngine = isGoogleComputeEngine;\n/**\n * Determines if the process is running on Google Cloud Platform.\n *\n * @returns {boolean} `true` if the process is running on GCP, `false` otherwise.\n */ function detectGCPResidency() {\n    return isGoogleCloudServerless() || isGoogleComputeEngine();\n}\nexports.detectGCPResidency = detectGCPResidency; //# sourceMappingURL=gcp-residency.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/google-auth-library/node_modules/gcp-metadata/build/src/gcp-residency.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/google-auth-library/node_modules/gcp-metadata/build/src/index.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/google-auth-library/node_modules/gcp-metadata/build/src/index.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * Copyright 2018 Google LLC\n *\n * Distributed under MIT license.\n * See file LICENSE for detail or copy at https://opensource.org/licenses/MIT\n */ var __createBinding = (void 0) && (void 0).__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = {\n            enumerable: true,\n            get: function() {\n                return m[k];\n            }\n        };\n    }\n    Object.defineProperty(o, k2, desc);\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar __exportStar = (void 0) && (void 0).__exportStar || function(m, exports1) {\n    for(var p in m)if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.requestTimeout = exports.setGCPResidency = exports.getGCPResidency = exports.gcpResidencyCache = exports.resetIsAvailableCache = exports.isAvailable = exports.bulk = exports.universe = exports.project = exports.instance = exports.METADATA_SERVER_DETECTION = exports.HEADERS = exports.HEADER_VALUE = exports.HEADER_NAME = exports.SECONDARY_HOST_ADDRESS = exports.HOST_ADDRESS = exports.BASE_PATH = void 0;\nconst gaxios_1 = __webpack_require__(/*! gaxios */ \"(action-browser)/./node_modules/gaxios/build/src/index.js\");\nconst jsonBigint = __webpack_require__(/*! json-bigint */ \"(action-browser)/./node_modules/json-bigint/index.js\");\nconst gcp_residency_1 = __webpack_require__(/*! ./gcp-residency */ \"(action-browser)/./node_modules/google-auth-library/node_modules/gcp-metadata/build/src/gcp-residency.js\");\nexports.BASE_PATH = \"/computeMetadata/v1\";\nexports.HOST_ADDRESS = \"http://169.254.169.254\";\nexports.SECONDARY_HOST_ADDRESS = \"http://metadata.google.internal.\";\nexports.HEADER_NAME = \"Metadata-Flavor\";\nexports.HEADER_VALUE = \"Google\";\nexports.HEADERS = Object.freeze({\n    [exports.HEADER_NAME]: exports.HEADER_VALUE\n});\n/**\n * Metadata server detection override options.\n *\n * Available via `process.env.METADATA_SERVER_DETECTION`.\n */ exports.METADATA_SERVER_DETECTION = Object.freeze({\n    \"assume-present\": \"don't try to ping the metadata server, but assume it's present\",\n    none: \"don't try to ping the metadata server, but don't try to use it either\",\n    \"bios-only\": \"treat the result of a BIOS probe as canonical (don't fall back to pinging)\",\n    \"ping-only\": \"skip the BIOS probe, and go straight to pinging\"\n});\n/**\n * Returns the base URL while taking into account the GCE_METADATA_HOST\n * environment variable if it exists.\n *\n * @returns The base URL, e.g., http://169.254.169.254/computeMetadata/v1.\n */ function getBaseUrl(baseUrl) {\n    if (!baseUrl) {\n        baseUrl = process.env.GCE_METADATA_IP || process.env.GCE_METADATA_HOST || exports.HOST_ADDRESS;\n    }\n    // If no scheme is provided default to HTTP:\n    if (!/^https?:\\/\\//.test(baseUrl)) {\n        baseUrl = `http://${baseUrl}`;\n    }\n    return new URL(exports.BASE_PATH, baseUrl).href;\n}\n// Accepts an options object passed from the user to the API. In previous\n// versions of the API, it referred to a `Request` or an `Axios` request\n// options object.  Now it refers to an object with very limited property\n// names. This is here to help ensure users don't pass invalid options when\n// they  upgrade from 0.4 to 0.5 to 0.8.\nfunction validate(options) {\n    Object.keys(options).forEach((key)=>{\n        switch(key){\n            case \"params\":\n            case \"property\":\n            case \"headers\":\n                break;\n            case \"qs\":\n                throw new Error(\"'qs' is not a valid configuration option. Please use 'params' instead.\");\n            default:\n                throw new Error(`'${key}' is not a valid configuration option.`);\n        }\n    });\n}\nasync function metadataAccessor(type, options = {}, noResponseRetries = 3, fastFail = false) {\n    let metadataKey = \"\";\n    let params = {};\n    let headers = {};\n    if (typeof type === \"object\") {\n        const metadataAccessor = type;\n        metadataKey = metadataAccessor.metadataKey;\n        params = metadataAccessor.params || params;\n        headers = metadataAccessor.headers || headers;\n        noResponseRetries = metadataAccessor.noResponseRetries || noResponseRetries;\n        fastFail = metadataAccessor.fastFail || fastFail;\n    } else {\n        metadataKey = type;\n    }\n    if (typeof options === \"string\") {\n        metadataKey += `/${options}`;\n    } else {\n        validate(options);\n        if (options.property) {\n            metadataKey += `/${options.property}`;\n        }\n        headers = options.headers || headers;\n        params = options.params || params;\n    }\n    try {\n        const requestMethod = fastFail ? fastFailMetadataRequest : gaxios_1.request;\n        const res = await requestMethod({\n            url: `${getBaseUrl()}/${metadataKey}`,\n            headers: {\n                ...exports.HEADERS,\n                ...headers\n            },\n            retryConfig: {\n                noResponseRetries\n            },\n            params,\n            responseType: \"text\",\n            timeout: requestTimeout()\n        });\n        // NOTE: node.js converts all incoming headers to lower case.\n        if (res.headers[exports.HEADER_NAME.toLowerCase()] !== exports.HEADER_VALUE) {\n            throw new Error(`Invalid response from metadata service: incorrect ${exports.HEADER_NAME} header.`);\n        } else if (!res.data) {\n            throw new Error(\"Invalid response from the metadata service\");\n        }\n        if (typeof res.data === \"string\") {\n            try {\n                return jsonBigint.parse(res.data);\n            } catch (_a) {\n            /* ignore */ }\n        }\n        return res.data;\n    } catch (e) {\n        const err = e;\n        if (err.response && err.response.status !== 200) {\n            err.message = `Unsuccessful response status code. ${err.message}`;\n        }\n        throw e;\n    }\n}\nasync function fastFailMetadataRequest(options) {\n    const secondaryOptions = {\n        ...options,\n        url: options.url.replace(getBaseUrl(), getBaseUrl(exports.SECONDARY_HOST_ADDRESS))\n    };\n    // We race a connection between DNS/IP to metadata server. There are a couple\n    // reasons for this:\n    //\n    // 1. the DNS is slow in some GCP environments; by checking both, we might\n    //    detect the runtime environment signficantly faster.\n    // 2. we can't just check the IP, which is tarpitted and slow to respond\n    //    on a user's local machine.\n    //\n    // Additional logic has been added to make sure that we don't create an\n    // unhandled rejection in scenarios where a failure happens sometime\n    // after a success.\n    //\n    // Note, however, if a failure happens prior to a success, a rejection should\n    // occur, this is for folks running locally.\n    //\n    let responded = false;\n    const r1 = (0, gaxios_1.request)(options).then((res)=>{\n        responded = true;\n        return res;\n    }).catch((err)=>{\n        if (responded) {\n            return r2;\n        } else {\n            responded = true;\n            throw err;\n        }\n    });\n    const r2 = (0, gaxios_1.request)(secondaryOptions).then((res)=>{\n        responded = true;\n        return res;\n    }).catch((err)=>{\n        if (responded) {\n            return r1;\n        } else {\n            responded = true;\n            throw err;\n        }\n    });\n    return Promise.race([\n        r1,\n        r2\n    ]);\n}\n/**\n * Obtain metadata for the current GCE instance.\n *\n * @see {@link https://cloud.google.com/compute/docs/metadata/predefined-metadata-keys}\n *\n * @example\n * ```\n * const serviceAccount: {} = await instance('service-accounts/');\n * const serviceAccountEmail: string = await instance('service-accounts/default/email');\n * ```\n */ // eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction instance(options) {\n    return metadataAccessor(\"instance\", options);\n}\nexports.instance = instance;\n/**\n * Obtain metadata for the current GCP project.\n *\n * @see {@link https://cloud.google.com/compute/docs/metadata/predefined-metadata-keys}\n *\n * @example\n * ```\n * const projectId: string = await project('project-id');\n * const numericProjectId: number = await project('numeric-project-id');\n * ```\n */ // eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction project(options) {\n    return metadataAccessor(\"project\", options);\n}\nexports.project = project;\n/**\n * Obtain metadata for the current universe.\n *\n * @see {@link https://cloud.google.com/compute/docs/metadata/predefined-metadata-keys}\n *\n * @example\n * ```\n * const universeDomain: string = await universe('universe_domain');\n * ```\n */ function universe(options) {\n    return metadataAccessor(\"universe\", options);\n}\nexports.universe = universe;\n/**\n * Retrieve metadata items in parallel.\n *\n * @see {@link https://cloud.google.com/compute/docs/metadata/predefined-metadata-keys}\n *\n * @example\n * ```\n * const data = await bulk([\n *   {\n *     metadataKey: 'instance',\n *   },\n *   {\n *     metadataKey: 'project/project-id',\n *   },\n * ] as const);\n *\n * // data.instance;\n * // data['project/project-id'];\n * ```\n *\n * @param properties The metadata properties to retrieve\n * @returns The metadata in `metadatakey:value` format\n */ async function bulk(properties) {\n    const r = {};\n    await Promise.all(properties.map((item)=>{\n        return (async ()=>{\n            const res = await metadataAccessor(item);\n            const key = item.metadataKey;\n            r[key] = res;\n        })();\n    }));\n    return r;\n}\nexports.bulk = bulk;\n/*\n * How many times should we retry detecting GCP environment.\n */ function detectGCPAvailableRetries() {\n    return process.env.DETECT_GCP_RETRIES ? Number(process.env.DETECT_GCP_RETRIES) : 0;\n}\nlet cachedIsAvailableResponse;\n/**\n * Determine if the metadata server is currently available.\n */ async function isAvailable() {\n    if (process.env.METADATA_SERVER_DETECTION) {\n        const value = process.env.METADATA_SERVER_DETECTION.trim().toLocaleLowerCase();\n        if (!(value in exports.METADATA_SERVER_DETECTION)) {\n            throw new RangeError(`Unknown \\`METADATA_SERVER_DETECTION\\` env variable. Got \\`${value}\\`, but it should be \\`${Object.keys(exports.METADATA_SERVER_DETECTION).join(\"`, `\")}\\`, or unset`);\n        }\n        switch(value){\n            case \"assume-present\":\n                return true;\n            case \"none\":\n                return false;\n            case \"bios-only\":\n                return getGCPResidency();\n            case \"ping-only\":\n        }\n    }\n    try {\n        // If a user is instantiating several GCP libraries at the same time,\n        // this may result in multiple calls to isAvailable(), to detect the\n        // runtime environment. We use the same promise for each of these calls\n        // to reduce the network load.\n        if (cachedIsAvailableResponse === undefined) {\n            cachedIsAvailableResponse = metadataAccessor(\"instance\", undefined, detectGCPAvailableRetries(), // If the default HOST_ADDRESS has been overridden, we should not\n            // make an effort to try SECONDARY_HOST_ADDRESS (as we are likely in\n            // a non-GCP environment):\n            !(process.env.GCE_METADATA_IP || process.env.GCE_METADATA_HOST));\n        }\n        await cachedIsAvailableResponse;\n        return true;\n    } catch (e) {\n        const err = e;\n        if (process.env.DEBUG_AUTH) {\n            console.info(err);\n        }\n        if (err.type === \"request-timeout\") {\n            // If running in a GCP environment, metadata endpoint should return\n            // within ms.\n            return false;\n        }\n        if (err.response && err.response.status === 404) {\n            return false;\n        } else {\n            if (!(err.response && err.response.status === 404) && // A warning is emitted if we see an unexpected err.code, or err.code\n            // is not populated:\n            (!err.code || ![\n                \"EHOSTDOWN\",\n                \"EHOSTUNREACH\",\n                \"ENETUNREACH\",\n                \"ENOENT\",\n                \"ENOTFOUND\",\n                \"ECONNREFUSED\"\n            ].includes(err.code))) {\n                let code = \"UNKNOWN\";\n                if (err.code) code = err.code;\n                process.emitWarning(`received unexpected error = ${err.message} code = ${code}`, \"MetadataLookupWarning\");\n            }\n            // Failure to resolve the metadata service means that it is not available.\n            return false;\n        }\n    }\n}\nexports.isAvailable = isAvailable;\n/**\n * reset the memoized isAvailable() lookup.\n */ function resetIsAvailableCache() {\n    cachedIsAvailableResponse = undefined;\n}\nexports.resetIsAvailableCache = resetIsAvailableCache;\n/**\n * A cache for the detected GCP Residency.\n */ exports.gcpResidencyCache = null;\n/**\n * Detects GCP Residency.\n * Caches results to reduce costs for subsequent calls.\n *\n * @see setGCPResidency for setting\n */ function getGCPResidency() {\n    if (exports.gcpResidencyCache === null) {\n        setGCPResidency();\n    }\n    return exports.gcpResidencyCache;\n}\nexports.getGCPResidency = getGCPResidency;\n/**\n * Sets the detected GCP Residency.\n * Useful for forcing metadata server detection behavior.\n *\n * Set `null` to autodetect the environment (default behavior).\n * @see getGCPResidency for getting\n */ function setGCPResidency(value = null) {\n    exports.gcpResidencyCache = value !== null ? value : (0, gcp_residency_1.detectGCPResidency)();\n}\nexports.setGCPResidency = setGCPResidency;\n/**\n * Obtain the timeout for requests to the metadata server.\n *\n * In certain environments and conditions requests can take longer than\n * the default timeout to complete. This function will determine the\n * appropriate timeout based on the environment.\n *\n * @returns {number} a request timeout duration in milliseconds.\n */ function requestTimeout() {\n    return getGCPResidency() ? 0 : 3000;\n}\nexports.requestTimeout = requestTimeout;\n__exportStar(__webpack_require__(/*! ./gcp-residency */ \"(action-browser)/./node_modules/google-auth-library/node_modules/gcp-metadata/build/src/gcp-residency.js\"), exports); //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/google-auth-library/node_modules/gcp-metadata/build/src/index.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/google-auth-library/package.json":
/*!*******************************************************!*\
  !*** ./node_modules/google-auth-library/package.json ***!
  \*******************************************************/
/***/ ((module) => {

module.exports = JSON.parse('{"name":"google-auth-library","version":"9.6.3","author":"Google Inc.","description":"Google APIs Authentication Client Library for Node.js","engines":{"node":">=14"},"main":"./build/src/index.js","types":"./build/src/index.d.ts","repository":"googleapis/google-auth-library-nodejs.git","keywords":["google","api","google apis","client","client library"],"dependencies":{"base64-js":"^1.3.0","ecdsa-sig-formatter":"^1.0.11","gaxios":"^6.1.1","gcp-metadata":"^6.1.0","gtoken":"^7.0.0","jws":"^4.0.0"},"devDependencies":{"@compodoc/compodoc":"^1.1.7","@types/base64-js":"^1.2.5","@types/chai":"^4.1.7","@types/jws":"^3.1.0","@types/mocha":"^9.0.0","@types/mv":"^2.1.0","@types/ncp":"^2.0.1","@types/node":"^20.4.2","@types/sinon":"^10.0.0","assert-rejects":"^1.0.0","c8":"^8.0.0","chai":"^4.2.0","codecov":"^3.0.2","execa":"^5.0.0","gts":"^5.0.0","is-docker":"^2.0.0","karma":"^6.0.0","karma-chrome-launcher":"^3.0.0","karma-coverage":"^2.0.0","karma-firefox-launcher":"^2.0.0","karma-mocha":"^2.0.0","karma-sourcemap-loader":"^0.4.0","karma-webpack":"5.0.0","keypair":"^1.0.4","linkinator":"^4.0.0","mocha":"^9.2.2","mv":"^2.1.1","ncp":"^2.0.0","nock":"^13.0.0","null-loader":"^4.0.0","puppeteer":"^21.0.0","sinon":"^15.0.0","ts-loader":"^8.0.0","typescript":"^5.1.6","webpack":"^5.21.2","webpack-cli":"^4.0.0"},"files":["build/src","!build/src/**/*.map"],"scripts":{"test":"c8 mocha build/test","clean":"gts clean","prepare":"npm run compile","lint":"gts check","compile":"tsc -p .","fix":"gts fix","pretest":"npm run compile -- --sourceMap","docs":"compodoc src/","samples-setup":"cd samples/ && npm link ../ && npm run setup && cd ../","samples-test":"cd samples/ && npm link ../ && npm test && cd ../","system-test":"mocha build/system-test --timeout 60000","presystem-test":"npm run compile -- --sourceMap","webpack":"webpack","browser-test":"karma start","docs-test":"linkinator docs","predocs-test":"npm run docs","prelint":"cd samples; npm link ../; npm install","precompile":"gts clean"},"license":"Apache-2.0"}');

/***/ })

};
;
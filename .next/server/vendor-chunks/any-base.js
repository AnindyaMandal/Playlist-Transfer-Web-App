"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/any-base";
exports.ids = ["vendor-chunks/any-base"];
exports.modules = {

/***/ "(rsc)/./node_modules/any-base/index.js":
/*!****************************************!*\
  !*** ./node_modules/any-base/index.js ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar Converter = __webpack_require__(/*! ./src/converter */ \"(rsc)/./node_modules/any-base/src/converter.js\");\n/**\n * Function get source and destination alphabet and return convert function\n *\n * @param {string|Array} srcAlphabet\n * @param {string|Array} dstAlphabet\n *\n * @returns {function(number|Array)}\n */ function anyBase(srcAlphabet, dstAlphabet) {\n    var converter = new Converter(srcAlphabet, dstAlphabet);\n    /**\n     * Convert function\n     *\n     * @param {string|Array} number\n     *\n     * @return {string|Array} number\n     */ return function(number) {\n        return converter.convert(number);\n    };\n}\nanyBase.BIN = \"01\";\nanyBase.OCT = \"01234567\";\nanyBase.DEC = \"0123456789\";\nanyBase.HEX = \"0123456789abcdef\";\nmodule.exports = anyBase;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYW55LWJhc2UvaW5kZXguanMiLCJtYXBwaW5ncyI6IjtBQUFBLElBQUlBLFlBQVlDLG1CQUFPQSxDQUFDO0FBRXhCOzs7Ozs7O0NBT0MsR0FDRCxTQUFTQyxRQUFRQyxXQUFXLEVBQUVDLFdBQVc7SUFDckMsSUFBSUMsWUFBWSxJQUFJTCxVQUFVRyxhQUFhQztJQUMzQzs7Ozs7O0tBTUMsR0FDRCxPQUFPLFNBQVVFLE1BQU07UUFDbkIsT0FBT0QsVUFBVUUsT0FBTyxDQUFDRDtJQUM3QjtBQUNKO0FBRUFKLFFBQVFNLEdBQUcsR0FBRztBQUNkTixRQUFRTyxHQUFHLEdBQUc7QUFDZFAsUUFBUVEsR0FBRyxHQUFHO0FBQ2RSLFFBQVFTLEdBQUcsR0FBRztBQUVkQyxPQUFPQyxPQUFPLEdBQUdYIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3BvdGlmeS10by15b3V0dWJlLy4vbm9kZV9tb2R1bGVzL2FueS1iYXNlL2luZGV4LmpzP2RhMTEiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIENvbnZlcnRlciA9IHJlcXVpcmUoJy4vc3JjL2NvbnZlcnRlcicpO1xuXG4vKipcbiAqIEZ1bmN0aW9uIGdldCBzb3VyY2UgYW5kIGRlc3RpbmF0aW9uIGFscGhhYmV0IGFuZCByZXR1cm4gY29udmVydCBmdW5jdGlvblxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfEFycmF5fSBzcmNBbHBoYWJldFxuICogQHBhcmFtIHtzdHJpbmd8QXJyYXl9IGRzdEFscGhhYmV0XG4gKlxuICogQHJldHVybnMge2Z1bmN0aW9uKG51bWJlcnxBcnJheSl9XG4gKi9cbmZ1bmN0aW9uIGFueUJhc2Uoc3JjQWxwaGFiZXQsIGRzdEFscGhhYmV0KSB7XG4gICAgdmFyIGNvbnZlcnRlciA9IG5ldyBDb252ZXJ0ZXIoc3JjQWxwaGFiZXQsIGRzdEFscGhhYmV0KTtcbiAgICAvKipcbiAgICAgKiBDb252ZXJ0IGZ1bmN0aW9uXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ3xBcnJheX0gbnVtYmVyXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtzdHJpbmd8QXJyYXl9IG51bWJlclxuICAgICAqL1xuICAgIHJldHVybiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgIHJldHVybiBjb252ZXJ0ZXIuY29udmVydChudW1iZXIpO1xuICAgIH1cbn07XG5cbmFueUJhc2UuQklOID0gJzAxJztcbmFueUJhc2UuT0NUID0gJzAxMjM0NTY3JztcbmFueUJhc2UuREVDID0gJzAxMjM0NTY3ODknO1xuYW55QmFzZS5IRVggPSAnMDEyMzQ1Njc4OWFiY2RlZic7XG5cbm1vZHVsZS5leHBvcnRzID0gYW55QmFzZTsiXSwibmFtZXMiOlsiQ29udmVydGVyIiwicmVxdWlyZSIsImFueUJhc2UiLCJzcmNBbHBoYWJldCIsImRzdEFscGhhYmV0IiwiY29udmVydGVyIiwibnVtYmVyIiwiY29udmVydCIsIkJJTiIsIk9DVCIsIkRFQyIsIkhFWCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/any-base/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/any-base/src/converter.js":
/*!************************************************!*\
  !*** ./node_modules/any-base/src/converter.js ***!
  \************************************************/
/***/ ((module) => {

eval("\n/**\n * Converter\n *\n * @param {string|Array} srcAlphabet\n * @param {string|Array} dstAlphabet\n * @constructor\n */ function Converter(srcAlphabet, dstAlphabet) {\n    if (!srcAlphabet || !dstAlphabet || !srcAlphabet.length || !dstAlphabet.length) {\n        throw new Error(\"Bad alphabet\");\n    }\n    this.srcAlphabet = srcAlphabet;\n    this.dstAlphabet = dstAlphabet;\n}\n/**\n * Convert number from source alphabet to destination alphabet\n *\n * @param {string|Array} number - number represented as a string or array of points\n *\n * @returns {string|Array}\n */ Converter.prototype.convert = function(number) {\n    var i, divide, newlen, numberMap = {}, fromBase = this.srcAlphabet.length, toBase = this.dstAlphabet.length, length = number.length, result = typeof number === \"string\" ? \"\" : [];\n    if (!this.isValid(number)) {\n        throw new Error('Number \"' + number + '\" contains of non-alphabetic digits (' + this.srcAlphabet + \")\");\n    }\n    if (this.srcAlphabet === this.dstAlphabet) {\n        return number;\n    }\n    for(i = 0; i < length; i++){\n        numberMap[i] = this.srcAlphabet.indexOf(number[i]);\n    }\n    do {\n        divide = 0;\n        newlen = 0;\n        for(i = 0; i < length; i++){\n            divide = divide * fromBase + numberMap[i];\n            if (divide >= toBase) {\n                numberMap[newlen++] = parseInt(divide / toBase, 10);\n                divide = divide % toBase;\n            } else if (newlen > 0) {\n                numberMap[newlen++] = 0;\n            }\n        }\n        length = newlen;\n        result = this.dstAlphabet.slice(divide, divide + 1).concat(result);\n    }while (newlen !== 0);\n    return result;\n};\n/**\n * Valid number with source alphabet\n *\n * @param {number} number\n *\n * @returns {boolean}\n */ Converter.prototype.isValid = function(number) {\n    var i = 0;\n    for(; i < number.length; ++i){\n        if (this.srcAlphabet.indexOf(number[i]) === -1) {\n            return false;\n        }\n    }\n    return true;\n};\nmodule.exports = Converter;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYW55LWJhc2Uvc3JjL2NvbnZlcnRlci5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBOzs7Ozs7Q0FNQyxHQUNELFNBQVNBLFVBQVVDLFdBQVcsRUFBRUMsV0FBVztJQUN2QyxJQUFJLENBQUNELGVBQWUsQ0FBQ0MsZUFBZSxDQUFDRCxZQUFZRSxNQUFNLElBQUksQ0FBQ0QsWUFBWUMsTUFBTSxFQUFFO1FBQzVFLE1BQU0sSUFBSUMsTUFBTTtJQUNwQjtJQUNBLElBQUksQ0FBQ0gsV0FBVyxHQUFHQTtJQUNuQixJQUFJLENBQUNDLFdBQVcsR0FBR0E7QUFDdkI7QUFFQTs7Ozs7O0NBTUMsR0FDREYsVUFBVUssU0FBUyxDQUFDQyxPQUFPLEdBQUcsU0FBU0MsTUFBTTtJQUN6QyxJQUFJQyxHQUFHQyxRQUFRQyxRQUNmQyxZQUFZLENBQUMsR0FDYkMsV0FBVyxJQUFJLENBQUNYLFdBQVcsQ0FBQ0UsTUFBTSxFQUNsQ1UsU0FBUyxJQUFJLENBQUNYLFdBQVcsQ0FBQ0MsTUFBTSxFQUNoQ0EsU0FBU0ksT0FBT0osTUFBTSxFQUN0QlcsU0FBUyxPQUFPUCxXQUFXLFdBQVcsS0FBSyxFQUFFO0lBRTdDLElBQUksQ0FBQyxJQUFJLENBQUNRLE9BQU8sQ0FBQ1IsU0FBUztRQUN2QixNQUFNLElBQUlILE1BQU0sYUFBYUcsU0FBUywwQ0FBMEMsSUFBSSxDQUFDTixXQUFXLEdBQUc7SUFDdkc7SUFFQSxJQUFJLElBQUksQ0FBQ0EsV0FBVyxLQUFLLElBQUksQ0FBQ0MsV0FBVyxFQUFFO1FBQ3ZDLE9BQU9LO0lBQ1g7SUFFQSxJQUFLQyxJQUFJLEdBQUdBLElBQUlMLFFBQVFLLElBQUs7UUFDekJHLFNBQVMsQ0FBQ0gsRUFBRSxHQUFHLElBQUksQ0FBQ1AsV0FBVyxDQUFDZSxPQUFPLENBQUNULE1BQU0sQ0FBQ0MsRUFBRTtJQUNyRDtJQUNBLEdBQUc7UUFDQ0MsU0FBUztRQUNUQyxTQUFTO1FBQ1QsSUFBS0YsSUFBSSxHQUFHQSxJQUFJTCxRQUFRSyxJQUFLO1lBQ3pCQyxTQUFTQSxTQUFTRyxXQUFXRCxTQUFTLENBQUNILEVBQUU7WUFDekMsSUFBSUMsVUFBVUksUUFBUTtnQkFDbEJGLFNBQVMsQ0FBQ0QsU0FBUyxHQUFHTyxTQUFTUixTQUFTSSxRQUFRO2dCQUNoREosU0FBU0EsU0FBU0k7WUFDdEIsT0FBTyxJQUFJSCxTQUFTLEdBQUc7Z0JBQ25CQyxTQUFTLENBQUNELFNBQVMsR0FBRztZQUMxQjtRQUNKO1FBQ0FQLFNBQVNPO1FBQ1RJLFNBQVMsSUFBSSxDQUFDWixXQUFXLENBQUNnQixLQUFLLENBQUNULFFBQVFBLFNBQVMsR0FBR1UsTUFBTSxDQUFDTDtJQUMvRCxRQUFTSixXQUFXLEdBQUc7SUFFdkIsT0FBT0k7QUFDWDtBQUVBOzs7Ozs7Q0FNQyxHQUNEZCxVQUFVSyxTQUFTLENBQUNVLE9BQU8sR0FBRyxTQUFTUixNQUFNO0lBQ3pDLElBQUlDLElBQUk7SUFDUixNQUFPQSxJQUFJRCxPQUFPSixNQUFNLEVBQUUsRUFBRUssRUFBRztRQUMzQixJQUFJLElBQUksQ0FBQ1AsV0FBVyxDQUFDZSxPQUFPLENBQUNULE1BQU0sQ0FBQ0MsRUFBRSxNQUFNLENBQUMsR0FBRztZQUM1QyxPQUFPO1FBQ1g7SUFDSjtJQUNBLE9BQU87QUFDWDtBQUVBWSxPQUFPQyxPQUFPLEdBQUdyQiIsInNvdXJjZXMiOlsid2VicGFjazovL3Nwb3RpZnktdG8teW91dHViZS8uL25vZGVfbW9kdWxlcy9hbnktYmFzZS9zcmMvY29udmVydGVyLmpzP2RjNzQiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENvbnZlcnRlclxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfEFycmF5fSBzcmNBbHBoYWJldFxuICogQHBhcmFtIHtzdHJpbmd8QXJyYXl9IGRzdEFscGhhYmV0XG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gQ29udmVydGVyKHNyY0FscGhhYmV0LCBkc3RBbHBoYWJldCkge1xuICAgIGlmICghc3JjQWxwaGFiZXQgfHwgIWRzdEFscGhhYmV0IHx8ICFzcmNBbHBoYWJldC5sZW5ndGggfHwgIWRzdEFscGhhYmV0Lmxlbmd0aCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0JhZCBhbHBoYWJldCcpO1xuICAgIH1cbiAgICB0aGlzLnNyY0FscGhhYmV0ID0gc3JjQWxwaGFiZXQ7XG4gICAgdGhpcy5kc3RBbHBoYWJldCA9IGRzdEFscGhhYmV0O1xufVxuXG4vKipcbiAqIENvbnZlcnQgbnVtYmVyIGZyb20gc291cmNlIGFscGhhYmV0IHRvIGRlc3RpbmF0aW9uIGFscGhhYmV0XG4gKlxuICogQHBhcmFtIHtzdHJpbmd8QXJyYXl9IG51bWJlciAtIG51bWJlciByZXByZXNlbnRlZCBhcyBhIHN0cmluZyBvciBhcnJheSBvZiBwb2ludHNcbiAqXG4gKiBAcmV0dXJucyB7c3RyaW5nfEFycmF5fVxuICovXG5Db252ZXJ0ZXIucHJvdG90eXBlLmNvbnZlcnQgPSBmdW5jdGlvbihudW1iZXIpIHtcbiAgICB2YXIgaSwgZGl2aWRlLCBuZXdsZW4sXG4gICAgbnVtYmVyTWFwID0ge30sXG4gICAgZnJvbUJhc2UgPSB0aGlzLnNyY0FscGhhYmV0Lmxlbmd0aCxcbiAgICB0b0Jhc2UgPSB0aGlzLmRzdEFscGhhYmV0Lmxlbmd0aCxcbiAgICBsZW5ndGggPSBudW1iZXIubGVuZ3RoLFxuICAgIHJlc3VsdCA9IHR5cGVvZiBudW1iZXIgPT09ICdzdHJpbmcnID8gJycgOiBbXTtcblxuICAgIGlmICghdGhpcy5pc1ZhbGlkKG51bWJlcikpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdOdW1iZXIgXCInICsgbnVtYmVyICsgJ1wiIGNvbnRhaW5zIG9mIG5vbi1hbHBoYWJldGljIGRpZ2l0cyAoJyArIHRoaXMuc3JjQWxwaGFiZXQgKyAnKScpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnNyY0FscGhhYmV0ID09PSB0aGlzLmRzdEFscGhhYmV0KSB7XG4gICAgICAgIHJldHVybiBudW1iZXI7XG4gICAgfVxuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIG51bWJlck1hcFtpXSA9IHRoaXMuc3JjQWxwaGFiZXQuaW5kZXhPZihudW1iZXJbaV0pO1xuICAgIH1cbiAgICBkbyB7XG4gICAgICAgIGRpdmlkZSA9IDA7XG4gICAgICAgIG5ld2xlbiA9IDA7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgZGl2aWRlID0gZGl2aWRlICogZnJvbUJhc2UgKyBudW1iZXJNYXBbaV07XG4gICAgICAgICAgICBpZiAoZGl2aWRlID49IHRvQmFzZSkge1xuICAgICAgICAgICAgICAgIG51bWJlck1hcFtuZXdsZW4rK10gPSBwYXJzZUludChkaXZpZGUgLyB0b0Jhc2UsIDEwKTtcbiAgICAgICAgICAgICAgICBkaXZpZGUgPSBkaXZpZGUgJSB0b0Jhc2U7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG5ld2xlbiA+IDApIHtcbiAgICAgICAgICAgICAgICBudW1iZXJNYXBbbmV3bGVuKytdID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBsZW5ndGggPSBuZXdsZW47XG4gICAgICAgIHJlc3VsdCA9IHRoaXMuZHN0QWxwaGFiZXQuc2xpY2UoZGl2aWRlLCBkaXZpZGUgKyAxKS5jb25jYXQocmVzdWx0KTtcbiAgICB9IHdoaWxlIChuZXdsZW4gIT09IDApO1xuXG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbi8qKlxuICogVmFsaWQgbnVtYmVyIHdpdGggc291cmNlIGFscGhhYmV0XG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IG51bWJlclxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5Db252ZXJ0ZXIucHJvdG90eXBlLmlzVmFsaWQgPSBmdW5jdGlvbihudW1iZXIpIHtcbiAgICB2YXIgaSA9IDA7XG4gICAgZm9yICg7IGkgPCBudW1iZXIubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgaWYgKHRoaXMuc3JjQWxwaGFiZXQuaW5kZXhPZihudW1iZXJbaV0pID09PSAtMSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBDb252ZXJ0ZXI7Il0sIm5hbWVzIjpbIkNvbnZlcnRlciIsInNyY0FscGhhYmV0IiwiZHN0QWxwaGFiZXQiLCJsZW5ndGgiLCJFcnJvciIsInByb3RvdHlwZSIsImNvbnZlcnQiLCJudW1iZXIiLCJpIiwiZGl2aWRlIiwibmV3bGVuIiwibnVtYmVyTWFwIiwiZnJvbUJhc2UiLCJ0b0Jhc2UiLCJyZXN1bHQiLCJpc1ZhbGlkIiwiaW5kZXhPZiIsInBhcnNlSW50Iiwic2xpY2UiLCJjb25jYXQiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/any-base/src/converter.js\n");

/***/ })

};
;